
lab9-efectos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b48  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000a48  0c104b48  0c104b48  0000cb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0c105590  0c105590  0000d590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         000000d8  0c105598  0c105598  0000d598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000bb816  0c105670  0c105670  0000d670  2**2
                  ALLOC
  5 .debug_abbrev 000008d6  00000000  00000000  0000d670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001701  00000000  00000000  0000df46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c6f  00000000  00000000  0000f647  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_macinfo 0003113d  00000000  00000000  000102b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000120c  00000000  00000000  000413f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000007d8  00000000  00000000  000425ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000205  00000000  00000000  00042dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000160  00000000  00000000  00042fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007df  00000000  00000000  0004313c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000002a  00000000  00000000  0004391b  2**0
                  CONTENTS, READONLY
 15 .ARM.attributes 00000032  00000000  00000000  00043945  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001048  00000000  00000000  00043978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:
void audiodelay_init( audiodelay_t *buffer, uint16 size );
void audiodelay_put( audiodelay_t *buffer, int16 ch0, int16 ch1 );
void audiodelay_get( audiodelay_t *buffer, int16 *ch0, int16 *ch1 );

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd010 	sub	sp, sp, #16
	uint32 i;
	int16 ch0, ch1;
	int16 ch0_aux, ch1_aux;

	sys_init();
 c100010:	eb0006ea 	bl	c101bc0 <sys_init>
    uart0_init();
 c100014:	eb000cf6 	bl	c1033f4 <uart0_init>
    segs_init();
 c100018:	eb0006b3 	bl	c101aec <segs_init>
    keypad_init();
 c10001c:	eb00063f 	bl	c101920 <keypad_init>
    uda1341ts_init();
 c100020:	eb000e63 	bl	c1039b4 <uda1341ts_init>
    iis_init( IIS_POLLING );
 c100024:	e3a00002 	mov	r0, #2
 c100028:	eb0003c2 	bl	c100f38 <iis_init>

    /************************************/

    uart0_puts( "\n\nReproducción de sonido tabulado (LA central 440 Hz)\n" );
 c10002c:	e59f0c4c 	ldr	r0, [pc, #3148]	; c100c80 <main+0xc80>
 c100030:	eb000d2e 	bl	c1034f0 <uart0_puts>
    uart0_puts( "(para finalizar presione cualquier tecla)\n" );
 c100034:	e59f0c48 	ldr	r0, [pc, #3144]	; c100c84 <main+0xc84>
 c100038:	eb000d2c 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Sinusoide: escuche... " );
 c10003c:	e59f0c44 	ldr	r0, [pc, #3140]	; c100c88 <main+0xc88>
 c100040:	eb000d2a 	bl	c1034f0 <uart0_puts>
    i = 0;
 c100044:	e3a03000 	mov	r3, #0
 c100048:	e50b3010 	str	r3, [fp, #-16]
    while( !keypad_pressed() )
 c10004c:	ea000018 	b	c1000b4 <main+0xb4>
    {
     	iis_putSample( sine[i], sine[i] );
 c100050:	e59f2c34 	ldr	r2, [pc, #3124]	; c100c8c <main+0xc8c>
 c100054:	e51b3010 	ldr	r3, [fp, #-16]
 c100058:	e1a03083 	lsl	r3, r3, #1
 c10005c:	e0823003 	add	r3, r2, r3
 c100060:	e1d320b0 	ldrh	r2, [r3]
 c100064:	e59f1c20 	ldr	r1, [pc, #3104]	; c100c8c <main+0xc8c>
 c100068:	e51b3010 	ldr	r3, [fp, #-16]
 c10006c:	e1a03083 	lsl	r3, r3, #1
 c100070:	e0813003 	add	r3, r1, r3
 c100074:	e1d330b0 	ldrh	r3, [r3]
 c100078:	e1a02802 	lsl	r2, r2, #16
 c10007c:	e1a02842 	asr	r2, r2, #16
 c100080:	e1a03803 	lsl	r3, r3, #16
 c100084:	e1a03843 	asr	r3, r3, #16
 c100088:	e1a00002 	mov	r0, r2
 c10008c:	e1a01003 	mov	r1, r3
 c100090:	eb0003ef 	bl	c101054 <iis_putSample>
     	if( ++i > WAVETABLE_SIZE )
 c100094:	e51b3010 	ldr	r3, [fp, #-16]
 c100098:	e2833001 	add	r3, r3, #1
 c10009c:	e50b3010 	str	r3, [fp, #-16]
 c1000a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1000a4:	e3530024 	cmp	r3, #36	; 0x24
 c1000a8:	9a000001 	bls	c1000b4 <main+0xb4>
     		i = 0;
 c1000ac:	e3a03000 	mov	r3, #0
 c1000b0:	e50b3010 	str	r3, [fp, #-16]

    /************************************/

    uart0_puts( "  - Sinusoide: escuche... " );
    i = 0;
    while( !keypad_pressed() )
 c1000b4:	eb0005e3 	bl	c101848 <keypad_pressed>
 c1000b8:	e1a03000 	mov	r3, r0
 c1000bc:	e3530000 	cmp	r3, #0
 c1000c0:	0affffe2 	beq	c100050 <main+0x50>
    {
     	iis_putSample( sine[i], sine[i] );
     	if( ++i > WAVETABLE_SIZE )
     		i = 0;
    }
    keypad_getchar();
 c1000c4:	eb00061c 	bl	c10193c <keypad_getchar>
    uart0_puts( "OK\n" );
 c1000c8:	e59f0bc0 	ldr	r0, [pc, #3008]	; c100c90 <main+0xc90>
 c1000cc:	eb000d07 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Onda cuadrada: escuche... " );
 c1000d0:	e59f0bbc 	ldr	r0, [pc, #3004]	; c100c94 <main+0xc94>
 c1000d4:	eb000d05 	bl	c1034f0 <uart0_puts>
	i = 0;
 c1000d8:	e3a03000 	mov	r3, #0
 c1000dc:	e50b3010 	str	r3, [fp, #-16]
    while( !keypad_pressed() )
 c1000e0:	ea000018 	b	c100148 <main+0x148>
    {
     	iis_putSample( square[i], square[i] );
 c1000e4:	e59f2bac 	ldr	r2, [pc, #2988]	; c100c98 <main+0xc98>
 c1000e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1000ec:	e1a03083 	lsl	r3, r3, #1
 c1000f0:	e0823003 	add	r3, r2, r3
 c1000f4:	e1d320b0 	ldrh	r2, [r3]
 c1000f8:	e59f1b98 	ldr	r1, [pc, #2968]	; c100c98 <main+0xc98>
 c1000fc:	e51b3010 	ldr	r3, [fp, #-16]
 c100100:	e1a03083 	lsl	r3, r3, #1
 c100104:	e0813003 	add	r3, r1, r3
 c100108:	e1d330b0 	ldrh	r3, [r3]
 c10010c:	e1a02802 	lsl	r2, r2, #16
 c100110:	e1a02842 	asr	r2, r2, #16
 c100114:	e1a03803 	lsl	r3, r3, #16
 c100118:	e1a03843 	asr	r3, r3, #16
 c10011c:	e1a00002 	mov	r0, r2
 c100120:	e1a01003 	mov	r1, r3
 c100124:	eb0003ca 	bl	c101054 <iis_putSample>
     	if( ++i > WAVETABLE_SIZE )
 c100128:	e51b3010 	ldr	r3, [fp, #-16]
 c10012c:	e2833001 	add	r3, r3, #1
 c100130:	e50b3010 	str	r3, [fp, #-16]
 c100134:	e51b3010 	ldr	r3, [fp, #-16]
 c100138:	e3530024 	cmp	r3, #36	; 0x24
 c10013c:	9a000001 	bls	c100148 <main+0x148>
     		i = 0;
 c100140:	e3a03000 	mov	r3, #0
 c100144:	e50b3010 	str	r3, [fp, #-16]

    /************************************/

    uart0_puts( "  - Onda cuadrada: escuche... " );
	i = 0;
    while( !keypad_pressed() )
 c100148:	eb0005be 	bl	c101848 <keypad_pressed>
 c10014c:	e1a03000 	mov	r3, r0
 c100150:	e3530000 	cmp	r3, #0
 c100154:	0affffe2 	beq	c1000e4 <main+0xe4>
    {
     	iis_putSample( square[i], square[i] );
     	if( ++i > WAVETABLE_SIZE )
     		i = 0;
    }
    keypad_getchar();
 c100158:	eb0005f7 	bl	c10193c <keypad_getchar>
    uart0_puts( "OK\n" );
 c10015c:	e59f0b2c 	ldr	r0, [pc, #2860]	; c100c90 <main+0xc90>
 c100160:	eb000ce2 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Onda triangular: escuche... " );
 c100164:	e59f0b30 	ldr	r0, [pc, #2864]	; c100c9c <main+0xc9c>
 c100168:	eb000ce0 	bl	c1034f0 <uart0_puts>
    i = 0;
 c10016c:	e3a03000 	mov	r3, #0
 c100170:	e50b3010 	str	r3, [fp, #-16]
	while( !keypad_pressed() )
 c100174:	ea000018 	b	c1001dc <main+0x1dc>
    {
     	iis_putSample( triangle[i], triangle[i] );
 c100178:	e59f2b20 	ldr	r2, [pc, #2848]	; c100ca0 <main+0xca0>
 c10017c:	e51b3010 	ldr	r3, [fp, #-16]
 c100180:	e1a03083 	lsl	r3, r3, #1
 c100184:	e0823003 	add	r3, r2, r3
 c100188:	e1d320b0 	ldrh	r2, [r3]
 c10018c:	e59f1b0c 	ldr	r1, [pc, #2828]	; c100ca0 <main+0xca0>
 c100190:	e51b3010 	ldr	r3, [fp, #-16]
 c100194:	e1a03083 	lsl	r3, r3, #1
 c100198:	e0813003 	add	r3, r1, r3
 c10019c:	e1d330b0 	ldrh	r3, [r3]
 c1001a0:	e1a02802 	lsl	r2, r2, #16
 c1001a4:	e1a02842 	asr	r2, r2, #16
 c1001a8:	e1a03803 	lsl	r3, r3, #16
 c1001ac:	e1a03843 	asr	r3, r3, #16
 c1001b0:	e1a00002 	mov	r0, r2
 c1001b4:	e1a01003 	mov	r1, r3
 c1001b8:	eb0003a5 	bl	c101054 <iis_putSample>
     	if( ++i > WAVETABLE_SIZE )
 c1001bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1001c0:	e2833001 	add	r3, r3, #1
 c1001c4:	e50b3010 	str	r3, [fp, #-16]
 c1001c8:	e51b3010 	ldr	r3, [fp, #-16]
 c1001cc:	e3530024 	cmp	r3, #36	; 0x24
 c1001d0:	9a000001 	bls	c1001dc <main+0x1dc>
     		i = 0;
 c1001d4:	e3a03000 	mov	r3, #0
 c1001d8:	e50b3010 	str	r3, [fp, #-16]

    /************************************/

    uart0_puts( "  - Onda triangular: escuche... " );
    i = 0;
	while( !keypad_pressed() )
 c1001dc:	eb000599 	bl	c101848 <keypad_pressed>
 c1001e0:	e1a03000 	mov	r3, r0
 c1001e4:	e3530000 	cmp	r3, #0
 c1001e8:	0affffe2 	beq	c100178 <main+0x178>
    {
     	iis_putSample( triangle[i], triangle[i] );
     	if( ++i > WAVETABLE_SIZE )
     		i = 0;
    }
    keypad_getchar();
 c1001ec:	eb0005d2 	bl	c10193c <keypad_getchar>
	uart0_puts( "OK\n" );
 c1001f0:	e59f0a98 	ldr	r0, [pc, #2712]	; c100c90 <main+0xc90>
 c1001f4:	eb000cbd 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "\nEfectos de audio (dominio temporal)\n" );
 c1001f8:	e59f0aa4 	ldr	r0, [pc, #2724]	; c100ca4 <main+0xca4>
 c1001fc:	eb000cbb 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Grabacion: hable mientras los 7 segmentos estén encendidos... " );
 c100200:	e59f0aa0 	ldr	r0, [pc, #2720]	; c100ca8 <main+0xca8>
 c100204:	eb000cb9 	bl	c1034f0 <uart0_puts>
    segs_putchar( 8 );
 c100208:	e3a00008 	mov	r0, #8
 c10020c:	eb00064b 	bl	c101b40 <segs_putchar>
    for( i=0; i<AUDIOBUFFER_SIZE; i++ )
 c100210:	e3a03000 	mov	r3, #0
 c100214:	e50b3010 	str	r3, [fp, #-16]
 c100218:	ea00000d 	b	c100254 <main+0x254>
     	iis_getSample( &(buffer.ch0[i]), &(buffer.ch1[i]) );
 c10021c:	e51b3010 	ldr	r3, [fp, #-16]
 c100220:	e1a02083 	lsl	r2, r3, #1
 c100224:	e59f3a80 	ldr	r3, [pc, #2688]	; c100cac <main+0xcac>
 c100228:	e0822003 	add	r2, r2, r3
 c10022c:	e51b3010 	ldr	r3, [fp, #-16]
 c100230:	e1a01083 	lsl	r1, r3, #1
 c100234:	e59f3a74 	ldr	r3, [pc, #2676]	; c100cb0 <main+0xcb0>
 c100238:	e0813003 	add	r3, r1, r3
 c10023c:	e1a00002 	mov	r0, r2
 c100240:	e1a01003 	mov	r1, r3
 c100244:	eb00039b 	bl	c1010b8 <iis_getSample>

    /************************************/

    uart0_puts( "  - Grabacion: hable mientras los 7 segmentos estén encendidos... " );
    segs_putchar( 8 );
    for( i=0; i<AUDIOBUFFER_SIZE; i++ )
 c100248:	e51b3010 	ldr	r3, [fp, #-16]
 c10024c:	e2833001 	add	r3, r3, #1
 c100250:	e50b3010 	str	r3, [fp, #-16]
 c100254:	e51b2010 	ldr	r2, [fp, #-16]
 c100258:	e59f3a54 	ldr	r3, [pc, #2644]	; c100cb4 <main+0xcb4>
 c10025c:	e1520003 	cmp	r2, r3
 c100260:	9affffed 	bls	c10021c <main+0x21c>
     	iis_getSample( &(buffer.ch0[i]), &(buffer.ch1[i]) );
    segs_off();
 c100264:	eb000627 	bl	c101b08 <segs_off>
    uart0_puts( "OK\n" );
 c100268:	e59f0a20 	ldr	r0, [pc, #2592]	; c100c90 <main+0xc90>
 c10026c:	eb000c9f 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reproducción a velocidad normal: escuche... " );
 c100270:	e59f0a40 	ldr	r0, [pc, #2624]	; c100cb8 <main+0xcb8>
 c100274:	eb000c9d 	bl	c1034f0 <uart0_puts>
    for( i=0; i<AUDIOBUFFER_SIZE; i++ )
 c100278:	e3a03000 	mov	r3, #0
 c10027c:	e50b3010 	str	r3, [fp, #-16]
 c100280:	ea000015 	b	c1002dc <main+0x2dc>
     	iis_putSample( buffer.ch0[i], buffer.ch1[i] );
 c100284:	e59f2a20 	ldr	r2, [pc, #2592]	; c100cac <main+0xcac>
 c100288:	e51b3010 	ldr	r3, [fp, #-16]
 c10028c:	e1a03083 	lsl	r3, r3, #1
 c100290:	e0823003 	add	r3, r2, r3
 c100294:	e1d320b0 	ldrh	r2, [r3]
 c100298:	e59f1a0c 	ldr	r1, [pc, #2572]	; c100cac <main+0xcac>
 c10029c:	e51b3010 	ldr	r3, [fp, #-16]
 c1002a0:	e2833a27 	add	r3, r3, #159744	; 0x27000
 c1002a4:	e2833c01 	add	r3, r3, #256	; 0x100
 c1002a8:	e1a03083 	lsl	r3, r3, #1
 c1002ac:	e0813003 	add	r3, r1, r3
 c1002b0:	e1d330b0 	ldrh	r3, [r3]
 c1002b4:	e1a02802 	lsl	r2, r2, #16
 c1002b8:	e1a02842 	asr	r2, r2, #16
 c1002bc:	e1a03803 	lsl	r3, r3, #16
 c1002c0:	e1a03843 	asr	r3, r3, #16
 c1002c4:	e1a00002 	mov	r0, r2
 c1002c8:	e1a01003 	mov	r1, r3
 c1002cc:	eb000360 	bl	c101054 <iis_putSample>
    uart0_puts( "OK\n" );

    /************************************/

    uart0_puts( "  - Reproducción a velocidad normal: escuche... " );
    for( i=0; i<AUDIOBUFFER_SIZE; i++ )
 c1002d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1002d4:	e2833001 	add	r3, r3, #1
 c1002d8:	e50b3010 	str	r3, [fp, #-16]
 c1002dc:	e51b2010 	ldr	r2, [fp, #-16]
 c1002e0:	e59f39cc 	ldr	r3, [pc, #2508]	; c100cb4 <main+0xcb4>
 c1002e4:	e1520003 	cmp	r2, r3
 c1002e8:	9affffe5 	bls	c100284 <main+0x284>
     	iis_putSample( buffer.ch0[i], buffer.ch1[i] );
    uart0_puts( "OK\n" );
 c1002ec:	e59f099c 	ldr	r0, [pc, #2460]	; c100c90 <main+0xc90>
 c1002f0:	eb000c7e 	bl	c1034f0 <uart0_puts>

    uart0_puts( "  - Reproducción a media velocidad: escuche... " );
 c1002f4:	e59f09c0 	ldr	r0, [pc, #2496]	; c100cbc <main+0xcbc>
 c1002f8:	eb000c7c 	bl	c1034f0 <uart0_puts>
    for( i=0; i<AUDIOBUFFER_SIZE; i++ )
 c1002fc:	e3a03000 	mov	r3, #0
 c100300:	e50b3010 	str	r3, [fp, #-16]
 c100304:	ea000028 	b	c1003ac <main+0x3ac>
    {
     	iis_putSample( buffer.ch0[i], buffer.ch1[i] );	    // cada muestra almacenada se reproduce 2 veces
 c100308:	e59f299c 	ldr	r2, [pc, #2460]	; c100cac <main+0xcac>
 c10030c:	e51b3010 	ldr	r3, [fp, #-16]
 c100310:	e1a03083 	lsl	r3, r3, #1
 c100314:	e0823003 	add	r3, r2, r3
 c100318:	e1d320b0 	ldrh	r2, [r3]
 c10031c:	e59f1988 	ldr	r1, [pc, #2440]	; c100cac <main+0xcac>
 c100320:	e51b3010 	ldr	r3, [fp, #-16]
 c100324:	e2833a27 	add	r3, r3, #159744	; 0x27000
 c100328:	e2833c01 	add	r3, r3, #256	; 0x100
 c10032c:	e1a03083 	lsl	r3, r3, #1
 c100330:	e0813003 	add	r3, r1, r3
 c100334:	e1d330b0 	ldrh	r3, [r3]
 c100338:	e1a02802 	lsl	r2, r2, #16
 c10033c:	e1a02842 	asr	r2, r2, #16
 c100340:	e1a03803 	lsl	r3, r3, #16
 c100344:	e1a03843 	asr	r3, r3, #16
 c100348:	e1a00002 	mov	r0, r2
 c10034c:	e1a01003 	mov	r1, r3
 c100350:	eb00033f 	bl	c101054 <iis_putSample>
     	iis_putSample( buffer.ch0[i], buffer.ch1[i] );
 c100354:	e59f2950 	ldr	r2, [pc, #2384]	; c100cac <main+0xcac>
 c100358:	e51b3010 	ldr	r3, [fp, #-16]
 c10035c:	e1a03083 	lsl	r3, r3, #1
 c100360:	e0823003 	add	r3, r2, r3
 c100364:	e1d320b0 	ldrh	r2, [r3]
 c100368:	e59f193c 	ldr	r1, [pc, #2364]	; c100cac <main+0xcac>
 c10036c:	e51b3010 	ldr	r3, [fp, #-16]
 c100370:	e2833a27 	add	r3, r3, #159744	; 0x27000
 c100374:	e2833c01 	add	r3, r3, #256	; 0x100
 c100378:	e1a03083 	lsl	r3, r3, #1
 c10037c:	e0813003 	add	r3, r1, r3
 c100380:	e1d330b0 	ldrh	r3, [r3]
 c100384:	e1a02802 	lsl	r2, r2, #16
 c100388:	e1a02842 	asr	r2, r2, #16
 c10038c:	e1a03803 	lsl	r3, r3, #16
 c100390:	e1a03843 	asr	r3, r3, #16
 c100394:	e1a00002 	mov	r0, r2
 c100398:	e1a01003 	mov	r1, r3
 c10039c:	eb00032c 	bl	c101054 <iis_putSample>
    for( i=0; i<AUDIOBUFFER_SIZE; i++ )
     	iis_putSample( buffer.ch0[i], buffer.ch1[i] );
    uart0_puts( "OK\n" );

    uart0_puts( "  - Reproducción a media velocidad: escuche... " );
    for( i=0; i<AUDIOBUFFER_SIZE; i++ )
 c1003a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1003a4:	e2833001 	add	r3, r3, #1
 c1003a8:	e50b3010 	str	r3, [fp, #-16]
 c1003ac:	e51b2010 	ldr	r2, [fp, #-16]
 c1003b0:	e59f38fc 	ldr	r3, [pc, #2300]	; c100cb4 <main+0xcb4>
 c1003b4:	e1520003 	cmp	r2, r3
 c1003b8:	9affffd2 	bls	c100308 <main+0x308>
    {
     	iis_putSample( buffer.ch0[i], buffer.ch1[i] );	    // cada muestra almacenada se reproduce 2 veces
     	iis_putSample( buffer.ch0[i], buffer.ch1[i] );
     }
    uart0_puts( "OK\n" );
 c1003bc:	e59f08cc 	ldr	r0, [pc, #2252]	; c100c90 <main+0xc90>
 c1003c0:	eb000c4a 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reproducción a doble velocidad: escuche... " );
 c1003c4:	e59f08f4 	ldr	r0, [pc, #2292]	; c100cc0 <main+0xcc0>
 c1003c8:	eb000c48 	bl	c1034f0 <uart0_puts>
    for( i=0; i<AUDIOBUFFER_SIZE; i+=2 )		 	// se reproduce 1 de cada 2 muestras almacenadas
 c1003cc:	e3a03000 	mov	r3, #0
 c1003d0:	e50b3010 	str	r3, [fp, #-16]
 c1003d4:	ea000015 	b	c100430 <main+0x430>
     	iis_putSample( buffer.ch0[i], buffer.ch1[i] );
 c1003d8:	e59f28cc 	ldr	r2, [pc, #2252]	; c100cac <main+0xcac>
 c1003dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1003e0:	e1a03083 	lsl	r3, r3, #1
 c1003e4:	e0823003 	add	r3, r2, r3
 c1003e8:	e1d320b0 	ldrh	r2, [r3]
 c1003ec:	e59f18b8 	ldr	r1, [pc, #2232]	; c100cac <main+0xcac>
 c1003f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1003f4:	e2833a27 	add	r3, r3, #159744	; 0x27000
 c1003f8:	e2833c01 	add	r3, r3, #256	; 0x100
 c1003fc:	e1a03083 	lsl	r3, r3, #1
 c100400:	e0813003 	add	r3, r1, r3
 c100404:	e1d330b0 	ldrh	r3, [r3]
 c100408:	e1a02802 	lsl	r2, r2, #16
 c10040c:	e1a02842 	asr	r2, r2, #16
 c100410:	e1a03803 	lsl	r3, r3, #16
 c100414:	e1a03843 	asr	r3, r3, #16
 c100418:	e1a00002 	mov	r0, r2
 c10041c:	e1a01003 	mov	r1, r3
 c100420:	eb00030b 	bl	c101054 <iis_putSample>
    uart0_puts( "OK\n" );

    /************************************/

    uart0_puts( "  - Reproducción a doble velocidad: escuche... " );
    for( i=0; i<AUDIOBUFFER_SIZE; i+=2 )		 	// se reproduce 1 de cada 2 muestras almacenadas
 c100424:	e51b3010 	ldr	r3, [fp, #-16]
 c100428:	e2833002 	add	r3, r3, #2
 c10042c:	e50b3010 	str	r3, [fp, #-16]
 c100430:	e51b2010 	ldr	r2, [fp, #-16]
 c100434:	e59f3878 	ldr	r3, [pc, #2168]	; c100cb4 <main+0xcb4>
 c100438:	e1520003 	cmp	r2, r3
 c10043c:	9affffe5 	bls	c1003d8 <main+0x3d8>
     	iis_putSample( buffer.ch0[i], buffer.ch1[i] );
    uart0_puts( "OK\n" );
 c100440:	e59f0848 	ldr	r0, [pc, #2120]	; c100c90 <main+0xc90>
 c100444:	eb000c29 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reproducción inversa: escuche... " );
 c100448:	e59f0874 	ldr	r0, [pc, #2164]	; c100cc4 <main+0xcc4>
 c10044c:	eb000c27 	bl	c1034f0 <uart0_puts>
    for( i=0; i<AUDIOBUFFER_SIZE; i++ )
 c100450:	e3a03000 	mov	r3, #0
 c100454:	e50b3010 	str	r3, [fp, #-16]
 c100458:	ea000019 	b	c1004c4 <main+0x4c4>
     	iis_putSample( buffer.ch0[AUDIOBUFFER_SIZE-i], buffer.ch1[AUDIOBUFFER_SIZE-i] );
 c10045c:	e51b3010 	ldr	r3, [fp, #-16]
 c100460:	e2633a27 	rsb	r3, r3, #159744	; 0x27000
 c100464:	e2833c01 	add	r3, r3, #256	; 0x100
 c100468:	e59f283c 	ldr	r2, [pc, #2108]	; c100cac <main+0xcac>
 c10046c:	e1a03083 	lsl	r3, r3, #1
 c100470:	e0823003 	add	r3, r2, r3
 c100474:	e1d320b0 	ldrh	r2, [r3]
 c100478:	e51b3010 	ldr	r3, [fp, #-16]
 c10047c:	e2633a27 	rsb	r3, r3, #159744	; 0x27000
 c100480:	e2833c01 	add	r3, r3, #256	; 0x100
 c100484:	e59f1820 	ldr	r1, [pc, #2080]	; c100cac <main+0xcac>
 c100488:	e2833a27 	add	r3, r3, #159744	; 0x27000
 c10048c:	e2833c01 	add	r3, r3, #256	; 0x100
 c100490:	e1a03083 	lsl	r3, r3, #1
 c100494:	e0813003 	add	r3, r1, r3
 c100498:	e1d330b0 	ldrh	r3, [r3]
 c10049c:	e1a02802 	lsl	r2, r2, #16
 c1004a0:	e1a02842 	asr	r2, r2, #16
 c1004a4:	e1a03803 	lsl	r3, r3, #16
 c1004a8:	e1a03843 	asr	r3, r3, #16
 c1004ac:	e1a00002 	mov	r0, r2
 c1004b0:	e1a01003 	mov	r1, r3
 c1004b4:	eb0002e6 	bl	c101054 <iis_putSample>
    uart0_puts( "OK\n" );

    /************************************/

    uart0_puts( "  - Reproducción inversa: escuche... " );
    for( i=0; i<AUDIOBUFFER_SIZE; i++ )
 c1004b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1004bc:	e2833001 	add	r3, r3, #1
 c1004c0:	e50b3010 	str	r3, [fp, #-16]
 c1004c4:	e51b2010 	ldr	r2, [fp, #-16]
 c1004c8:	e59f37e4 	ldr	r3, [pc, #2020]	; c100cb4 <main+0xcb4>
 c1004cc:	e1520003 	cmp	r2, r3
 c1004d0:	9affffe1 	bls	c10045c <main+0x45c>
     	iis_putSample( buffer.ch0[AUDIOBUFFER_SIZE-i], buffer.ch1[AUDIOBUFFER_SIZE-i] );
    uart0_puts( "OK\n" );
 c1004d4:	e59f07b4 	ldr	r0, [pc, #1972]	; c100c90 <main+0xc90>
 c1004d8:	eb000c04 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "(para finalizar presione cualquier tecla)\n" );
 c1004dc:	e59f07a0 	ldr	r0, [pc, #1952]	; c100c84 <main+0xc84>
 c1004e0:	eb000c02 	bl	c1034f0 <uart0_puts>
    uart0_puts( "  - Loopback: hable y escuche... " );
 c1004e4:	e59f07dc 	ldr	r0, [pc, #2012]	; c100cc8 <main+0xcc8>
 c1004e8:	eb000c00 	bl	c1034f0 <uart0_puts>
    while( !keypad_pressed() )
 c1004ec:	ea00000d 	b	c100528 <main+0x528>
    {
     	iis_getSample( &ch0, &ch1 );
 c1004f0:	e24b2012 	sub	r2, fp, #18
 c1004f4:	e24b3014 	sub	r3, fp, #20
 c1004f8:	e1a00002 	mov	r0, r2
 c1004fc:	e1a01003 	mov	r1, r3
 c100500:	eb0002ec 	bl	c1010b8 <iis_getSample>
     	iis_putSample( ch0, ch1 );
 c100504:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100508:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c10050c:	e1a02802 	lsl	r2, r2, #16
 c100510:	e1a02842 	asr	r2, r2, #16
 c100514:	e1a03803 	lsl	r3, r3, #16
 c100518:	e1a03843 	asr	r3, r3, #16
 c10051c:	e1a00002 	mov	r0, r2
 c100520:	e1a01003 	mov	r1, r3
 c100524:	eb0002ca 	bl	c101054 <iis_putSample>

    /************************************/

    uart0_puts( "(para finalizar presione cualquier tecla)\n" );
    uart0_puts( "  - Loopback: hable y escuche... " );
    while( !keypad_pressed() )
 c100528:	eb0004c6 	bl	c101848 <keypad_pressed>
 c10052c:	e1a03000 	mov	r3, r0
 c100530:	e3530000 	cmp	r3, #0
 c100534:	0affffed 	beq	c1004f0 <main+0x4f0>
    {
     	iis_getSample( &ch0, &ch1 );
     	iis_putSample( ch0, ch1 );
     }
    keypad_getchar();
 c100538:	eb0004ff 	bl	c10193c <keypad_getchar>
    uart0_puts( "OK\n" );
 c10053c:	e59f074c 	ldr	r0, [pc, #1868]	; c100c90 <main+0xc90>
 c100540:	eb000bea 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Echo (8 ms): hable y escuche... " );
 c100544:	e59f0780 	ldr	r0, [pc, #1920]	; c100ccc <main+0xccc>
 c100548:	eb000be8 	bl	c1034f0 <uart0_puts>
    audiodelay_init( &delay_buffer, 128 );
 c10054c:	e59f077c 	ldr	r0, [pc, #1916]	; c100cd0 <main+0xcd0>
 c100550:	e3a01080 	mov	r1, #128	; 0x80
 c100554:	eb0001e3 	bl	c100ce8 <audiodelay_init>
    while( !keypad_pressed() )
 c100558:	ea00003f 	b	c10065c <main+0x65c>
    {
     	iis_getSample( &ch0, &ch1 );
 c10055c:	e24b2012 	sub	r2, fp, #18
 c100560:	e24b3014 	sub	r3, fp, #20
 c100564:	e1a00002 	mov	r0, r2
 c100568:	e1a01003 	mov	r1, r3
 c10056c:	eb0002d1 	bl	c1010b8 <iis_getSample>
    	audiodelay_get( &delay_buffer, &ch0_aux, &ch1_aux );
 c100570:	e24b2016 	sub	r2, fp, #22
 c100574:	e24b3018 	sub	r3, fp, #24
 c100578:	e59f0750 	ldr	r0, [pc, #1872]	; c100cd0 <main+0xcd0>
 c10057c:	e1a01002 	mov	r1, r2
 c100580:	e1a02003 	mov	r2, r3
 c100584:	eb000238 	bl	c100e6c <audiodelay_get>
     	ch0_aux = ch0 + (ch0_aux >> 1);
 c100588:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10058c:	e1a03803 	lsl	r3, r3, #16
 c100590:	e1a03843 	asr	r3, r3, #16
 c100594:	e1a030c3 	asr	r3, r3, #1
 c100598:	e1a03803 	lsl	r3, r3, #16
 c10059c:	e1a03823 	lsr	r3, r3, #16
 c1005a0:	e1a03803 	lsl	r3, r3, #16
 c1005a4:	e1a02823 	lsr	r2, r3, #16
 c1005a8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c1005ac:	e1a03803 	lsl	r3, r3, #16
 c1005b0:	e1a03823 	lsr	r3, r3, #16
 c1005b4:	e0823003 	add	r3, r2, r3
 c1005b8:	e1a03803 	lsl	r3, r3, #16
 c1005bc:	e1a03823 	lsr	r3, r3, #16
 c1005c0:	e1a03803 	lsl	r3, r3, #16
 c1005c4:	e1a03823 	lsr	r3, r3, #16
 c1005c8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
     	ch1_aux = ch1 + (ch1_aux >> 1);
 c1005cc:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1005d0:	e1a03803 	lsl	r3, r3, #16
 c1005d4:	e1a03843 	asr	r3, r3, #16
 c1005d8:	e1a030c3 	asr	r3, r3, #1
 c1005dc:	e1a03803 	lsl	r3, r3, #16
 c1005e0:	e1a03823 	lsr	r3, r3, #16
 c1005e4:	e1a03803 	lsl	r3, r3, #16
 c1005e8:	e1a02823 	lsr	r2, r3, #16
 c1005ec:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c1005f0:	e1a03803 	lsl	r3, r3, #16
 c1005f4:	e1a03823 	lsr	r3, r3, #16
 c1005f8:	e0823003 	add	r3, r2, r3
 c1005fc:	e1a03803 	lsl	r3, r3, #16
 c100600:	e1a03823 	lsr	r3, r3, #16
 c100604:	e1a03803 	lsl	r3, r3, #16
 c100608:	e1a03823 	lsr	r3, r3, #16
 c10060c:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
     	iis_putSample( ch0_aux, ch1_aux );
 c100610:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c100614:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100618:	e1a02802 	lsl	r2, r2, #16
 c10061c:	e1a02842 	asr	r2, r2, #16
 c100620:	e1a03803 	lsl	r3, r3, #16
 c100624:	e1a03843 	asr	r3, r3, #16
 c100628:	e1a00002 	mov	r0, r2
 c10062c:	e1a01003 	mov	r1, r3
 c100630:	eb000287 	bl	c101054 <iis_putSample>
    	audiodelay_put( &delay_buffer, ch0, ch1 );
 c100634:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100638:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c10063c:	e1a02802 	lsl	r2, r2, #16
 c100640:	e1a02842 	asr	r2, r2, #16
 c100644:	e1a03803 	lsl	r3, r3, #16
 c100648:	e1a03843 	asr	r3, r3, #16
 c10064c:	e59f067c 	ldr	r0, [pc, #1660]	; c100cd0 <main+0xcd0>
 c100650:	e1a01002 	mov	r1, r2
 c100654:	e1a02003 	mov	r2, r3
 c100658:	eb0001d1 	bl	c100da4 <audiodelay_put>

    /************************************/

    uart0_puts( "  - Echo (8 ms): hable y escuche... " );
    audiodelay_init( &delay_buffer, 128 );
    while( !keypad_pressed() )
 c10065c:	eb000479 	bl	c101848 <keypad_pressed>
 c100660:	e1a03000 	mov	r3, r0
 c100664:	e3530000 	cmp	r3, #0
 c100668:	0affffbb 	beq	c10055c <main+0x55c>
     	ch0_aux = ch0 + (ch0_aux >> 1);
     	ch1_aux = ch1 + (ch1_aux >> 1);
     	iis_putSample( ch0_aux, ch1_aux );
    	audiodelay_put( &delay_buffer, ch0, ch1 );
    }
    keypad_getchar();
 c10066c:	eb0004b2 	bl	c10193c <keypad_getchar>
    uart0_puts( "OK\n" );
 c100670:	e59f0618 	ldr	r0, [pc, #1560]	; c100c90 <main+0xc90>
 c100674:	eb000b9d 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Echo (45 ms): hable y escuche... " );
 c100678:	e59f0654 	ldr	r0, [pc, #1620]	; c100cd4 <main+0xcd4>
 c10067c:	eb000b9b 	bl	c1034f0 <uart0_puts>
    audiodelay_init( &delay_buffer, 720 );
 c100680:	e59f0648 	ldr	r0, [pc, #1608]	; c100cd0 <main+0xcd0>
 c100684:	e3a01e2d 	mov	r1, #720	; 0x2d0
 c100688:	eb000196 	bl	c100ce8 <audiodelay_init>
    while( !keypad_pressed() )
 c10068c:	ea00003f 	b	c100790 <main+0x790>
    {
     	iis_getSample( &ch0, &ch1 );
 c100690:	e24b2012 	sub	r2, fp, #18
 c100694:	e24b3014 	sub	r3, fp, #20
 c100698:	e1a00002 	mov	r0, r2
 c10069c:	e1a01003 	mov	r1, r3
 c1006a0:	eb000284 	bl	c1010b8 <iis_getSample>
    	audiodelay_get( &delay_buffer, &ch0_aux, &ch1_aux );
 c1006a4:	e24b2016 	sub	r2, fp, #22
 c1006a8:	e24b3018 	sub	r3, fp, #24
 c1006ac:	e59f061c 	ldr	r0, [pc, #1564]	; c100cd0 <main+0xcd0>
 c1006b0:	e1a01002 	mov	r1, r2
 c1006b4:	e1a02003 	mov	r2, r3
 c1006b8:	eb0001eb 	bl	c100e6c <audiodelay_get>
     	ch0_aux = ch0 + (ch0_aux >> 1);
 c1006bc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1006c0:	e1a03803 	lsl	r3, r3, #16
 c1006c4:	e1a03843 	asr	r3, r3, #16
 c1006c8:	e1a030c3 	asr	r3, r3, #1
 c1006cc:	e1a03803 	lsl	r3, r3, #16
 c1006d0:	e1a03823 	lsr	r3, r3, #16
 c1006d4:	e1a03803 	lsl	r3, r3, #16
 c1006d8:	e1a02823 	lsr	r2, r3, #16
 c1006dc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c1006e0:	e1a03803 	lsl	r3, r3, #16
 c1006e4:	e1a03823 	lsr	r3, r3, #16
 c1006e8:	e0823003 	add	r3, r2, r3
 c1006ec:	e1a03803 	lsl	r3, r3, #16
 c1006f0:	e1a03823 	lsr	r3, r3, #16
 c1006f4:	e1a03803 	lsl	r3, r3, #16
 c1006f8:	e1a03823 	lsr	r3, r3, #16
 c1006fc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
     	ch1_aux = ch1 + (ch1_aux >> 1);
 c100700:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100704:	e1a03803 	lsl	r3, r3, #16
 c100708:	e1a03843 	asr	r3, r3, #16
 c10070c:	e1a030c3 	asr	r3, r3, #1
 c100710:	e1a03803 	lsl	r3, r3, #16
 c100714:	e1a03823 	lsr	r3, r3, #16
 c100718:	e1a03803 	lsl	r3, r3, #16
 c10071c:	e1a02823 	lsr	r2, r3, #16
 c100720:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100724:	e1a03803 	lsl	r3, r3, #16
 c100728:	e1a03823 	lsr	r3, r3, #16
 c10072c:	e0823003 	add	r3, r2, r3
 c100730:	e1a03803 	lsl	r3, r3, #16
 c100734:	e1a03823 	lsr	r3, r3, #16
 c100738:	e1a03803 	lsl	r3, r3, #16
 c10073c:	e1a03823 	lsr	r3, r3, #16
 c100740:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
     	iis_putSample( ch0_aux, ch1_aux );
 c100744:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c100748:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10074c:	e1a02802 	lsl	r2, r2, #16
 c100750:	e1a02842 	asr	r2, r2, #16
 c100754:	e1a03803 	lsl	r3, r3, #16
 c100758:	e1a03843 	asr	r3, r3, #16
 c10075c:	e1a00002 	mov	r0, r2
 c100760:	e1a01003 	mov	r1, r3
 c100764:	eb00023a 	bl	c101054 <iis_putSample>
    	audiodelay_put( &delay_buffer, ch0, ch1 );
 c100768:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c10076c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100770:	e1a02802 	lsl	r2, r2, #16
 c100774:	e1a02842 	asr	r2, r2, #16
 c100778:	e1a03803 	lsl	r3, r3, #16
 c10077c:	e1a03843 	asr	r3, r3, #16
 c100780:	e59f0548 	ldr	r0, [pc, #1352]	; c100cd0 <main+0xcd0>
 c100784:	e1a01002 	mov	r1, r2
 c100788:	e1a02003 	mov	r2, r3
 c10078c:	eb000184 	bl	c100da4 <audiodelay_put>

    /************************************/

    uart0_puts( "  - Echo (45 ms): hable y escuche... " );
    audiodelay_init( &delay_buffer, 720 );
    while( !keypad_pressed() )
 c100790:	eb00042c 	bl	c101848 <keypad_pressed>
 c100794:	e1a03000 	mov	r3, r0
 c100798:	e3530000 	cmp	r3, #0
 c10079c:	0affffbb 	beq	c100690 <main+0x690>
     	ch0_aux = ch0 + (ch0_aux >> 1);
     	ch1_aux = ch1 + (ch1_aux >> 1);
     	iis_putSample( ch0_aux, ch1_aux );
    	audiodelay_put( &delay_buffer, ch0, ch1 );
    }
    keypad_getchar();
 c1007a0:	eb000465 	bl	c10193c <keypad_getchar>
    uart0_puts( "OK\n" );
 c1007a4:	e59f04e4 	ldr	r0, [pc, #1252]	; c100c90 <main+0xc90>
 c1007a8:	eb000b50 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Echo (85 ms): hable y escuche... " );
 c1007ac:	e59f0524 	ldr	r0, [pc, #1316]	; c100cd8 <main+0xcd8>
 c1007b0:	eb000b4e 	bl	c1034f0 <uart0_puts>
    audiodelay_init( &delay_buffer, 1280 );
 c1007b4:	e59f0514 	ldr	r0, [pc, #1300]	; c100cd0 <main+0xcd0>
 c1007b8:	e3a01c05 	mov	r1, #1280	; 0x500
 c1007bc:	eb000149 	bl	c100ce8 <audiodelay_init>
    while( !keypad_pressed() )
 c1007c0:	ea00003f 	b	c1008c4 <main+0x8c4>
    {
     	iis_getSample( &ch0, &ch1 );
 c1007c4:	e24b2012 	sub	r2, fp, #18
 c1007c8:	e24b3014 	sub	r3, fp, #20
 c1007cc:	e1a00002 	mov	r0, r2
 c1007d0:	e1a01003 	mov	r1, r3
 c1007d4:	eb000237 	bl	c1010b8 <iis_getSample>
    	audiodelay_get( &delay_buffer, &ch0_aux, &ch1_aux );
 c1007d8:	e24b2016 	sub	r2, fp, #22
 c1007dc:	e24b3018 	sub	r3, fp, #24
 c1007e0:	e59f04e8 	ldr	r0, [pc, #1256]	; c100cd0 <main+0xcd0>
 c1007e4:	e1a01002 	mov	r1, r2
 c1007e8:	e1a02003 	mov	r2, r3
 c1007ec:	eb00019e 	bl	c100e6c <audiodelay_get>
     	ch0_aux = ch0 + (ch0_aux >> 1);
 c1007f0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1007f4:	e1a03803 	lsl	r3, r3, #16
 c1007f8:	e1a03843 	asr	r3, r3, #16
 c1007fc:	e1a030c3 	asr	r3, r3, #1
 c100800:	e1a03803 	lsl	r3, r3, #16
 c100804:	e1a03823 	lsr	r3, r3, #16
 c100808:	e1a03803 	lsl	r3, r3, #16
 c10080c:	e1a02823 	lsr	r2, r3, #16
 c100810:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c100814:	e1a03803 	lsl	r3, r3, #16
 c100818:	e1a03823 	lsr	r3, r3, #16
 c10081c:	e0823003 	add	r3, r2, r3
 c100820:	e1a03803 	lsl	r3, r3, #16
 c100824:	e1a03823 	lsr	r3, r3, #16
 c100828:	e1a03803 	lsl	r3, r3, #16
 c10082c:	e1a03823 	lsr	r3, r3, #16
 c100830:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
     	ch1_aux = ch1 + (ch1_aux >> 1);
 c100834:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100838:	e1a03803 	lsl	r3, r3, #16
 c10083c:	e1a03843 	asr	r3, r3, #16
 c100840:	e1a030c3 	asr	r3, r3, #1
 c100844:	e1a03803 	lsl	r3, r3, #16
 c100848:	e1a03823 	lsr	r3, r3, #16
 c10084c:	e1a03803 	lsl	r3, r3, #16
 c100850:	e1a02823 	lsr	r2, r3, #16
 c100854:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100858:	e1a03803 	lsl	r3, r3, #16
 c10085c:	e1a03823 	lsr	r3, r3, #16
 c100860:	e0823003 	add	r3, r2, r3
 c100864:	e1a03803 	lsl	r3, r3, #16
 c100868:	e1a03823 	lsr	r3, r3, #16
 c10086c:	e1a03803 	lsl	r3, r3, #16
 c100870:	e1a03823 	lsr	r3, r3, #16
 c100874:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
     	iis_putSample( ch0_aux, ch1_aux );
 c100878:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c10087c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100880:	e1a02802 	lsl	r2, r2, #16
 c100884:	e1a02842 	asr	r2, r2, #16
 c100888:	e1a03803 	lsl	r3, r3, #16
 c10088c:	e1a03843 	asr	r3, r3, #16
 c100890:	e1a00002 	mov	r0, r2
 c100894:	e1a01003 	mov	r1, r3
 c100898:	eb0001ed 	bl	c101054 <iis_putSample>
    	audiodelay_put( &delay_buffer, ch0, ch1 );
 c10089c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1008a0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c1008a4:	e1a02802 	lsl	r2, r2, #16
 c1008a8:	e1a02842 	asr	r2, r2, #16
 c1008ac:	e1a03803 	lsl	r3, r3, #16
 c1008b0:	e1a03843 	asr	r3, r3, #16
 c1008b4:	e59f0414 	ldr	r0, [pc, #1044]	; c100cd0 <main+0xcd0>
 c1008b8:	e1a01002 	mov	r1, r2
 c1008bc:	e1a02003 	mov	r2, r3
 c1008c0:	eb000137 	bl	c100da4 <audiodelay_put>

    /************************************/

    uart0_puts( "  - Echo (85 ms): hable y escuche... " );
    audiodelay_init( &delay_buffer, 1280 );
    while( !keypad_pressed() )
 c1008c4:	eb0003df 	bl	c101848 <keypad_pressed>
 c1008c8:	e1a03000 	mov	r3, r0
 c1008cc:	e3530000 	cmp	r3, #0
 c1008d0:	0affffbb 	beq	c1007c4 <main+0x7c4>
     	ch0_aux = ch0 + (ch0_aux >> 1);
     	ch1_aux = ch1 + (ch1_aux >> 1);
     	iis_putSample( ch0_aux, ch1_aux );
    	audiodelay_put( &delay_buffer, ch0, ch1 );
    }
    keypad_getchar();
 c1008d4:	eb000418 	bl	c10193c <keypad_getchar>
    uart0_puts( "OK\n" );
 c1008d8:	e59f03b0 	ldr	r0, [pc, #944]	; c100c90 <main+0xc90>
 c1008dc:	eb000b03 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Echo (150 ms): hable y escuche... " );
 c1008e0:	e59f03f4 	ldr	r0, [pc, #1012]	; c100cdc <main+0xcdc>
 c1008e4:	eb000b01 	bl	c1034f0 <uart0_puts>
    audiodelay_init( &delay_buffer, 2400 );
 c1008e8:	e59f03e0 	ldr	r0, [pc, #992]	; c100cd0 <main+0xcd0>
 c1008ec:	e3a01e96 	mov	r1, #2400	; 0x960
 c1008f0:	eb0000fc 	bl	c100ce8 <audiodelay_init>
    while( !keypad_pressed() )
 c1008f4:	ea00003f 	b	c1009f8 <main+0x9f8>
    {
     	iis_getSample( &ch0, &ch1 );
 c1008f8:	e24b2012 	sub	r2, fp, #18
 c1008fc:	e24b3014 	sub	r3, fp, #20
 c100900:	e1a00002 	mov	r0, r2
 c100904:	e1a01003 	mov	r1, r3
 c100908:	eb0001ea 	bl	c1010b8 <iis_getSample>
    	audiodelay_get( &delay_buffer, &ch0_aux, &ch1_aux );
 c10090c:	e24b2016 	sub	r2, fp, #22
 c100910:	e24b3018 	sub	r3, fp, #24
 c100914:	e59f03b4 	ldr	r0, [pc, #948]	; c100cd0 <main+0xcd0>
 c100918:	e1a01002 	mov	r1, r2
 c10091c:	e1a02003 	mov	r2, r3
 c100920:	eb000151 	bl	c100e6c <audiodelay_get>
     	ch0_aux = ch0 + (ch0_aux >> 1);
 c100924:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100928:	e1a03803 	lsl	r3, r3, #16
 c10092c:	e1a03843 	asr	r3, r3, #16
 c100930:	e1a030c3 	asr	r3, r3, #1
 c100934:	e1a03803 	lsl	r3, r3, #16
 c100938:	e1a03823 	lsr	r3, r3, #16
 c10093c:	e1a03803 	lsl	r3, r3, #16
 c100940:	e1a02823 	lsr	r2, r3, #16
 c100944:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c100948:	e1a03803 	lsl	r3, r3, #16
 c10094c:	e1a03823 	lsr	r3, r3, #16
 c100950:	e0823003 	add	r3, r2, r3
 c100954:	e1a03803 	lsl	r3, r3, #16
 c100958:	e1a03823 	lsr	r3, r3, #16
 c10095c:	e1a03803 	lsl	r3, r3, #16
 c100960:	e1a03823 	lsr	r3, r3, #16
 c100964:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
     	ch1_aux = ch1 + (ch1_aux >> 1);
 c100968:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10096c:	e1a03803 	lsl	r3, r3, #16
 c100970:	e1a03843 	asr	r3, r3, #16
 c100974:	e1a030c3 	asr	r3, r3, #1
 c100978:	e1a03803 	lsl	r3, r3, #16
 c10097c:	e1a03823 	lsr	r3, r3, #16
 c100980:	e1a03803 	lsl	r3, r3, #16
 c100984:	e1a02823 	lsr	r2, r3, #16
 c100988:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c10098c:	e1a03803 	lsl	r3, r3, #16
 c100990:	e1a03823 	lsr	r3, r3, #16
 c100994:	e0823003 	add	r3, r2, r3
 c100998:	e1a03803 	lsl	r3, r3, #16
 c10099c:	e1a03823 	lsr	r3, r3, #16
 c1009a0:	e1a03803 	lsl	r3, r3, #16
 c1009a4:	e1a03823 	lsr	r3, r3, #16
 c1009a8:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
     	iis_putSample( ch0_aux, ch1_aux );
 c1009ac:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c1009b0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1009b4:	e1a02802 	lsl	r2, r2, #16
 c1009b8:	e1a02842 	asr	r2, r2, #16
 c1009bc:	e1a03803 	lsl	r3, r3, #16
 c1009c0:	e1a03843 	asr	r3, r3, #16
 c1009c4:	e1a00002 	mov	r0, r2
 c1009c8:	e1a01003 	mov	r1, r3
 c1009cc:	eb0001a0 	bl	c101054 <iis_putSample>
    	audiodelay_put( &delay_buffer, ch0, ch1 );
 c1009d0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1009d4:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c1009d8:	e1a02802 	lsl	r2, r2, #16
 c1009dc:	e1a02842 	asr	r2, r2, #16
 c1009e0:	e1a03803 	lsl	r3, r3, #16
 c1009e4:	e1a03843 	asr	r3, r3, #16
 c1009e8:	e59f02e0 	ldr	r0, [pc, #736]	; c100cd0 <main+0xcd0>
 c1009ec:	e1a01002 	mov	r1, r2
 c1009f0:	e1a02003 	mov	r2, r3
 c1009f4:	eb0000ea 	bl	c100da4 <audiodelay_put>

    /************************************/

    uart0_puts( "  - Echo (150 ms): hable y escuche... " );
    audiodelay_init( &delay_buffer, 2400 );
    while( !keypad_pressed() )
 c1009f8:	eb000392 	bl	c101848 <keypad_pressed>
 c1009fc:	e1a03000 	mov	r3, r0
 c100a00:	e3530000 	cmp	r3, #0
 c100a04:	0affffbb 	beq	c1008f8 <main+0x8f8>
     	ch0_aux = ch0 + (ch0_aux >> 1);
     	ch1_aux = ch1 + (ch1_aux >> 1);
     	iis_putSample( ch0_aux, ch1_aux );
    	audiodelay_put( &delay_buffer, ch0, ch1 );
    }
    keypad_getchar();
 c100a08:	eb0003cb 	bl	c10193c <keypad_getchar>
    uart0_puts( "OK\n" );
 c100a0c:	e59f027c 	ldr	r0, [pc, #636]	; c100c90 <main+0xc90>
 c100a10:	eb000ab6 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Echo & fade (1 s): hable y escuche... " );
 c100a14:	e59f02c4 	ldr	r0, [pc, #708]	; c100ce0 <main+0xce0>
 c100a18:	eb000ab4 	bl	c1034f0 <uart0_puts>
    audiodelay_init( &delay_buffer, 16000 );
 c100a1c:	e59f02ac 	ldr	r0, [pc, #684]	; c100cd0 <main+0xcd0>
 c100a20:	e3a01dfa 	mov	r1, #16000	; 0x3e80
 c100a24:	eb0000af 	bl	c100ce8 <audiodelay_init>
    while( !keypad_pressed() )
 c100a28:	ea00003f 	b	c100b2c <main+0xb2c>
    {
     	iis_getSample( &ch0, &ch1 );
 c100a2c:	e24b2012 	sub	r2, fp, #18
 c100a30:	e24b3014 	sub	r3, fp, #20
 c100a34:	e1a00002 	mov	r0, r2
 c100a38:	e1a01003 	mov	r1, r3
 c100a3c:	eb00019d 	bl	c1010b8 <iis_getSample>
    	audiodelay_get( &delay_buffer, &ch0_aux, &ch1_aux );
 c100a40:	e24b2016 	sub	r2, fp, #22
 c100a44:	e24b3018 	sub	r3, fp, #24
 c100a48:	e59f0280 	ldr	r0, [pc, #640]	; c100cd0 <main+0xcd0>
 c100a4c:	e1a01002 	mov	r1, r2
 c100a50:	e1a02003 	mov	r2, r3
 c100a54:	eb000104 	bl	c100e6c <audiodelay_get>
      	ch0 = ch0 + (ch0_aux >> 1);
 c100a58:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100a5c:	e1a03803 	lsl	r3, r3, #16
 c100a60:	e1a03843 	asr	r3, r3, #16
 c100a64:	e1a030c3 	asr	r3, r3, #1
 c100a68:	e1a03803 	lsl	r3, r3, #16
 c100a6c:	e1a03823 	lsr	r3, r3, #16
 c100a70:	e1a03803 	lsl	r3, r3, #16
 c100a74:	e1a02823 	lsr	r2, r3, #16
 c100a78:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c100a7c:	e1a03803 	lsl	r3, r3, #16
 c100a80:	e1a03823 	lsr	r3, r3, #16
 c100a84:	e0823003 	add	r3, r2, r3
 c100a88:	e1a03803 	lsl	r3, r3, #16
 c100a8c:	e1a03823 	lsr	r3, r3, #16
 c100a90:	e1a03803 	lsl	r3, r3, #16
 c100a94:	e1a03823 	lsr	r3, r3, #16
 c100a98:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
      	ch1 = ch1 + (ch1_aux >> 1);
 c100a9c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100aa0:	e1a03803 	lsl	r3, r3, #16
 c100aa4:	e1a03843 	asr	r3, r3, #16
 c100aa8:	e1a030c3 	asr	r3, r3, #1
 c100aac:	e1a03803 	lsl	r3, r3, #16
 c100ab0:	e1a03823 	lsr	r3, r3, #16
 c100ab4:	e1a03803 	lsl	r3, r3, #16
 c100ab8:	e1a02823 	lsr	r2, r3, #16
 c100abc:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100ac0:	e1a03803 	lsl	r3, r3, #16
 c100ac4:	e1a03823 	lsr	r3, r3, #16
 c100ac8:	e0823003 	add	r3, r2, r3
 c100acc:	e1a03803 	lsl	r3, r3, #16
 c100ad0:	e1a03823 	lsr	r3, r3, #16
 c100ad4:	e1a03803 	lsl	r3, r3, #16
 c100ad8:	e1a03823 	lsr	r3, r3, #16
 c100adc:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
     	iis_putSample( ch0, ch1 );
 c100ae0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100ae4:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100ae8:	e1a02802 	lsl	r2, r2, #16
 c100aec:	e1a02842 	asr	r2, r2, #16
 c100af0:	e1a03803 	lsl	r3, r3, #16
 c100af4:	e1a03843 	asr	r3, r3, #16
 c100af8:	e1a00002 	mov	r0, r2
 c100afc:	e1a01003 	mov	r1, r3
 c100b00:	eb000153 	bl	c101054 <iis_putSample>
    	audiodelay_put( &delay_buffer, ch0, ch1 );
 c100b04:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100b08:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100b0c:	e1a02802 	lsl	r2, r2, #16
 c100b10:	e1a02842 	asr	r2, r2, #16
 c100b14:	e1a03803 	lsl	r3, r3, #16
 c100b18:	e1a03843 	asr	r3, r3, #16
 c100b1c:	e59f01ac 	ldr	r0, [pc, #428]	; c100cd0 <main+0xcd0>
 c100b20:	e1a01002 	mov	r1, r2
 c100b24:	e1a02003 	mov	r2, r3
 c100b28:	eb00009d 	bl	c100da4 <audiodelay_put>

    /************************************/

    uart0_puts( "  - Echo & fade (1 s): hable y escuche... " );
    audiodelay_init( &delay_buffer, 16000 );
    while( !keypad_pressed() )
 c100b2c:	eb000345 	bl	c101848 <keypad_pressed>
 c100b30:	e1a03000 	mov	r3, r0
 c100b34:	e3530000 	cmp	r3, #0
 c100b38:	0affffbb 	beq	c100a2c <main+0xa2c>
      	ch0 = ch0 + (ch0_aux >> 1);
      	ch1 = ch1 + (ch1_aux >> 1);
     	iis_putSample( ch0, ch1 );
    	audiodelay_put( &delay_buffer, ch0, ch1 );
    }
    keypad_getchar();
 c100b3c:	eb00037e 	bl	c10193c <keypad_getchar>
    uart0_puts( "OK\n" );
 c100b40:	e59f0148 	ldr	r0, [pc, #328]	; c100c90 <main+0xc90>
 c100b44:	eb000a69 	bl	c1034f0 <uart0_puts>

    /************************************/

    uart0_puts( "  - Reverberación (echo & fade 100 ms): hable y escuche... " );
 c100b48:	e59f0194 	ldr	r0, [pc, #404]	; c100ce4 <main+0xce4>
 c100b4c:	eb000a67 	bl	c1034f0 <uart0_puts>
    audiodelay_init( &delay_buffer, 1600 );
 c100b50:	e59f0178 	ldr	r0, [pc, #376]	; c100cd0 <main+0xcd0>
 c100b54:	e3a01d19 	mov	r1, #1600	; 0x640
 c100b58:	eb000062 	bl	c100ce8 <audiodelay_init>
    while( !keypad_pressed() )
 c100b5c:	ea00003f 	b	c100c60 <main+0xc60>
    {
     	iis_getSample( &ch0, &ch1 );
 c100b60:	e24b2012 	sub	r2, fp, #18
 c100b64:	e24b3014 	sub	r3, fp, #20
 c100b68:	e1a00002 	mov	r0, r2
 c100b6c:	e1a01003 	mov	r1, r3
 c100b70:	eb000150 	bl	c1010b8 <iis_getSample>
    	audiodelay_get( &delay_buffer, &ch0_aux, &ch1_aux );
 c100b74:	e24b2016 	sub	r2, fp, #22
 c100b78:	e24b3018 	sub	r3, fp, #24
 c100b7c:	e59f014c 	ldr	r0, [pc, #332]	; c100cd0 <main+0xcd0>
 c100b80:	e1a01002 	mov	r1, r2
 c100b84:	e1a02003 	mov	r2, r3
 c100b88:	eb0000b7 	bl	c100e6c <audiodelay_get>
      	ch0 = ch0 + (ch0_aux >> 1);
 c100b8c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100b90:	e1a03803 	lsl	r3, r3, #16
 c100b94:	e1a03843 	asr	r3, r3, #16
 c100b98:	e1a030c3 	asr	r3, r3, #1
 c100b9c:	e1a03803 	lsl	r3, r3, #16
 c100ba0:	e1a03823 	lsr	r3, r3, #16
 c100ba4:	e1a03803 	lsl	r3, r3, #16
 c100ba8:	e1a02823 	lsr	r2, r3, #16
 c100bac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c100bb0:	e1a03803 	lsl	r3, r3, #16
 c100bb4:	e1a03823 	lsr	r3, r3, #16
 c100bb8:	e0823003 	add	r3, r2, r3
 c100bbc:	e1a03803 	lsl	r3, r3, #16
 c100bc0:	e1a03823 	lsr	r3, r3, #16
 c100bc4:	e1a03803 	lsl	r3, r3, #16
 c100bc8:	e1a03823 	lsr	r3, r3, #16
 c100bcc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
      	ch1 = ch1 + (ch1_aux >> 1);
 c100bd0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100bd4:	e1a03803 	lsl	r3, r3, #16
 c100bd8:	e1a03843 	asr	r3, r3, #16
 c100bdc:	e1a030c3 	asr	r3, r3, #1
 c100be0:	e1a03803 	lsl	r3, r3, #16
 c100be4:	e1a03823 	lsr	r3, r3, #16
 c100be8:	e1a03803 	lsl	r3, r3, #16
 c100bec:	e1a02823 	lsr	r2, r3, #16
 c100bf0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100bf4:	e1a03803 	lsl	r3, r3, #16
 c100bf8:	e1a03823 	lsr	r3, r3, #16
 c100bfc:	e0823003 	add	r3, r2, r3
 c100c00:	e1a03803 	lsl	r3, r3, #16
 c100c04:	e1a03823 	lsr	r3, r3, #16
 c100c08:	e1a03803 	lsl	r3, r3, #16
 c100c0c:	e1a03823 	lsr	r3, r3, #16
 c100c10:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
     	iis_putSample( ch0, ch1 );
 c100c14:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100c18:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100c1c:	e1a02802 	lsl	r2, r2, #16
 c100c20:	e1a02842 	asr	r2, r2, #16
 c100c24:	e1a03803 	lsl	r3, r3, #16
 c100c28:	e1a03843 	asr	r3, r3, #16
 c100c2c:	e1a00002 	mov	r0, r2
 c100c30:	e1a01003 	mov	r1, r3
 c100c34:	eb000106 	bl	c101054 <iis_putSample>
    	audiodelay_put( &delay_buffer, ch0, ch1 );
 c100c38:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100c3c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c100c40:	e1a02802 	lsl	r2, r2, #16
 c100c44:	e1a02842 	asr	r2, r2, #16
 c100c48:	e1a03803 	lsl	r3, r3, #16
 c100c4c:	e1a03843 	asr	r3, r3, #16
 c100c50:	e59f0078 	ldr	r0, [pc, #120]	; c100cd0 <main+0xcd0>
 c100c54:	e1a01002 	mov	r1, r2
 c100c58:	e1a02003 	mov	r2, r3
 c100c5c:	eb000050 	bl	c100da4 <audiodelay_put>

    /************************************/

    uart0_puts( "  - Reverberación (echo & fade 100 ms): hable y escuche... " );
    audiodelay_init( &delay_buffer, 1600 );
    while( !keypad_pressed() )
 c100c60:	eb0002f8 	bl	c101848 <keypad_pressed>
 c100c64:	e1a03000 	mov	r3, r0
 c100c68:	e3530000 	cmp	r3, #0
 c100c6c:	0affffbb 	beq	c100b60 <main+0xb60>
      	ch0 = ch0 + (ch0_aux >> 1);
      	ch1 = ch1 + (ch1_aux >> 1);
     	iis_putSample( ch0, ch1 );
    	audiodelay_put( &delay_buffer, ch0, ch1 );
     }
    keypad_getchar();
 c100c70:	eb000331 	bl	c10193c <keypad_getchar>
    uart0_puts( "OK\n" );
 c100c74:	e59f0014 	ldr	r0, [pc, #20]	; c100c90 <main+0xc90>
 c100c78:	eb000a1c 	bl	c1034f0 <uart0_puts>

    /************************************/

    while(1);
 c100c7c:	eafffffe 	b	c100c7c <main+0xc7c>
 c100c80:	0c104b48 	.word	0x0c104b48
 c100c84:	0c104b80 	.word	0x0c104b80
 c100c88:	0c104bac 	.word	0x0c104bac
 c100c8c:	0c105628 	.word	0x0c105628
 c100c90:	0c104bc8 	.word	0x0c104bc8
 c100c94:	0c104bcc 	.word	0x0c104bcc
 c100c98:	0c1055e0 	.word	0x0c1055e0
 c100c9c:	0c104bec 	.word	0x0c104bec
 c100ca0:	0c105598 	.word	0x0c105598
 c100ca4:	0c104c10 	.word	0x0c104c10
 c100ca8:	0c104c38 	.word	0x0c104c38
 c100cac:	0c105680 	.word	0x0c105680
 c100cb0:	0c153880 	.word	0x0c153880
 c100cb4:	000270ff 	.word	0x000270ff
 c100cb8:	0c104c7c 	.word	0x0c104c7c
 c100cbc:	0c104cb0 	.word	0x0c104cb0
 c100cc0:	0c104ce0 	.word	0x0c104ce0
 c100cc4:	0c104d10 	.word	0x0c104d10
 c100cc8:	0c104d38 	.word	0x0c104d38
 c100ccc:	0c104d5c 	.word	0x0c104d5c
 c100cd0:	0c1a1a80 	.word	0x0c1a1a80
 c100cd4:	0c104d84 	.word	0x0c104d84
 c100cd8:	0c104dac 	.word	0x0c104dac
 c100cdc:	0c104dd4 	.word	0x0c104dd4
 c100ce0:	0c104dfc 	.word	0x0c104dfc
 c100ce4:	0c104e28 	.word	0x0c104e28

0c100ce8 <audiodelay_init>:

}

void audiodelay_init( audiodelay_t *buffer, uint16 size )
{
 c100ce8:	e1a0c00d 	mov	ip, sp
 c100cec:	e92dd800 	push	{fp, ip, lr, pc}
 c100cf0:	e24cb004 	sub	fp, ip, #4
 c100cf4:	e24dd010 	sub	sp, sp, #16
 c100cf8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c100cfc:	e1a03001 	mov	r3, r1
 c100d00:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
	uint16 i;

	for( i=0; i<size; i++ )
 c100d04:	e3a03000 	mov	r3, #0
 c100d08:	e14b30be 	strh	r3, [fp, #-14]
 c100d0c:	ea00000f 	b	c100d50 <audiodelay_init+0x68>
	{
		buffer->ch0[i] = 0;
 c100d10:	e15b30be 	ldrh	r3, [fp, #-14]
 c100d14:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100d18:	e1a03083 	lsl	r3, r3, #1
 c100d1c:	e0823003 	add	r3, r2, r3
 c100d20:	e3a02000 	mov	r2, #0
 c100d24:	e1c320b0 	strh	r2, [r3]
		buffer->ch1[i] = 0;
 c100d28:	e15b30be 	ldrh	r3, [fp, #-14]
 c100d2c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100d30:	e2833c7d 	add	r3, r3, #32000	; 0x7d00
 c100d34:	e1a03083 	lsl	r3, r3, #1
 c100d38:	e0823003 	add	r3, r2, r3
 c100d3c:	e3a02000 	mov	r2, #0
 c100d40:	e1c320b0 	strh	r2, [r3]

void audiodelay_init( audiodelay_t *buffer, uint16 size )
{
	uint16 i;

	for( i=0; i<size; i++ )
 c100d44:	e15b30be 	ldrh	r3, [fp, #-14]
 c100d48:	e2833001 	add	r3, r3, #1
 c100d4c:	e14b30be 	strh	r3, [fp, #-14]
 c100d50:	e15b20be 	ldrh	r2, [fp, #-14]
 c100d54:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c100d58:	e1520003 	cmp	r2, r3
 c100d5c:	3affffeb 	bcc	c100d10 <audiodelay_init+0x28>
	{
		buffer->ch0[i] = 0;
		buffer->ch1[i] = 0;
	}
	buffer->head = 0;
 c100d60:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100d64:	e59f3030 	ldr	r3, [pc, #48]	; c100d9c <audiodelay_init+0xb4>
 c100d68:	e3a01000 	mov	r1, #0
 c100d6c:	e18210b3 	strh	r1, [r2, r3]
	buffer->tail = 0;
 c100d70:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100d74:	e59f3024 	ldr	r3, [pc, #36]	; c100da0 <audiodelay_init+0xb8>
 c100d78:	e3a01000 	mov	r1, #0
 c100d7c:	e18210b3 	strh	r1, [r2, r3]
	buffer->size = size;
 c100d80:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100d84:	e3a03b7d 	mov	r3, #128000	; 0x1f400
 c100d88:	e15b11ba 	ldrh	r1, [fp, #-26]	; 0xffffffe6
 c100d8c:	e18210b3 	strh	r1, [r2, r3]
}
 c100d90:	e24bd00c 	sub	sp, fp, #12
 c100d94:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d98:	e12fff1e 	bx	lr
 c100d9c:	0001f402 	.word	0x0001f402
 c100da0:	0001f404 	.word	0x0001f404

0c100da4 <audiodelay_put>:

void audiodelay_put( audiodelay_t *buffer, int16 ch0, int16 ch1 )
{
 c100da4:	e1a0c00d 	mov	ip, sp
 c100da8:	e92dd800 	push	{fp, ip, lr, pc}
 c100dac:	e24cb004 	sub	fp, ip, #4
 c100db0:	e24dd008 	sub	sp, sp, #8
 c100db4:	e50b0010 	str	r0, [fp, #-16]
 c100db8:	e1a03002 	mov	r3, r2
 c100dbc:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c100dc0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
	buffer->ch0[buffer->head] = ch0;
 c100dc4:	e51b2010 	ldr	r2, [fp, #-16]
 c100dc8:	e59f3098 	ldr	r3, [pc, #152]	; c100e68 <audiodelay_put+0xc4>
 c100dcc:	e19230b3 	ldrh	r3, [r2, r3]
 c100dd0:	e51b2010 	ldr	r2, [fp, #-16]
 c100dd4:	e1a03083 	lsl	r3, r3, #1
 c100dd8:	e0823003 	add	r3, r2, r3
 c100ddc:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100de0:	e1c320b0 	strh	r2, [r3]
	buffer->ch1[buffer->head] = ch1;
 c100de4:	e51b2010 	ldr	r2, [fp, #-16]
 c100de8:	e59f3078 	ldr	r3, [pc, #120]	; c100e68 <audiodelay_put+0xc4>
 c100dec:	e19230b3 	ldrh	r3, [r2, r3]
 c100df0:	e51b2010 	ldr	r2, [fp, #-16]
 c100df4:	e2833c7d 	add	r3, r3, #32000	; 0x7d00
 c100df8:	e1a03083 	lsl	r3, r3, #1
 c100dfc:	e0823003 	add	r3, r2, r3
 c100e00:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c100e04:	e1c320b0 	strh	r2, [r3]
	if( ++(buffer->head) == buffer->size )
 c100e08:	e51b2010 	ldr	r2, [fp, #-16]
 c100e0c:	e59f3054 	ldr	r3, [pc, #84]	; c100e68 <audiodelay_put+0xc4>
 c100e10:	e19230b3 	ldrh	r3, [r2, r3]
 c100e14:	e2833001 	add	r3, r3, #1
 c100e18:	e1a03803 	lsl	r3, r3, #16
 c100e1c:	e1a01823 	lsr	r1, r3, #16
 c100e20:	e51b2010 	ldr	r2, [fp, #-16]
 c100e24:	e59f303c 	ldr	r3, [pc, #60]	; c100e68 <audiodelay_put+0xc4>
 c100e28:	e18210b3 	strh	r1, [r2, r3]
 c100e2c:	e51b2010 	ldr	r2, [fp, #-16]
 c100e30:	e59f3030 	ldr	r3, [pc, #48]	; c100e68 <audiodelay_put+0xc4>
 c100e34:	e19220b3 	ldrh	r2, [r2, r3]
 c100e38:	e51b1010 	ldr	r1, [fp, #-16]
 c100e3c:	e3a03b7d 	mov	r3, #128000	; 0x1f400
 c100e40:	e19130b3 	ldrh	r3, [r1, r3]
 c100e44:	e1520003 	cmp	r2, r3
 c100e48:	1a000003 	bne	c100e5c <audiodelay_put+0xb8>
		buffer->head = 0;
 c100e4c:	e51b2010 	ldr	r2, [fp, #-16]
 c100e50:	e59f3010 	ldr	r3, [pc, #16]	; c100e68 <audiodelay_put+0xc4>
 c100e54:	e3a01000 	mov	r1, #0
 c100e58:	e18210b3 	strh	r1, [r2, r3]
}
 c100e5c:	e24bd00c 	sub	sp, fp, #12
 c100e60:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e64:	e12fff1e 	bx	lr
 c100e68:	0001f402 	.word	0x0001f402

0c100e6c <audiodelay_get>:

void audiodelay_get( audiodelay_t *buffer, int16 *ch0, int16 *ch1 )
{
 c100e6c:	e1a0c00d 	mov	ip, sp
 c100e70:	e92dd800 	push	{fp, ip, lr, pc}
 c100e74:	e24cb004 	sub	fp, ip, #4
 c100e78:	e24dd010 	sub	sp, sp, #16
 c100e7c:	e50b0010 	str	r0, [fp, #-16]
 c100e80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 c100e84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	*ch0 = buffer->ch0[buffer->tail];
 c100e88:	e51b2010 	ldr	r2, [fp, #-16]
 c100e8c:	e59f30a0 	ldr	r3, [pc, #160]	; c100f34 <audiodelay_get+0xc8>
 c100e90:	e19230b3 	ldrh	r3, [r2, r3]
 c100e94:	e51b2010 	ldr	r2, [fp, #-16]
 c100e98:	e1a03083 	lsl	r3, r3, #1
 c100e9c:	e0823003 	add	r3, r2, r3
 c100ea0:	e1d320b0 	ldrh	r2, [r3]
 c100ea4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100ea8:	e1c320b0 	strh	r2, [r3]
	*ch1 = buffer->ch1[buffer->tail];
 c100eac:	e51b2010 	ldr	r2, [fp, #-16]
 c100eb0:	e59f307c 	ldr	r3, [pc, #124]	; c100f34 <audiodelay_get+0xc8>
 c100eb4:	e19230b3 	ldrh	r3, [r2, r3]
 c100eb8:	e51b2010 	ldr	r2, [fp, #-16]
 c100ebc:	e2833c7d 	add	r3, r3, #32000	; 0x7d00
 c100ec0:	e1a03083 	lsl	r3, r3, #1
 c100ec4:	e0823003 	add	r3, r2, r3
 c100ec8:	e1d320b0 	ldrh	r2, [r3]
 c100ecc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100ed0:	e1c320b0 	strh	r2, [r3]
	if( ++(buffer->tail) == buffer->size )
 c100ed4:	e51b2010 	ldr	r2, [fp, #-16]
 c100ed8:	e59f3054 	ldr	r3, [pc, #84]	; c100f34 <audiodelay_get+0xc8>
 c100edc:	e19230b3 	ldrh	r3, [r2, r3]
 c100ee0:	e2833001 	add	r3, r3, #1
 c100ee4:	e1a03803 	lsl	r3, r3, #16
 c100ee8:	e1a01823 	lsr	r1, r3, #16
 c100eec:	e51b2010 	ldr	r2, [fp, #-16]
 c100ef0:	e59f303c 	ldr	r3, [pc, #60]	; c100f34 <audiodelay_get+0xc8>
 c100ef4:	e18210b3 	strh	r1, [r2, r3]
 c100ef8:	e51b2010 	ldr	r2, [fp, #-16]
 c100efc:	e59f3030 	ldr	r3, [pc, #48]	; c100f34 <audiodelay_get+0xc8>
 c100f00:	e19220b3 	ldrh	r2, [r2, r3]
 c100f04:	e51b1010 	ldr	r1, [fp, #-16]
 c100f08:	e3a03b7d 	mov	r3, #128000	; 0x1f400
 c100f0c:	e19130b3 	ldrh	r3, [r1, r3]
 c100f10:	e1520003 	cmp	r2, r3
 c100f14:	1a000003 	bne	c100f28 <audiodelay_get+0xbc>
		buffer->tail = 0;
 c100f18:	e51b2010 	ldr	r2, [fp, #-16]
 c100f1c:	e59f3010 	ldr	r3, [pc, #16]	; c100f34 <audiodelay_get+0xc8>
 c100f20:	e3a01000 	mov	r1, #0
 c100f24:	e18210b3 	strh	r1, [r2, r3]
}
 c100f28:	e24bd00c 	sub	sp, fp, #12
 c100f2c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100f30:	e12fff1e 	bx	lr
 c100f34:	0001f404 	.word	0x0001f404

0c100f38 <iis_init>:
static void isr_bdma0( void ) __attribute__ ((interrupt ("IRQ")));

static uint8 iomode;

void iis_init( uint8 mode )
{
 c100f38:	e1a0c00d 	mov	ip, sp
 c100f3c:	e92dd800 	push	{fp, ip, lr, pc}
 c100f40:	e24cb004 	sub	fp, ip, #4
 c100f44:	e24dd008 	sub	sp, sp, #8
 c100f48:	e1a03000 	mov	r3, r0
 c100f4c:	e54b300d 	strb	r3, [fp, #-13]
    iomode = mode;
 c100f50:	e59f309c 	ldr	r3, [pc, #156]	; c100ff4 <iis_init+0xbc>
 c100f54:	e55b200d 	ldrb	r2, [fp, #-13]
 c100f58:	e5c32000 	strb	r2, [r3]

    if( iomode == IIS_POLLING )
 c100f5c:	e59f3090 	ldr	r3, [pc, #144]	; c100ff4 <iis_init+0xbc>
 c100f60:	e5d33000 	ldrb	r3, [r3]
 c100f64:	e3530002 	cmp	r3, #2
 c100f68:	1a00000b 	bne	c100f9c <iis_init+0x64>
    {
        IISPSR  = 0x77;
 c100f6c:	e59f3084 	ldr	r3, [pc, #132]	; c100ff8 <iis_init+0xc0>
 c100f70:	e3a02077 	mov	r2, #119	; 0x77
 c100f74:	e5832000 	str	r2, [r3]
        IISMOD  = 0xc9;
 c100f78:	e59f307c 	ldr	r3, [pc, #124]	; c100ffc <iis_init+0xc4>
 c100f7c:	e3a020c9 	mov	r2, #201	; 0xc9
 c100f80:	e5832000 	str	r2, [r3]
        IISFCON = 0x300;
 c100f84:	e59f3074 	ldr	r3, [pc, #116]	; c101000 <iis_init+0xc8>
 c100f88:	e3a02c03 	mov	r2, #768	; 0x300
 c100f8c:	e5832000 	str	r2, [r3]
        IISCON  = 0x3;
 c100f90:	e59f306c 	ldr	r3, [pc, #108]	; c101004 <iis_init+0xcc>
 c100f94:	e3a02003 	mov	r2, #3
 c100f98:	e5832000 	str	r2, [r3]
    }
    if( iomode == IIS_DMA )
 c100f9c:	e59f3050 	ldr	r3, [pc, #80]	; c100ff4 <iis_init+0xbc>
 c100fa0:	e5d33000 	ldrb	r3, [r3]
 c100fa4:	e3530001 	cmp	r3, #1
 c100fa8:	1a00000e 	bne	c100fe8 <iis_init+0xb0>
    {
        IISPSR  = 0x77;
 c100fac:	e59f3044 	ldr	r3, [pc, #68]	; c100ff8 <iis_init+0xc0>
 c100fb0:	e3a02077 	mov	r2, #119	; 0x77
 c100fb4:	e5832000 	str	r2, [r3]
        IISMOD  = 0x9;
 c100fb8:	e59f303c 	ldr	r3, [pc, #60]	; c100ffc <iis_init+0xc4>
 c100fbc:	e3a02009 	mov	r2, #9
 c100fc0:	e5832000 	str	r2, [r3]
        IISFCON = 0xf00;
 c100fc4:	e59f3034 	ldr	r3, [pc, #52]	; c101000 <iis_init+0xc8>
 c100fc8:	e3a02c0f 	mov	r2, #3840	; 0xf00
 c100fcc:	e5832000 	str	r2, [r3]
        IISCON  = 0x32;
 c100fd0:	e59f302c 	ldr	r3, [pc, #44]	; c101004 <iis_init+0xcc>
 c100fd4:	e3a02032 	mov	r2, #50	; 0x32
 c100fd8:	e5832000 	str	r2, [r3]
        bdma0_init();
 c100fdc:	eb000b19 	bl	c103c48 <bdma0_init>
        bdma0_open( isr_bdma0 );
 c100fe0:	e59f0020 	ldr	r0, [pc, #32]	; c101008 <iis_init+0xd0>
 c100fe4:	eb000b2c 	bl	c103c9c <bdma0_open>
    }
}
 c100fe8:	e24bd00c 	sub	sp, fp, #12
 c100fec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ff0:	e12fff1e 	bx	lr
 c100ff4:	0c105670 	.word	0x0c105670
 c100ff8:	01d18008 	.word	0x01d18008
 c100ffc:	01d18004 	.word	0x01d18004
 c101000:	01d1800c 	.word	0x01d1800c
 c101004:	01d18000 	.word	0x01d18000
 c101008:	0c10100c 	.word	0x0c10100c

0c10100c <isr_bdma0>:

static void isr_bdma0( void )
{
 c10100c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101010:	e1a0c00d 	mov	ip, sp
 c101014:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c101018:	e24cb004 	sub	fp, ip, #4
    IISCON &= ~1;
 c10101c:	e59f3028 	ldr	r3, [pc, #40]	; c10104c <isr_bdma0+0x40>
 c101020:	e59f2024 	ldr	r2, [pc, #36]	; c10104c <isr_bdma0+0x40>
 c101024:	e5922000 	ldr	r2, [r2]
 c101028:	e3c22001 	bic	r2, r2, #1
 c10102c:	e5832000 	str	r2, [r3]
    I_ISPC = BIT_BDMA0; 
 c101030:	e59f3018 	ldr	r3, [pc, #24]	; c101050 <isr_bdma0+0x44>
 c101034:	e3a02802 	mov	r2, #131072	; 0x20000
 c101038:	e5832000 	str	r2, [r3]
}
 c10103c:	e24bd014 	sub	sp, fp, #20
 c101040:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c101044:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c101048:	e25ef004 	subs	pc, lr, #4
 c10104c:	01d18000 	.word	0x01d18000
 c101050:	01e00024 	.word	0x01e00024

0c101054 <iis_putSample>:

inline void iis_putSample( int16 ch0, int16 ch1 )
{
 c101054:	e1a0c00d 	mov	ip, sp
 c101058:	e92dd800 	push	{fp, ip, lr, pc}
 c10105c:	e24cb004 	sub	fp, ip, #4
 c101060:	e24dd008 	sub	sp, sp, #8
 c101064:	e1a02000 	mov	r2, r0
 c101068:	e1a03001 	mov	r3, r1
 c10106c:	e14b20be 	strh	r2, [fp, #-14]
 c101070:	e14b31b0 	strh	r3, [fp, #-16]
    while( (IISFCON & 0xf0) > 6 );
 c101074:	e1a00000 	nop			; (mov r0, r0)
 c101078:	e59f3030 	ldr	r3, [pc, #48]	; c1010b0 <iis_putSample+0x5c>
 c10107c:	e5933000 	ldr	r3, [r3]
 c101080:	e20330f0 	and	r3, r3, #240	; 0xf0
 c101084:	e3530006 	cmp	r3, #6
 c101088:	8afffffa 	bhi	c101078 <iis_putSample+0x24>
    IISFIF = ch0;
 c10108c:	e59f3020 	ldr	r3, [pc, #32]	; c1010b4 <iis_putSample+0x60>
 c101090:	e15b20fe 	ldrsh	r2, [fp, #-14]
 c101094:	e5832000 	str	r2, [r3]
    IISFIF = ch1;
 c101098:	e59f3014 	ldr	r3, [pc, #20]	; c1010b4 <iis_putSample+0x60>
 c10109c:	e15b21f0 	ldrsh	r2, [fp, #-16]
 c1010a0:	e5832000 	str	r2, [r3]
}
 c1010a4:	e24bd00c 	sub	sp, fp, #12
 c1010a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1010ac:	e12fff1e 	bx	lr
 c1010b0:	01d1800c 	.word	0x01d1800c
 c1010b4:	01d18010 	.word	0x01d18010

0c1010b8 <iis_getSample>:

inline void iis_getSample( int16 *ch0, int16 *ch1 )
{
 c1010b8:	e1a0c00d 	mov	ip, sp
 c1010bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1010c0:	e24cb004 	sub	fp, ip, #4
 c1010c4:	e24dd008 	sub	sp, sp, #8
 c1010c8:	e50b0010 	str	r0, [fp, #-16]
 c1010cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    while( (IISFCON & 0xf) < 2);
 c1010d0:	e1a00000 	nop			; (mov r0, r0)
 c1010d4:	e59f3048 	ldr	r3, [pc, #72]	; c101124 <iis_getSample+0x6c>
 c1010d8:	e5933000 	ldr	r3, [r3]
 c1010dc:	e203300f 	and	r3, r3, #15
 c1010e0:	e3530001 	cmp	r3, #1
 c1010e4:	9afffffa 	bls	c1010d4 <iis_getSample+0x1c>
    *ch0 = IISFIF;
 c1010e8:	e59f3038 	ldr	r3, [pc, #56]	; c101128 <iis_getSample+0x70>
 c1010ec:	e5933000 	ldr	r3, [r3]
 c1010f0:	e1a03803 	lsl	r3, r3, #16
 c1010f4:	e1a02823 	lsr	r2, r3, #16
 c1010f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1010fc:	e1c320b0 	strh	r2, [r3]
    *ch1 = IISFIF;
 c101100:	e59f3020 	ldr	r3, [pc, #32]	; c101128 <iis_getSample+0x70>
 c101104:	e5933000 	ldr	r3, [r3]
 c101108:	e1a03803 	lsl	r3, r3, #16
 c10110c:	e1a02823 	lsr	r2, r3, #16
 c101110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101114:	e1c320b0 	strh	r2, [r3]
}
 c101118:	e24bd00c 	sub	sp, fp, #12
 c10111c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101120:	e12fff1e 	bx	lr
 c101124:	01d1800c 	.word	0x01d1800c
 c101128:	01d18010 	.word	0x01d18010

0c10112c <iis_play>:

void iis_play( int16 *buffer, uint32 length, uint8 loop )
{
 c10112c:	e1a0c00d 	mov	ip, sp
 c101130:	e92dd800 	push	{fp, ip, lr, pc}
 c101134:	e24cb004 	sub	fp, ip, #4
 c101138:	e24dd018 	sub	sp, sp, #24
 c10113c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c101140:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c101144:	e1a03002 	mov	r3, r2
 c101148:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING ) {
 c10114c:	e59f319c 	ldr	r3, [pc, #412]	; c1012f0 <iis_play+0x1c4>
 c101150:	e5d33000 	ldrb	r3, [r3]
 c101154:	e3530002 	cmp	r3, #2
 c101158:	1a00001e 	bne	c1011d8 <iis_play+0xac>
        for( i=0; i<length/2; ) {
 c10115c:	e3a03000 	mov	r3, #0
 c101160:	e50b3010 	str	r3, [fp, #-16]
 c101164:	ea000016 	b	c1011c4 <iis_play+0x98>
            ch1 = buffer[i++];
 c101168:	e51b3010 	ldr	r3, [fp, #-16]
 c10116c:	e1a03083 	lsl	r3, r3, #1
 c101170:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101174:	e0823003 	add	r3, r2, r3
 c101178:	e1d330b0 	ldrh	r3, [r3]
 c10117c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c101180:	e51b3010 	ldr	r3, [fp, #-16]
 c101184:	e2833001 	add	r3, r3, #1
 c101188:	e50b3010 	str	r3, [fp, #-16]
            ch2 = buffer[i++];
 c10118c:	e51b3010 	ldr	r3, [fp, #-16]
 c101190:	e1a03083 	lsl	r3, r3, #1
 c101194:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101198:	e0823003 	add	r3, r2, r3
 c10119c:	e1d330b0 	ldrh	r3, [r3]
 c1011a0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
 c1011a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1011a8:	e2833001 	add	r3, r3, #1
 c1011ac:	e50b3010 	str	r3, [fp, #-16]
            iis_putSample( ch1, ch2 );
 c1011b0:	e15b21f2 	ldrsh	r2, [fp, #-18]	; 0xffffffee
 c1011b4:	e15b31f4 	ldrsh	r3, [fp, #-20]	; 0xffffffec
 c1011b8:	e1a00002 	mov	r0, r2
 c1011bc:	e1a01003 	mov	r1, r3
 c1011c0:	ebffffa3 	bl	c101054 <iis_putSample>
{
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING ) {
        for( i=0; i<length/2; ) {
 c1011c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1011c8:	e1a020a3 	lsr	r2, r3, #1
 c1011cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1011d0:	e1520003 	cmp	r2, r3
 c1011d4:	8affffe3 	bhi	c101168 <iis_play+0x3c>
            ch1 = buffer[i++];
            ch2 = buffer[i++];
            iis_putSample( ch1, ch2 );
        }
    }
    if( iomode == IIS_DMA ) {
 c1011d8:	e59f3110 	ldr	r3, [pc, #272]	; c1012f0 <iis_play+0x1c4>
 c1011dc:	e5d33000 	ldrb	r3, [r3]
 c1011e0:	e3530001 	cmp	r3, #1
 c1011e4:	1a00003e 	bne	c1012e4 <iis_play+0x1b8>
    	while( IISCON & 1  );
 c1011e8:	e1a00000 	nop			; (mov r0, r0)
 c1011ec:	e59f3100 	ldr	r3, [pc, #256]	; c1012f4 <iis_play+0x1c8>
 c1011f0:	e5933000 	ldr	r3, [r3]
 c1011f4:	e2033001 	and	r3, r3, #1
 c1011f8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1011fc:	e3530000 	cmp	r3, #0
 c101200:	1afffff9 	bne	c1011ec <iis_play+0xc0>
		BDISRC0  = (1 << 30) | (1 << 28) | (uint32) buffer;
 c101204:	e59f30ec 	ldr	r3, [pc, #236]	; c1012f8 <iis_play+0x1cc>
 c101208:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10120c:	e3822205 	orr	r2, r2, #1342177280	; 0x50000000
 c101210:	e5832000 	str	r2, [r3]
		BDIDES0  = (1 << 30) | (3 << 28) | (uint32) &IISFIF;
 c101214:	e59f30e0 	ldr	r3, [pc, #224]	; c1012fc <iis_play+0x1d0>
 c101218:	e59f20e0 	ldr	r2, [pc, #224]	; c101300 <iis_play+0x1d4>
 c10121c:	e5832000 	str	r2, [r3]
		BDCON0   = 0;
 c101220:	e3a0377e 	mov	r3, #33030144	; 0x1f80000
 c101224:	e3a02000 	mov	r2, #0
 c101228:	e5832000 	str	r2, [r3]
		BDICNT0  = (1 << 30) | (1 << 26) | (0xfffff & length);
 c10122c:	e59f20d0 	ldr	r2, [pc, #208]	; c101304 <iis_play+0x1d8>
 c101230:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c101234:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c101238:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
 c10123c:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 c101240:	e5823000 	str	r3, [r2]
		BDICNT0 |= (1 << 20);
 c101244:	e59f30b8 	ldr	r3, [pc, #184]	; c101304 <iis_play+0x1d8>
 c101248:	e59f20b4 	ldr	r2, [pc, #180]	; c101304 <iis_play+0x1d8>
 c10124c:	e5922000 	ldr	r2, [r2]
 c101250:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c101254:	e5832000 	str	r2, [r3]
		if (loop){
 c101258:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10125c:	e3530000 	cmp	r3, #0
 c101260:	0a00000a 	beq	c101290 <iis_play+0x164>
			BDICNT0 |= (1 << 21);
 c101264:	e59f3098 	ldr	r3, [pc, #152]	; c101304 <iis_play+0x1d8>
 c101268:	e59f2094 	ldr	r2, [pc, #148]	; c101304 <iis_play+0x1d8>
 c10126c:	e5922000 	ldr	r2, [r2]
 c101270:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 c101274:	e5832000 	str	r2, [r3]
			BDICNT0 &= ~(3 << 22);
 c101278:	e59f3084 	ldr	r3, [pc, #132]	; c101304 <iis_play+0x1d8>
 c10127c:	e59f2080 	ldr	r2, [pc, #128]	; c101304 <iis_play+0x1d8>
 c101280:	e5922000 	ldr	r2, [r2]
 c101284:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
 c101288:	e5832000 	str	r2, [r3]
 c10128c:	ea000009 	b	c1012b8 <iis_play+0x18c>
		}
		else{
			BDICNT0 &= ~(1 << 21);
 c101290:	e59f306c 	ldr	r3, [pc, #108]	; c101304 <iis_play+0x1d8>
 c101294:	e59f2068 	ldr	r2, [pc, #104]	; c101304 <iis_play+0x1d8>
 c101298:	e5922000 	ldr	r2, [r2]
 c10129c:	e3c22602 	bic	r2, r2, #2097152	; 0x200000
 c1012a0:	e5832000 	str	r2, [r3]
			BDICNT0 |= (3 << 22);
 c1012a4:	e59f3058 	ldr	r3, [pc, #88]	; c101304 <iis_play+0x1d8>
 c1012a8:	e59f2054 	ldr	r2, [pc, #84]	; c101304 <iis_play+0x1d8>
 c1012ac:	e5922000 	ldr	r2, [r2]
 c1012b0:	e3822503 	orr	r2, r2, #12582912	; 0xc00000
 c1012b4:	e5832000 	str	r2, [r3]
		}


		IISMOD = (IISMOD & ~(3 << 6)) | (2 << 6);
 c1012b8:	e59f3048 	ldr	r3, [pc, #72]	; c101308 <iis_play+0x1dc>
 c1012bc:	e59f2044 	ldr	r2, [pc, #68]	; c101308 <iis_play+0x1dc>
 c1012c0:	e5922000 	ldr	r2, [r2]
 c1012c4:	e3c220c0 	bic	r2, r2, #192	; 0xc0
 c1012c8:	e3822080 	orr	r2, r2, #128	; 0x80
 c1012cc:	e5832000 	str	r2, [r3]

		IISCON |= 1 << 0;
 c1012d0:	e59f301c 	ldr	r3, [pc, #28]	; c1012f4 <iis_play+0x1c8>
 c1012d4:	e59f2018 	ldr	r2, [pc, #24]	; c1012f4 <iis_play+0x1c8>
 c1012d8:	e5922000 	ldr	r2, [r2]
 c1012dc:	e3822001 	orr	r2, r2, #1
 c1012e0:	e5832000 	str	r2, [r3]
    }
}
 c1012e4:	e24bd00c 	sub	sp, fp, #12
 c1012e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1012ec:	e12fff1e 	bx	lr
 c1012f0:	0c105670 	.word	0x0c105670
 c1012f4:	01d18000 	.word	0x01d18000
 c1012f8:	01f80004 	.word	0x01f80004
 c1012fc:	01f80008 	.word	0x01f80008
 c101300:	71d18010 	.word	0x71d18010
 c101304:	01f8000c 	.word	0x01f8000c
 c101308:	01d18004 	.word	0x01d18004

0c10130c <iis_rec>:

void iis_rec( int16 *buffer, uint32 length )
{
 c10130c:	e1a0c00d 	mov	ip, sp
 c101310:	e92dd800 	push	{fp, ip, lr, pc}
 c101314:	e24cb004 	sub	fp, ip, #4
 c101318:	e24dd010 	sub	sp, sp, #16
 c10131c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c101320:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING )
 c101324:	e59f3140 	ldr	r3, [pc, #320]	; c10146c <iis_rec+0x160>
 c101328:	e5d33000 	ldrb	r3, [r3]
 c10132c:	e3530002 	cmp	r3, #2
 c101330:	1a00001e 	bne	c1013b0 <iis_rec+0xa4>
        for( i = 0; i < length/2; ) {
 c101334:	e3a03000 	mov	r3, #0
 c101338:	e50b3010 	str	r3, [fp, #-16]
 c10133c:	ea000016 	b	c10139c <iis_rec+0x90>
        	iis_getSample(&ch1, &ch2);
 c101340:	e24b2012 	sub	r2, fp, #18
 c101344:	e24b3014 	sub	r3, fp, #20
 c101348:	e1a00002 	mov	r0, r2
 c10134c:	e1a01003 	mov	r1, r3
 c101350:	ebffff58 	bl	c1010b8 <iis_getSample>
        	buffer[i++] = ch1;
 c101354:	e51b3010 	ldr	r3, [fp, #-16]
 c101358:	e1a03083 	lsl	r3, r3, #1
 c10135c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101360:	e0823003 	add	r3, r2, r3
 c101364:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c101368:	e1c320b0 	strh	r2, [r3]
 c10136c:	e51b3010 	ldr	r3, [fp, #-16]
 c101370:	e2833001 	add	r3, r3, #1
 c101374:	e50b3010 	str	r3, [fp, #-16]
        	buffer[i++] = ch2;
 c101378:	e51b3010 	ldr	r3, [fp, #-16]
 c10137c:	e1a03083 	lsl	r3, r3, #1
 c101380:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101384:	e0823003 	add	r3, r2, r3
 c101388:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c10138c:	e1c320b0 	strh	r2, [r3]
 c101390:	e51b3010 	ldr	r3, [fp, #-16]
 c101394:	e2833001 	add	r3, r3, #1
 c101398:	e50b3010 	str	r3, [fp, #-16]
{
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING )
        for( i = 0; i < length/2; ) {
 c10139c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1013a0:	e1a020a3 	lsr	r2, r3, #1
 c1013a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1013a8:	e1520003 	cmp	r2, r3
 c1013ac:	8affffe3 	bhi	c101340 <iis_rec+0x34>
        	iis_getSample(&ch1, &ch2);
        	buffer[i++] = ch1;
        	buffer[i++] = ch2;
        }
    if( iomode == IIS_DMA )
 c1013b0:	e59f30b4 	ldr	r3, [pc, #180]	; c10146c <iis_rec+0x160>
 c1013b4:	e5d33000 	ldrb	r3, [r3]
 c1013b8:	e3530001 	cmp	r3, #1
 c1013bc:	1a000027 	bne	c101460 <iis_rec+0x154>
    {
        while( IISCON & 1  );
 c1013c0:	e1a00000 	nop			; (mov r0, r0)
 c1013c4:	e59f30a4 	ldr	r3, [pc, #164]	; c101470 <iis_rec+0x164>
 c1013c8:	e5933000 	ldr	r3, [r3]
 c1013cc:	e2033001 	and	r3, r3, #1
 c1013d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1013d4:	e3530000 	cmp	r3, #0
 c1013d8:	1afffff9 	bne	c1013c4 <iis_rec+0xb8>
        BDISRC0  = (1 << 30) | (3 << 28) | (uint32) &IISFIF;
 c1013dc:	e59f3090 	ldr	r3, [pc, #144]	; c101474 <iis_rec+0x168>
 c1013e0:	e59f2090 	ldr	r2, [pc, #144]	; c101478 <iis_rec+0x16c>
 c1013e4:	e5832000 	str	r2, [r3]
        BDIDES0  = (2 << 30) | (1 << 28) | (uint32) buffer;      
 c1013e8:	e59f308c 	ldr	r3, [pc, #140]	; c10147c <iis_rec+0x170>
 c1013ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1013f0:	e3822209 	orr	r2, r2, #-1879048192	; 0x90000000
 c1013f4:	e5832000 	str	r2, [r3]
        BDCON0   = 0;
 c1013f8:	e3a0377e 	mov	r3, #33030144	; 0x1f80000
 c1013fc:	e3a02000 	mov	r2, #0
 c101400:	e5832000 	str	r2, [r3]
        BDICNT0  = (1 << 30) | (1 << 26) | (3 << 22) | (0xfffff & length); 
 c101404:	e59f2074 	ldr	r2, [pc, #116]	; c101480 <iis_rec+0x174>
 c101408:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10140c:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c101410:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
 c101414:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 c101418:	e3833503 	orr	r3, r3, #12582912	; 0xc00000
 c10141c:	e5823000 	str	r3, [r2]
        BDICNT0 |= (1 << 20);
 c101420:	e59f3058 	ldr	r3, [pc, #88]	; c101480 <iis_rec+0x174>
 c101424:	e59f2054 	ldr	r2, [pc, #84]	; c101480 <iis_rec+0x174>
 c101428:	e5922000 	ldr	r2, [r2]
 c10142c:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c101430:	e5832000 	str	r2, [r3]

        IISMOD   = (IISMOD & ~(3 << 6)) | (1 << 6);
 c101434:	e59f3048 	ldr	r3, [pc, #72]	; c101484 <iis_rec+0x178>
 c101438:	e59f2044 	ldr	r2, [pc, #68]	; c101484 <iis_rec+0x178>
 c10143c:	e5922000 	ldr	r2, [r2]
 c101440:	e3c220c0 	bic	r2, r2, #192	; 0xc0
 c101444:	e3822040 	orr	r2, r2, #64	; 0x40
 c101448:	e5832000 	str	r2, [r3]
        IISCON  |= 1 << 0;
 c10144c:	e59f301c 	ldr	r3, [pc, #28]	; c101470 <iis_rec+0x164>
 c101450:	e59f2018 	ldr	r2, [pc, #24]	; c101470 <iis_rec+0x164>
 c101454:	e5922000 	ldr	r2, [r2]
 c101458:	e3822001 	orr	r2, r2, #1
 c10145c:	e5832000 	str	r2, [r3]
    }
}
 c101460:	e24bd00c 	sub	sp, fp, #12
 c101464:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101468:	e12fff1e 	bx	lr
 c10146c:	0c105670 	.word	0x0c105670
 c101470:	01d18000 	.word	0x01d18000
 c101474:	01f80004 	.word	0x01f80004
 c101478:	71d18010 	.word	0x71d18010
 c10147c:	01f80008 	.word	0x01f80008
 c101480:	01f8000c 	.word	0x01f8000c
 c101484:	01d18004 	.word	0x01d18004

0c101488 <iis_pause>:

void iis_pause( void )
{
 c101488:	e1a0c00d 	mov	ip, sp
 c10148c:	e92dd800 	push	{fp, ip, lr, pc}
 c101490:	e24cb004 	sub	fp, ip, #4
    IISCON &= ~1;
 c101494:	e59f3018 	ldr	r3, [pc, #24]	; c1014b4 <iis_pause+0x2c>
 c101498:	e59f2014 	ldr	r2, [pc, #20]	; c1014b4 <iis_pause+0x2c>
 c10149c:	e5922000 	ldr	r2, [r2]
 c1014a0:	e3c22001 	bic	r2, r2, #1
 c1014a4:	e5832000 	str	r2, [r3]
}
 c1014a8:	e24bd00c 	sub	sp, fp, #12
 c1014ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1014b0:	e12fff1e 	bx	lr
 c1014b4:	01d18000 	.word	0x01d18000

0c1014b8 <iis_continue>:

void iis_continue( void )
{
 c1014b8:	e1a0c00d 	mov	ip, sp
 c1014bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1014c0:	e24cb004 	sub	fp, ip, #4
    IISCON |= 1;
 c1014c4:	e59f3018 	ldr	r3, [pc, #24]	; c1014e4 <iis_continue+0x2c>
 c1014c8:	e59f2014 	ldr	r2, [pc, #20]	; c1014e4 <iis_continue+0x2c>
 c1014cc:	e5922000 	ldr	r2, [r2]
 c1014d0:	e3822001 	orr	r2, r2, #1
 c1014d4:	e5832000 	str	r2, [r3]
}
 c1014d8:	e24bd00c 	sub	sp, fp, #12
 c1014dc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1014e0:	e12fff1e 	bx	lr
 c1014e4:	01d18000 	.word	0x01d18000

0c1014e8 <iis_status>:

uint8 iis_status( void )
{
 c1014e8:	e1a0c00d 	mov	ip, sp
 c1014ec:	e92dd800 	push	{fp, ip, lr, pc}
 c1014f0:	e24cb004 	sub	fp, ip, #4
    return (IISCON & 1);
 c1014f4:	e59f301c 	ldr	r3, [pc, #28]	; c101518 <iis_status+0x30>
 c1014f8:	e5933000 	ldr	r3, [r3]
 c1014fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c101500:	e2033001 	and	r3, r3, #1
 c101504:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c101508:	e1a00003 	mov	r0, r3
 c10150c:	e24bd00c 	sub	sp, fp, #12
 c101510:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101514:	e12fff1e 	bx	lr
 c101518:	01d18000 	.word	0x01d18000

0c10151c <iis_playWawFile>:

void iis_playWawFile( int16 *wav, uint8 loop )
{
 c10151c:	e1a0c00d 	mov	ip, sp
 c101520:	e92dd800 	push	{fp, ip, lr, pc}
 c101524:	e24cb004 	sub	fp, ip, #4
 c101528:	e24dd010 	sub	sp, sp, #16
 c10152c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c101530:	e1a03001 	mov	r3, r1
 c101534:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

    uint32 size;
    char *p;

    p = (char *) wav;
 c101538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10153c:	e50b3010 	str	r3, [fp, #-16]
    while ( !(p[0] == 'd' && p[1] == 'a' && p[2] == 't' && p[3] == 'a') ) // busca el chunck data
 c101540:	ea000002 	b	c101550 <iis_playWawFile+0x34>
        p++;
 c101544:	e51b3010 	ldr	r3, [fp, #-16]
 c101548:	e2833001 	add	r3, r3, #1
 c10154c:	e50b3010 	str	r3, [fp, #-16]

    uint32 size;
    char *p;

    p = (char *) wav;
    while ( !(p[0] == 'd' && p[1] == 'a' && p[2] == 't' && p[3] == 'a') ) // busca el chunck data
 c101550:	e51b3010 	ldr	r3, [fp, #-16]
 c101554:	e5d33000 	ldrb	r3, [r3]
 c101558:	e3530064 	cmp	r3, #100	; 0x64
 c10155c:	1afffff8 	bne	c101544 <iis_playWawFile+0x28>
 c101560:	e51b3010 	ldr	r3, [fp, #-16]
 c101564:	e2833001 	add	r3, r3, #1
 c101568:	e5d33000 	ldrb	r3, [r3]
 c10156c:	e3530061 	cmp	r3, #97	; 0x61
 c101570:	1afffff3 	bne	c101544 <iis_playWawFile+0x28>
 c101574:	e51b3010 	ldr	r3, [fp, #-16]
 c101578:	e2833002 	add	r3, r3, #2
 c10157c:	e5d33000 	ldrb	r3, [r3]
 c101580:	e3530074 	cmp	r3, #116	; 0x74
 c101584:	1affffee 	bne	c101544 <iis_playWawFile+0x28>
 c101588:	e51b3010 	ldr	r3, [fp, #-16]
 c10158c:	e2833003 	add	r3, r3, #3
 c101590:	e5d33000 	ldrb	r3, [r3]
 c101594:	e3530061 	cmp	r3, #97	; 0x61
 c101598:	1affffe9 	bne	c101544 <iis_playWawFile+0x28>
        p++;
    p += 4;
 c10159c:	e51b3010 	ldr	r3, [fp, #-16]
 c1015a0:	e2833004 	add	r3, r3, #4
 c1015a4:	e50b3010 	str	r3, [fp, #-16]

    size = p[0] + (p[1] << 8) + (p[2] << 16) + (p[3] << 24); // los datos de cabecera están en little-endian
 c1015a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1015ac:	e5d33000 	ldrb	r3, [r3]
 c1015b0:	e1a02003 	mov	r2, r3
 c1015b4:	e51b3010 	ldr	r3, [fp, #-16]
 c1015b8:	e2833001 	add	r3, r3, #1
 c1015bc:	e5d33000 	ldrb	r3, [r3]
 c1015c0:	e1a03403 	lsl	r3, r3, #8
 c1015c4:	e0822003 	add	r2, r2, r3
 c1015c8:	e51b3010 	ldr	r3, [fp, #-16]
 c1015cc:	e2833002 	add	r3, r3, #2
 c1015d0:	e5d33000 	ldrb	r3, [r3]
 c1015d4:	e1a03803 	lsl	r3, r3, #16
 c1015d8:	e0822003 	add	r2, r2, r3
 c1015dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1015e0:	e2833003 	add	r3, r3, #3
 c1015e4:	e5d33000 	ldrb	r3, [r3]
 c1015e8:	e1a03c03 	lsl	r3, r3, #24
 c1015ec:	e0823003 	add	r3, r2, r3
 c1015f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    p += 4;
 c1015f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1015f8:	e2833004 	add	r3, r3, #4
 c1015fc:	e50b3010 	str	r3, [fp, #-16]

    iis_play( (int16 *)p, size, loop );
 c101600:	e51b2010 	ldr	r2, [fp, #-16]
 c101604:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c101608:	e1a00002 	mov	r0, r2
 c10160c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c101610:	e1a02003 	mov	r2, r3
 c101614:	ebfffec4 	bl	c10112c <iis_play>

}
 c101618:	e24bd00c 	sub	sp, fp, #12
 c10161c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101620:	e12fff1e 	bx	lr

0c101624 <keypad_scan>:
#include <keypad.h>

extern void isr_KEYPAD_dummy( void );

uint8 keypad_scan( void )
{
 c101624:	e1a0c00d 	mov	ip, sp
 c101628:	e92dd800 	push	{fp, ip, lr, pc}
 c10162c:	e24cb004 	sub	fp, ip, #4
 c101630:	e24dd008 	sub	sp, sp, #8
    uint8 aux;

    aux = *( KEYPAD_ADDR + 0x1c );
 c101634:	e59f31fc 	ldr	r3, [pc, #508]	; c101838 <keypad_scan+0x214>
 c101638:	e5d33000 	ldrb	r3, [r3]
 c10163c:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c101640:	e55b300d 	ldrb	r3, [fp, #-13]
 c101644:	e203300f 	and	r3, r3, #15
 c101648:	e353000f 	cmp	r3, #15
 c10164c:	0a000017 	beq	c1016b0 <keypad_scan+0x8c>
    {
        if( (aux & 0x8) == 0 )
 c101650:	e55b300d 	ldrb	r3, [fp, #-13]
 c101654:	e2033008 	and	r3, r3, #8
 c101658:	e3530000 	cmp	r3, #0
 c10165c:	1a000001 	bne	c101668 <keypad_scan+0x44>
            return KEYPAD_KEY0;
 c101660:	e3a03000 	mov	r3, #0
 c101664:	ea00006f 	b	c101828 <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )
 c101668:	e55b300d 	ldrb	r3, [fp, #-13]
 c10166c:	e2033004 	and	r3, r3, #4
 c101670:	e3530000 	cmp	r3, #0
 c101674:	1a000001 	bne	c101680 <keypad_scan+0x5c>
            return KEYPAD_KEY1;
 c101678:	e3a03001 	mov	r3, #1
 c10167c:	ea000069 	b	c101828 <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c101680:	e55b300d 	ldrb	r3, [fp, #-13]
 c101684:	e2033002 	and	r3, r3, #2
 c101688:	e3530000 	cmp	r3, #0
 c10168c:	1a000001 	bne	c101698 <keypad_scan+0x74>
            return KEYPAD_KEY2;
 c101690:	e3a03002 	mov	r3, #2
 c101694:	ea000063 	b	c101828 <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c101698:	e55b300d 	ldrb	r3, [fp, #-13]
 c10169c:	e2033001 	and	r3, r3, #1
 c1016a0:	e3530000 	cmp	r3, #0
 c1016a4:	1a000001 	bne	c1016b0 <keypad_scan+0x8c>
            return KEYPAD_KEY3;
 c1016a8:	e3a03003 	mov	r3, #3
 c1016ac:	ea00005d 	b	c101828 <keypad_scan+0x204>
    }
	aux = *( KEYPAD_ADDR + 0x1a );
 c1016b0:	e59f3184 	ldr	r3, [pc, #388]	; c10183c <keypad_scan+0x218>
 c1016b4:	e5d33000 	ldrb	r3, [r3]
 c1016b8:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c1016bc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1016c0:	e203300f 	and	r3, r3, #15
 c1016c4:	e353000f 	cmp	r3, #15
 c1016c8:	0a000017 	beq	c10172c <keypad_scan+0x108>
	{
		if( (aux & 0x8) == 0 )
 c1016cc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1016d0:	e2033008 	and	r3, r3, #8
 c1016d4:	e3530000 	cmp	r3, #0
 c1016d8:	1a000001 	bne	c1016e4 <keypad_scan+0xc0>
			return KEYPAD_KEY4;
 c1016dc:	e3a03004 	mov	r3, #4
 c1016e0:	ea000050 	b	c101828 <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c1016e4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1016e8:	e2033004 	and	r3, r3, #4
 c1016ec:	e3530000 	cmp	r3, #0
 c1016f0:	1a000001 	bne	c1016fc <keypad_scan+0xd8>
			return KEYPAD_KEY5;
 c1016f4:	e3a03005 	mov	r3, #5
 c1016f8:	ea00004a 	b	c101828 <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c1016fc:	e55b300d 	ldrb	r3, [fp, #-13]
 c101700:	e2033002 	and	r3, r3, #2
 c101704:	e3530000 	cmp	r3, #0
 c101708:	1a000001 	bne	c101714 <keypad_scan+0xf0>
			return KEYPAD_KEY6;
 c10170c:	e3a03006 	mov	r3, #6
 c101710:	ea000044 	b	c101828 <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c101714:	e55b300d 	ldrb	r3, [fp, #-13]
 c101718:	e2033001 	and	r3, r3, #1
 c10171c:	e3530000 	cmp	r3, #0
 c101720:	1a000001 	bne	c10172c <keypad_scan+0x108>
			return KEYPAD_KEY7;
 c101724:	e3a03007 	mov	r3, #7
 c101728:	ea00003e 	b	c101828 <keypad_scan+0x204>
	}
    aux = *( KEYPAD_ADDR + 0x16);
 c10172c:	e59f310c 	ldr	r3, [pc, #268]	; c101840 <keypad_scan+0x21c>
 c101730:	e5d33000 	ldrb	r3, [r3]
 c101734:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f) {
 c101738:	e55b300d 	ldrb	r3, [fp, #-13]
 c10173c:	e203300f 	and	r3, r3, #15
 c101740:	e353000f 	cmp	r3, #15
 c101744:	0a000017 	beq	c1017a8 <keypad_scan+0x184>
    	if( (aux & 0x8) == 0 )
 c101748:	e55b300d 	ldrb	r3, [fp, #-13]
 c10174c:	e2033008 	and	r3, r3, #8
 c101750:	e3530000 	cmp	r3, #0
 c101754:	1a000001 	bne	c101760 <keypad_scan+0x13c>
			return KEYPAD_KEY8;
 c101758:	e3a03008 	mov	r3, #8
 c10175c:	ea000031 	b	c101828 <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c101760:	e55b300d 	ldrb	r3, [fp, #-13]
 c101764:	e2033004 	and	r3, r3, #4
 c101768:	e3530000 	cmp	r3, #0
 c10176c:	1a000001 	bne	c101778 <keypad_scan+0x154>
			return KEYPAD_KEY9;
 c101770:	e3a03009 	mov	r3, #9
 c101774:	ea00002b 	b	c101828 <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c101778:	e55b300d 	ldrb	r3, [fp, #-13]
 c10177c:	e2033002 	and	r3, r3, #2
 c101780:	e3530000 	cmp	r3, #0
 c101784:	1a000001 	bne	c101790 <keypad_scan+0x16c>
			return KEYPAD_KEYA;
 c101788:	e3a0300a 	mov	r3, #10
 c10178c:	ea000025 	b	c101828 <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c101790:	e55b300d 	ldrb	r3, [fp, #-13]
 c101794:	e2033001 	and	r3, r3, #1
 c101798:	e3530000 	cmp	r3, #0
 c10179c:	1a000001 	bne	c1017a8 <keypad_scan+0x184>
			return KEYPAD_KEYB;
 c1017a0:	e3a0300b 	mov	r3, #11
 c1017a4:	ea00001f 	b	c101828 <keypad_scan+0x204>
    }

    aux = *( KEYPAD_ADDR + 0x0e);
 c1017a8:	e59f3094 	ldr	r3, [pc, #148]	; c101844 <keypad_scan+0x220>
 c1017ac:	e5d33000 	ldrb	r3, [r3]
 c1017b0:	e54b300d 	strb	r3, [fp, #-13]
        if( (aux & 0x0f) != 0x0f) {
 c1017b4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1017b8:	e203300f 	and	r3, r3, #15
 c1017bc:	e353000f 	cmp	r3, #15
 c1017c0:	0a000017 	beq	c101824 <keypad_scan+0x200>
        	if( (aux & 0x8) == 0 )
 c1017c4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1017c8:	e2033008 	and	r3, r3, #8
 c1017cc:	e3530000 	cmp	r3, #0
 c1017d0:	1a000001 	bne	c1017dc <keypad_scan+0x1b8>
    			return KEYPAD_KEYC;
 c1017d4:	e3a0300c 	mov	r3, #12
 c1017d8:	ea000012 	b	c101828 <keypad_scan+0x204>
    		else if( (aux & 0x4) == 0 )
 c1017dc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1017e0:	e2033004 	and	r3, r3, #4
 c1017e4:	e3530000 	cmp	r3, #0
 c1017e8:	1a000001 	bne	c1017f4 <keypad_scan+0x1d0>
    			return KEYPAD_KEYD;
 c1017ec:	e3a0300d 	mov	r3, #13
 c1017f0:	ea00000c 	b	c101828 <keypad_scan+0x204>
    		else if( (aux & 0x2) == 0 )
 c1017f4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1017f8:	e2033002 	and	r3, r3, #2
 c1017fc:	e3530000 	cmp	r3, #0
 c101800:	1a000001 	bne	c10180c <keypad_scan+0x1e8>
    			return KEYPAD_KEYE;
 c101804:	e3a0300e 	mov	r3, #14
 c101808:	ea000006 	b	c101828 <keypad_scan+0x204>
    		else if( (aux & 0x1) == 0 )
 c10180c:	e55b300d 	ldrb	r3, [fp, #-13]
 c101810:	e2033001 	and	r3, r3, #1
 c101814:	e3530000 	cmp	r3, #0
 c101818:	1a000001 	bne	c101824 <keypad_scan+0x200>
    			return KEYPAD_KEYF;
 c10181c:	e3a0300f 	mov	r3, #15
 c101820:	ea000000 	b	c101828 <keypad_scan+0x204>
        }

    return KEYPAD_FAILURE;
 c101824:	e3a030ff 	mov	r3, #255	; 0xff
}
 c101828:	e1a00003 	mov	r0, r3
 c10182c:	e24bd00c 	sub	sp, fp, #12
 c101830:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101834:	e12fff1e 	bx	lr
 c101838:	0600001c 	.word	0x0600001c
 c10183c:	0600001a 	.word	0x0600001a
 c101840:	06000016 	.word	0x06000016
 c101844:	0600000e 	.word	0x0600000e

0c101848 <keypad_pressed>:

uint8 keypad_pressed( void ) {
 c101848:	e1a0c00d 	mov	ip, sp
 c10184c:	e92dd800 	push	{fp, ip, lr, pc}
 c101850:	e24cb004 	sub	fp, ip, #4
    return !( PDATG & (1 << 1) );
 c101854:	e59f3024 	ldr	r3, [pc, #36]	; c101880 <keypad_pressed+0x38>
 c101858:	e5933000 	ldr	r3, [r3]
 c10185c:	e2033002 	and	r3, r3, #2
 c101860:	e3530000 	cmp	r3, #0
 c101864:	13a03000 	movne	r3, #0
 c101868:	03a03001 	moveq	r3, #1
 c10186c:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c101870:	e1a00003 	mov	r0, r3
 c101874:	e24bd00c 	sub	sp, fp, #12
 c101878:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10187c:	e12fff1e 	bx	lr
 c101880:	01d20044 	.word	0x01d20044

0c101884 <keypad_open>:

void keypad_open( void (*isr)(void) ) {
 c101884:	e1a0c00d 	mov	ip, sp
 c101888:	e92dd800 	push	{fp, ip, lr, pc}
 c10188c:	e24cb004 	sub	fp, ip, #4
 c101890:	e24dd008 	sub	sp, sp, #8
 c101894:	e50b0010 	str	r0, [fp, #-16]
    pISR_KEYPAD = isr;
 c101898:	e59f3030 	ldr	r3, [pc, #48]	; c1018d0 <keypad_open+0x4c>
 c10189c:	e51b2010 	ldr	r2, [fp, #-16]
 c1018a0:	e5832000 	str	r2, [r3]
    I_ISPC 		= BIT_KEYPAD;
 c1018a4:	e59f3028 	ldr	r3, [pc, #40]	; c1018d4 <keypad_open+0x50>
 c1018a8:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c1018ac:	e5832000 	str	r2, [r3]
    INTMSK	   &= ~(BIT_GLOBAL | BIT_KEYPAD);
 c1018b0:	e59f3020 	ldr	r3, [pc, #32]	; c1018d8 <keypad_open+0x54>
 c1018b4:	e59f201c 	ldr	r2, [pc, #28]	; c1018d8 <keypad_open+0x54>
 c1018b8:	e5922000 	ldr	r2, [r2]
 c1018bc:	e3c22405 	bic	r2, r2, #83886080	; 0x5000000
 c1018c0:	e5832000 	str	r2, [r3]



}
 c1018c4:	e24bd00c 	sub	sp, fp, #12
 c1018c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1018cc:	e12fff1e 	bx	lr
 c1018d0:	0c7fff80 	.word	0x0c7fff80
 c1018d4:	01e00024 	.word	0x01e00024
 c1018d8:	01e0000c 	.word	0x01e0000c

0c1018dc <keypad_close>:

void keypad_close( void ) {
 c1018dc:	e1a0c00d 	mov	ip, sp
 c1018e0:	e92dd800 	push	{fp, ip, lr, pc}
 c1018e4:	e24cb004 	sub	fp, ip, #4
	INTMSK |= (BIT_GLOBAL | BIT_KEYPAD);
 c1018e8:	e59f3024 	ldr	r3, [pc, #36]	; c101914 <keypad_close+0x38>
 c1018ec:	e59f2020 	ldr	r2, [pc, #32]	; c101914 <keypad_close+0x38>
 c1018f0:	e5922000 	ldr	r2, [r2]
 c1018f4:	e3822405 	orr	r2, r2, #83886080	; 0x5000000
 c1018f8:	e5832000 	str	r2, [r3]
	pISR_KEYPAD = isr_KEYPAD_dummy;
 c1018fc:	e59f3014 	ldr	r3, [pc, #20]	; c101918 <keypad_close+0x3c>
 c101900:	e59f2014 	ldr	r2, [pc, #20]	; c10191c <keypad_close+0x40>
 c101904:	e5832000 	str	r2, [r3]
}
 c101908:	e24bd00c 	sub	sp, fp, #12
 c10190c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101910:	e12fff1e 	bx	lr
 c101914:	01e0000c 	.word	0x01e0000c
 c101918:	0c7fff80 	.word	0x0c7fff80
 c10191c:	0c102658 	.word	0x0c102658

0c101920 <keypad_init>:

#if KEYPAD_IO_METHOD == POOLING


void keypad_init( void )
{
 c101920:	e1a0c00d 	mov	ip, sp
 c101924:	e92dd800 	push	{fp, ip, lr, pc}
 c101928:	e24cb004 	sub	fp, ip, #4
    timers_init();  
 c10192c:	eb00041c 	bl	c1029a4 <timers_init>
};
 c101930:	e24bd00c 	sub	sp, fp, #12
 c101934:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101938:	e12fff1e 	bx	lr

0c10193c <keypad_getchar>:

uint8 keypad_getchar( void ) {
 c10193c:	e1a0c00d 	mov	ip, sp
 c101940:	e92dd800 	push	{fp, ip, lr, pc}
 c101944:	e24cb004 	sub	fp, ip, #4
 c101948:	e24dd008 	sub	sp, sp, #8
    uint8 keycode;

    while( !keypad_pressed() );
 c10194c:	e1a00000 	nop			; (mov r0, r0)
 c101950:	ebffffbc 	bl	c101848 <keypad_pressed>
 c101954:	e1a03000 	mov	r3, r0
 c101958:	e3530000 	cmp	r3, #0
 c10195c:	0afffffb 	beq	c101950 <keypad_getchar+0x14>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c101960:	e3a0001e 	mov	r0, #30
 c101964:	eb0004ee 	bl	c102d24 <sw_delay_ms>

    keycode = keypad_scan();
 c101968:	ebffff2d 	bl	c101624 <keypad_scan>
 c10196c:	e1a03000 	mov	r3, r0
 c101970:	e54b300d 	strb	r3, [fp, #-13]

    while( keypad_pressed() );
 c101974:	e1a00000 	nop			; (mov r0, r0)
 c101978:	ebffffb2 	bl	c101848 <keypad_pressed>
 c10197c:	e1a03000 	mov	r3, r0
 c101980:	e3530000 	cmp	r3, #0
 c101984:	1afffffb 	bne	c101978 <keypad_getchar+0x3c>
    sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c101988:	e3a00064 	mov	r0, #100	; 0x64
 c10198c:	eb0004e4 	bl	c102d24 <sw_delay_ms>

    return keycode;
 c101990:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c101994:	e1a00003 	mov	r0, r3
 c101998:	e24bd00c 	sub	sp, fp, #12
 c10199c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1019a0:	e12fff1e 	bx	lr

0c1019a4 <keypad_getchartime>:

uint8 keypad_getchartime( uint16 *ms ) {
 c1019a4:	e1a0c00d 	mov	ip, sp
 c1019a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1019ac:	e24cb004 	sub	fp, ip, #4
 c1019b0:	e24dd010 	sub	sp, sp, #16
 c1019b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8 keycode;

    while( !keypad_pressed() );
 c1019b8:	e1a00000 	nop			; (mov r0, r0)
 c1019bc:	ebffffa1 	bl	c101848 <keypad_pressed>
 c1019c0:	e1a03000 	mov	r3, r0
 c1019c4:	e3530000 	cmp	r3, #0
 c1019c8:	0afffffb 	beq	c1019bc <keypad_getchartime+0x18>
    timer3_start();
 c1019cc:	eb000511 	bl	c102e18 <timer3_start>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1019d0:	e3a0001e 	mov	r0, #30
 c1019d4:	eb0004d2 	bl	c102d24 <sw_delay_ms>

    keycode = keypad_scan();
 c1019d8:	ebffff11 	bl	c101624 <keypad_scan>
 c1019dc:	e1a03000 	mov	r3, r0
 c1019e0:	e54b300d 	strb	r3, [fp, #-13]

    while( keypad_pressed() );
 c1019e4:	e1a00000 	nop			; (mov r0, r0)
 c1019e8:	ebffff96 	bl	c101848 <keypad_pressed>
 c1019ec:	e1a03000 	mov	r3, r0
 c1019f0:	e3530000 	cmp	r3, #0
 c1019f4:	1afffffb 	bne	c1019e8 <keypad_getchartime+0x44>
    *ms = timer3_stop() / 10;
 c1019f8:	eb000532 	bl	c102ec8 <timer3_stop>
 c1019fc:	e1a03000 	mov	r3, r0
 c101a00:	e1a02003 	mov	r2, r3
 c101a04:	e59f3030 	ldr	r3, [pc, #48]	; c101a3c <keypad_getchartime+0x98>
 c101a08:	e0831392 	umull	r1, r3, r2, r3
 c101a0c:	e1a031a3 	lsr	r3, r3, #3
 c101a10:	e1a03803 	lsl	r3, r3, #16
 c101a14:	e1a02823 	lsr	r2, r3, #16
 c101a18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101a1c:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c101a20:	e3a00064 	mov	r0, #100	; 0x64
 c101a24:	eb0004be 	bl	c102d24 <sw_delay_ms>

    return keycode;
 c101a28:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c101a2c:	e1a00003 	mov	r0, r3
 c101a30:	e24bd00c 	sub	sp, fp, #12
 c101a34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101a38:	e12fff1e 	bx	lr
 c101a3c:	cccccccd 	.word	0xcccccccd

0c101a40 <keypad_timeout_getchar>:

uint8 keypad_timeout_getchar( uint16 ms ) {
 c101a40:	e1a0c00d 	mov	ip, sp
 c101a44:	e92dd800 	push	{fp, ip, lr, pc}
 c101a48:	e24cb004 	sub	fp, ip, #4
 c101a4c:	e24dd010 	sub	sp, sp, #16
 c101a50:	e1a03000 	mov	r3, r0
 c101a54:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint8 keycode;

    timer3_start_timeout(ms * 10);
 c101a58:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101a5c:	e1a02003 	mov	r2, r3
 c101a60:	e1a02102 	lsl	r2, r2, #2
 c101a64:	e0823003 	add	r3, r2, r3
 c101a68:	e1a03083 	lsl	r3, r3, #1
 c101a6c:	e1a03803 	lsl	r3, r3, #16
 c101a70:	e1a03823 	lsr	r3, r3, #16
 c101a74:	e1a00003 	mov	r0, r3
 c101a78:	eb000527 	bl	c102f1c <timer3_start_timeout>
    while( !keypad_pressed() ) {
 c101a7c:	ea000005 	b	c101a98 <keypad_timeout_getchar+0x58>
    	if(timer3_timeout())
 c101a80:	eb000553 	bl	c102fd4 <timer3_timeout>
 c101a84:	e1a03000 	mov	r3, r0
 c101a88:	e3530000 	cmp	r3, #0
 c101a8c:	0a000001 	beq	c101a98 <keypad_timeout_getchar+0x58>
    		return KEYPAD_TIMEOUT;
 c101a90:	e3a030fe 	mov	r3, #254	; 0xfe
 c101a94:	ea000010 	b	c101adc <keypad_timeout_getchar+0x9c>

uint8 keypad_timeout_getchar( uint16 ms ) {
    uint8 keycode;

    timer3_start_timeout(ms * 10);
    while( !keypad_pressed() ) {
 c101a98:	ebffff6a 	bl	c101848 <keypad_pressed>
 c101a9c:	e1a03000 	mov	r3, r0
 c101aa0:	e3530000 	cmp	r3, #0
 c101aa4:	0afffff5 	beq	c101a80 <keypad_timeout_getchar+0x40>
    	if(timer3_timeout())
    		return KEYPAD_TIMEOUT;
    }

    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c101aa8:	e3a0001e 	mov	r0, #30
 c101aac:	eb00049c 	bl	c102d24 <sw_delay_ms>
    keycode = keypad_scan();
 c101ab0:	ebfffedb 	bl	c101624 <keypad_scan>
 c101ab4:	e1a03000 	mov	r3, r0
 c101ab8:	e54b300d 	strb	r3, [fp, #-13]

    while(keypad_pressed());
 c101abc:	e1a00000 	nop			; (mov r0, r0)
 c101ac0:	ebffff60 	bl	c101848 <keypad_pressed>
 c101ac4:	e1a03000 	mov	r3, r0
 c101ac8:	e3530000 	cmp	r3, #0
 c101acc:	1afffffb 	bne	c101ac0 <keypad_timeout_getchar+0x80>
    sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c101ad0:	e3a00064 	mov	r0, #100	; 0x64
 c101ad4:	eb000492 	bl	c102d24 <sw_delay_ms>

    return keycode;
 c101ad8:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c101adc:	e1a00003 	mov	r0, r3
 c101ae0:	e24bd00c 	sub	sp, fp, #12
 c101ae4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101ae8:	e12fff1e 	bx	lr

0c101aec <segs_init>:
		0x1f, 0x10, 0x1c, 0x18, 0xd0, 0x72, 0x91, 0x70, 0x78};

static uint8 state;
        
void segs_init( void )
{
 c101aec:	e1a0c00d 	mov	ip, sp
 c101af0:	e92dd800 	push	{fp, ip, lr, pc}
 c101af4:	e24cb004 	sub	fp, ip, #4
    segs_off();
 c101af8:	eb000002 	bl	c101b08 <segs_off>
}                                  
 c101afc:	e24bd00c 	sub	sp, fp, #12
 c101b00:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101b04:	e12fff1e 	bx	lr

0c101b08 <segs_off>:
                          
void segs_off( void )
{
 c101b08:	e1a0c00d 	mov	ip, sp
 c101b0c:	e92dd800 	push	{fp, ip, lr, pc}
 c101b10:	e24cb004 	sub	fp, ip, #4
    state = SEGS_OFF;
 c101b14:	e59f3020 	ldr	r3, [pc, #32]	; c101b3c <segs_off+0x34>
 c101b18:	e3e02000 	mvn	r2, #0
 c101b1c:	e5c32000 	strb	r2, [r3]
    SEGS = state;
 c101b20:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b24:	e59f2010 	ldr	r2, [pc, #16]	; c101b3c <segs_off+0x34>
 c101b28:	e5d22000 	ldrb	r2, [r2]
 c101b2c:	e5c32000 	strb	r2, [r3]
}
 c101b30:	e24bd00c 	sub	sp, fp, #12
 c101b34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101b38:	e12fff1e 	bx	lr
 c101b3c:	0c105671 	.word	0x0c105671

0c101b40 <segs_putchar>:

void segs_putchar( uint8 n )
{
 c101b40:	e1a0c00d 	mov	ip, sp
 c101b44:	e92dd800 	push	{fp, ip, lr, pc}
 c101b48:	e24cb004 	sub	fp, ip, #4
 c101b4c:	e24dd008 	sub	sp, sp, #8
 c101b50:	e1a03000 	mov	r3, r0
 c101b54:	e54b300d 	strb	r3, [fp, #-13]
    state = n & 0x0f;
 c101b58:	e55b300d 	ldrb	r3, [fp, #-13]
 c101b5c:	e203300f 	and	r3, r3, #15
 c101b60:	e20320ff 	and	r2, r3, #255	; 0xff
 c101b64:	e59f3024 	ldr	r3, [pc, #36]	; c101b90 <segs_putchar+0x50>
 c101b68:	e5c32000 	strb	r2, [r3]
    SEGS = hex2segs[state];
 c101b6c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b70:	e59f2018 	ldr	r2, [pc, #24]	; c101b90 <segs_putchar+0x50>
 c101b74:	e5d22000 	ldrb	r2, [r2]
 c101b78:	e59f1014 	ldr	r1, [pc, #20]	; c101b94 <segs_putchar+0x54>
 c101b7c:	e7d12002 	ldrb	r2, [r1, r2]
 c101b80:	e5c32000 	strb	r2, [r3]
};
 c101b84:	e24bd00c 	sub	sp, fp, #12
 c101b88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101b8c:	e12fff1e 	bx	lr
 c101b90:	0c105671 	.word	0x0c105671
 c101b94:	0c104e64 	.word	0x0c104e64

0c101b98 <segs_status>:

uint8 segs_status( void )
{
 c101b98:	e1a0c00d 	mov	ip, sp
 c101b9c:	e92dd800 	push	{fp, ip, lr, pc}
 c101ba0:	e24cb004 	sub	fp, ip, #4
    return state;
 c101ba4:	e59f3010 	ldr	r3, [pc, #16]	; c101bbc <segs_status+0x24>
 c101ba8:	e5d33000 	ldrb	r3, [r3]
};
 c101bac:	e1a00003 	mov	r0, r3
 c101bb0:	e24bd00c 	sub	sp, fp, #12
 c101bb4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101bb8:	e12fff1e 	bx	lr
 c101bbc:	0c105671 	.word	0x0c105671

0c101bc0 <sys_init>:
void isr_TS_dummy( void )        __attribute__ ((interrupt ("IRQ")));
void isr_KEYPAD_dummy( void )    __attribute__ ((interrupt ("IRQ")));
void isr_USB_dummy( void )       __attribute__ ((interrupt ("IRQ")));

void sys_init( void )
{
 c101bc0:	e1a0c00d 	mov	ip, sp
 c101bc4:	e92dd800 	push	{fp, ip, lr, pc}
 c101bc8:	e24cb004 	sub	fp, ip, #4
 c101bcc:	e24dd008 	sub	sp, sp, #8
    uint8 mode;

    WTCON  = 0;             // deshabilita el watchdog    
 c101bd0:	e59f30fc 	ldr	r3, [pc, #252]	; c101cd4 <sys_init+0x114>
 c101bd4:	e3a02000 	mov	r2, #0
 c101bd8:	e5832000 	str	r2, [r3]
    INTMSK = ~0;            // enmascara todas las interrupciones
 c101bdc:	e59f30f4 	ldr	r3, [pc, #244]	; c101cd8 <sys_init+0x118>
 c101be0:	e3e02000 	mvn	r2, #0
 c101be4:	e5832000 	str	r2, [r3]
    
    GET_OPMODE( &mode );    // lee el modo de ejecuciï¿½n del procesador
 c101be8:	e10f0000 	mrs	r0, CPSR
 c101bec:	e200001f 	and	r0, r0, #31
 c101bf0:	e54b000d 	strb	r0, [fp, #-13]
    if( mode != SVCMODE )
 c101bf4:	e55b300d 	ldrb	r3, [fp, #-13]
 c101bf8:	e3530013 	cmp	r3, #19
 c101bfc:	0a000000 	beq	c101c04 <sys_init+0x44>
        sys_recovery();     // si no es SVC (por una reejecuciï¿½n de la aplicaciï¿½n tras una excepciï¿½n sin reset HW previo) recupera el modo SVC y restaura las pilas del sistema
 c101c00:	eb0002df 	bl	c102784 <sys_recovery>

    // Configuracion del gestor de reloj
    LOCKTIME = 0xfff;         // estabilizacion del PLL = 512 us
 c101c04:	e59f30d0 	ldr	r3, [pc, #208]	; c101cdc <sys_init+0x11c>
 c101c08:	e59f20d0 	ldr	r2, [pc, #208]	; c101ce0 <sys_init+0x120>
 c101c0c:	e5832000 	str	r2, [r3]
    PLLCON   = 0x38021;         // MCLK = 64MHz
 c101c10:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c101c14:	e59f20c8 	ldr	r2, [pc, #200]	; c101ce4 <sys_init+0x124>
 c101c18:	e5832000 	str	r2, [r3]
    CLKSLOW  = 0x8;         // MCLK_SLOW = 500 KHz
 c101c1c:	e59f30c4 	ldr	r3, [pc, #196]	; c101ce8 <sys_init+0x128>
 c101c20:	e3a02008 	mov	r2, #8
 c101c24:	e5832000 	str	r2, [r3]
    CLKCON   = 0x7ff8;         // modo NORMAL y reloj distribuido a todos los controladores
 c101c28:	e59f30bc 	ldr	r3, [pc, #188]	; c101cec <sys_init+0x12c>
 c101c2c:	e59f20bc 	ldr	r2, [pc, #188]	; c101cf0 <sys_init+0x130>
 c101c30:	e5832000 	str	r2, [r3]

    // Configuracion del arbitro de bus   
    SBUSCON = 0x8000001b;          // prioridad fija por defecto LCD > ZDMA > BDMA > IRQ
 c101c34:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c101c38:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c101c3c:	e5832000 	str	r2, [r3]
    
    // Configuracion de cache   
    SYSCFG = 0x0;           // deshabilitada
 c101c40:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c101c44:	e3a02000 	mov	r2, #0
 c101c48:	e5832000 	str	r2, [r3]

    // Configuacion del controlador de interrupciones    
    I_PMST = 0x1f1b;           // prioridades fijas por defecto
 c101c4c:	e59f30a0 	ldr	r3, [pc, #160]	; c101cf4 <sys_init+0x134>
 c101c50:	e59f20a0 	ldr	r2, [pc, #160]	; c101cf8 <sys_init+0x138>
 c101c54:	e5832000 	str	r2, [r3]
    I_PSLV = 0x1b1b1b1b;
 c101c58:	e59f309c 	ldr	r3, [pc, #156]	; c101cfc <sys_init+0x13c>
 c101c5c:	e59f209c 	ldr	r2, [pc, #156]	; c101d00 <sys_init+0x140>
 c101c60:	e5832000 	str	r2, [r3]
    INTMOD = 0x0;           // todas las interrupciones en modo IRQ
 c101c64:	e59f3098 	ldr	r3, [pc, #152]	; c101d04 <sys_init+0x144>
 c101c68:	e3a02000 	mov	r2, #0
 c101c6c:	e5832000 	str	r2, [r3]
    install_dummy_isr();    // instala rutinas de tratamiento por defecto para todas las interrupciones
 c101c70:	eb000088 	bl	c101e98 <install_dummy_isr>
    EXTINTPND = 0xf0;        // borra las interrupciones externas pendientes por linea EINT7..4
 c101c74:	e59f308c 	ldr	r3, [pc, #140]	; c101d08 <sys_init+0x148>
 c101c78:	e3a020f0 	mov	r2, #240	; 0xf0
 c101c7c:	e5832000 	str	r2, [r3]
    I_ISPC = 0x1;           // borra todas las interrupciones pendientes
 c101c80:	e59f3084 	ldr	r3, [pc, #132]	; c101d0c <sys_init+0x14c>
 c101c84:	e3a02001 	mov	r2, #1
 c101c88:	e5832000 	str	r2, [r3]
    INTCON = 0x1;           // IRQ vectorizadas, linea IRQ activada, linea FIQ desactivada
 c101c8c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c101c90:	e3a02001 	mov	r2, #1
 c101c94:	e5832000 	str	r2, [r3]
    SET_IRQFLAG( 0 );       // Habilita IRQ en el procesador
 c101c98:	e10f0000 	mrs	r0, CPSR
 c101c9c:	e3c00080 	bic	r0, r0, #128	; 0x80
 c101ca0:	e3800000 	orr	r0, r0, #0
 c101ca4:	e121f000 	msr	CPSR_c, r0
    SET_FIQFLAG( 1 );       // Deshabilita FIQ en el procesador
 c101ca8:	e10f0000 	mrs	r0, CPSR
 c101cac:	e3c00040 	bic	r0, r0, #64	; 0x40
 c101cb0:	e3800040 	orr	r0, r0, #64	; 0x40
 c101cb4:	e121f000 	msr	CPSR_c, r0

    // Configuracion de puertos
    port_init();
 c101cb8:	eb000014 	bl	c101d10 <port_init>
    
    // Configuracion de dispositivos
    segs_init();
 c101cbc:	ebffff8a 	bl	c101aec <segs_init>
    uart0_init();
 c101cc0:	eb0005cb 	bl	c1033f4 <uart0_init>

    show_sys_info();
 c101cc4:	eb000279 	bl	c1026b0 <show_sys_info>
}
 c101cc8:	e24bd00c 	sub	sp, fp, #12
 c101ccc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101cd0:	e12fff1e 	bx	lr
 c101cd4:	01d30000 	.word	0x01d30000
 c101cd8:	01e0000c 	.word	0x01e0000c
 c101cdc:	01d8000c 	.word	0x01d8000c
 c101ce0:	00000fff 	.word	0x00000fff
 c101ce4:	00038021 	.word	0x00038021
 c101ce8:	01d80008 	.word	0x01d80008
 c101cec:	01d80004 	.word	0x01d80004
 c101cf0:	00007ff8 	.word	0x00007ff8
 c101cf4:	01e00014 	.word	0x01e00014
 c101cf8:	00001f1b 	.word	0x00001f1b
 c101cfc:	01e00010 	.word	0x01e00010
 c101d00:	1b1b1b1b 	.word	0x1b1b1b1b
 c101d04:	01e00008 	.word	0x01e00008
 c101d08:	01d20054 	.word	0x01d20054
 c101d0c:	01e00024 	.word	0x01e00024

0c101d10 <port_init>:

static inline void port_init( void )
{
 c101d10:	e1a0c00d 	mov	ip, sp
 c101d14:	e92dd800 	push	{fp, ip, lr, pc}
 c101d18:	e24cb004 	sub	fp, ip, #4
	PDATA = ~0;
 c101d1c:	e59f3100 	ldr	r3, [pc, #256]	; c101e24 <port_init+0x114>
 c101d20:	e3e02000 	mvn	r2, #0
 c101d24:	e5832000 	str	r2, [r3]
	PCONA = 0xFE;
 c101d28:	e59f30f8 	ldr	r3, [pc, #248]	; c101e28 <port_init+0x118>
 c101d2c:	e3a020fe 	mov	r2, #254	; 0xfe
 c101d30:	e5832000 	str	r2, [r3]

	PDATB = ~0;
 c101d34:	e59f30f0 	ldr	r3, [pc, #240]	; c101e2c <port_init+0x11c>
 c101d38:	e3e02000 	mvn	r2, #0
 c101d3c:	e5832000 	str	r2, [r3]
	PCONB = 0x14f;
 c101d40:	e59f30e8 	ldr	r3, [pc, #232]	; c101e30 <port_init+0x120>
 c101d44:	e59f20e8 	ldr	r2, [pc, #232]	; c101e34 <port_init+0x124>
 c101d48:	e5832000 	str	r2, [r3]

	PDATC = ~0;
 c101d4c:	e59f30e4 	ldr	r3, [pc, #228]	; c101e38 <port_init+0x128>
 c101d50:	e3e02000 	mvn	r2, #0
 c101d54:	e5832000 	str	r2, [r3]
	PCONC = 0x5ff555ff;
 c101d58:	e59f30dc 	ldr	r3, [pc, #220]	; c101e3c <port_init+0x12c>
 c101d5c:	e59f20dc 	ldr	r2, [pc, #220]	; c101e40 <port_init+0x130>
 c101d60:	e5832000 	str	r2, [r3]
	PUPC  = 0x94fb;
 c101d64:	e59f30d8 	ldr	r3, [pc, #216]	; c101e44 <port_init+0x134>
 c101d68:	e59f20d8 	ldr	r2, [pc, #216]	; c101e48 <port_init+0x138>
 c101d6c:	e5832000 	str	r2, [r3]

	PDATD = ~0;
 c101d70:	e59f30d4 	ldr	r3, [pc, #212]	; c101e4c <port_init+0x13c>
 c101d74:	e3e02000 	mvn	r2, #0
 c101d78:	e5832000 	str	r2, [r3]
	PCOND = 0xAAAA;
 c101d7c:	e59f30cc 	ldr	r3, [pc, #204]	; c101e50 <port_init+0x140>
 c101d80:	e59f20cc 	ldr	r2, [pc, #204]	; c101e54 <port_init+0x144>
 c101d84:	e5832000 	str	r2, [r3]
	PUPD  = 0xff;
 c101d88:	e59f30c8 	ldr	r3, [pc, #200]	; c101e58 <port_init+0x148>
 c101d8c:	e3a020ff 	mov	r2, #255	; 0xff
 c101d90:	e5832000 	str	r2, [r3]

	PDATE = ~0;
 c101d94:	e59f30c0 	ldr	r3, [pc, #192]	; c101e5c <port_init+0x14c>
 c101d98:	e3e02000 	mvn	r2, #0
 c101d9c:	e5832000 	str	r2, [r3]
	PCONE = 0x255a9;
 c101da0:	e59f30b8 	ldr	r3, [pc, #184]	; c101e60 <port_init+0x150>
 c101da4:	e59f20b8 	ldr	r2, [pc, #184]	; c101e64 <port_init+0x154>
 c101da8:	e5832000 	str	r2, [r3]
	PUPE  = 0xfb;
 c101dac:	e59f30b4 	ldr	r3, [pc, #180]	; c101e68 <port_init+0x158>
 c101db0:	e3a020fb 	mov	r2, #251	; 0xfb
 c101db4:	e5832000 	str	r2, [r3]

	PDATF = ~0;
 c101db8:	e59f30ac 	ldr	r3, [pc, #172]	; c101e6c <port_init+0x15c>
 c101dbc:	e3e02000 	mvn	r2, #0
 c101dc0:	e5832000 	str	r2, [r3]
	PCONF = 0x251a;
 c101dc4:	e59f30a4 	ldr	r3, [pc, #164]	; c101e70 <port_init+0x160>
 c101dc8:	e59f20a4 	ldr	r2, [pc, #164]	; c101e74 <port_init+0x164>
 c101dcc:	e5832000 	str	r2, [r3]
	PUPF  = 0x74;
 c101dd0:	e59f30a0 	ldr	r3, [pc, #160]	; c101e78 <port_init+0x168>
 c101dd4:	e3a02074 	mov	r2, #116	; 0x74
 c101dd8:	e5832000 	str	r2, [r3]

	PDATG = ~0;
 c101ddc:	e59f3098 	ldr	r3, [pc, #152]	; c101e7c <port_init+0x16c>
 c101de0:	e3e02000 	mvn	r2, #0
 c101de4:	e5832000 	str	r2, [r3]
	PCONG = 0xf5ff;
 c101de8:	e59f3090 	ldr	r3, [pc, #144]	; c101e80 <port_init+0x170>
 c101dec:	e59f2090 	ldr	r2, [pc, #144]	; c101e84 <port_init+0x174>
 c101df0:	e5832000 	str	r2, [r3]
	PUPG  = 0x30;
 c101df4:	e59f308c 	ldr	r3, [pc, #140]	; c101e88 <port_init+0x178>
 c101df8:	e3a02030 	mov	r2, #48	; 0x30
 c101dfc:	e5832000 	str	r2, [r3]

	SPUCR = 0x7;
 c101e00:	e59f3084 	ldr	r3, [pc, #132]	; c101e8c <port_init+0x17c>
 c101e04:	e3a02007 	mov	r2, #7
 c101e08:	e5832000 	str	r2, [r3]

	EXTINT = 0x22000220;
 c101e0c:	e59f307c 	ldr	r3, [pc, #124]	; c101e90 <port_init+0x180>
 c101e10:	e59f207c 	ldr	r2, [pc, #124]	; c101e94 <port_init+0x184>
 c101e14:	e5832000 	str	r2, [r3]
}
 c101e18:	e24bd00c 	sub	sp, fp, #12
 c101e1c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101e20:	e12fff1e 	bx	lr
 c101e24:	01d20004 	.word	0x01d20004
 c101e28:	01d20000 	.word	0x01d20000
 c101e2c:	01d2000c 	.word	0x01d2000c
 c101e30:	01d20008 	.word	0x01d20008
 c101e34:	0000014f 	.word	0x0000014f
 c101e38:	01d20014 	.word	0x01d20014
 c101e3c:	01d20010 	.word	0x01d20010
 c101e40:	5ff555ff 	.word	0x5ff555ff
 c101e44:	01d20018 	.word	0x01d20018
 c101e48:	000094fb 	.word	0x000094fb
 c101e4c:	01d20020 	.word	0x01d20020
 c101e50:	01d2001c 	.word	0x01d2001c
 c101e54:	0000aaaa 	.word	0x0000aaaa
 c101e58:	01d20024 	.word	0x01d20024
 c101e5c:	01d2002c 	.word	0x01d2002c
 c101e60:	01d20028 	.word	0x01d20028
 c101e64:	000255a9 	.word	0x000255a9
 c101e68:	01d20030 	.word	0x01d20030
 c101e6c:	01d20038 	.word	0x01d20038
 c101e70:	01d20034 	.word	0x01d20034
 c101e74:	0000251a 	.word	0x0000251a
 c101e78:	01d2003c 	.word	0x01d2003c
 c101e7c:	01d20044 	.word	0x01d20044
 c101e80:	01d20040 	.word	0x01d20040
 c101e84:	0000f5ff 	.word	0x0000f5ff
 c101e88:	01d20048 	.word	0x01d20048
 c101e8c:	01d2004c 	.word	0x01d2004c
 c101e90:	01d20050 	.word	0x01d20050
 c101e94:	22000220 	.word	0x22000220

0c101e98 <install_dummy_isr>:

static inline void install_dummy_isr( void )
{ 
 c101e98:	e1a0c00d 	mov	ip, sp
 c101e9c:	e92dd800 	push	{fp, ip, lr, pc}
 c101ea0:	e24cb004 	sub	fp, ip, #4
    pISR_UNDEF    = (uint32) isr_UNDEF_dummy;
 c101ea4:	e59f3184 	ldr	r3, [pc, #388]	; c102030 <install_dummy_isr+0x198>
 c101ea8:	e59f2184 	ldr	r2, [pc, #388]	; c102034 <install_dummy_isr+0x19c>
 c101eac:	e5832000 	str	r2, [r3]
    pISR_SWI      = (uint32) isr_SWI_dummy;
 c101eb0:	e59f3180 	ldr	r3, [pc, #384]	; c102038 <install_dummy_isr+0x1a0>
 c101eb4:	e59f2180 	ldr	r2, [pc, #384]	; c10203c <install_dummy_isr+0x1a4>
 c101eb8:	e5832000 	str	r2, [r3]
    pISR_IRQ      = (uint32) isr_IRQ_dummy;
 c101ebc:	e59f317c 	ldr	r3, [pc, #380]	; c102040 <install_dummy_isr+0x1a8>
 c101ec0:	e59f217c 	ldr	r2, [pc, #380]	; c102044 <install_dummy_isr+0x1ac>
 c101ec4:	e5832000 	str	r2, [r3]
    pISR_FIQ      = (uint32) isr_FIQ_dummy;
 c101ec8:	e59f3178 	ldr	r3, [pc, #376]	; c102048 <install_dummy_isr+0x1b0>
 c101ecc:	e59f2178 	ldr	r2, [pc, #376]	; c10204c <install_dummy_isr+0x1b4>
 c101ed0:	e5832000 	str	r2, [r3]
    pISR_PABORT   = (uint32) isr_PABORT_dummy;
 c101ed4:	e59f3174 	ldr	r3, [pc, #372]	; c102050 <install_dummy_isr+0x1b8>
 c101ed8:	e59f2174 	ldr	r2, [pc, #372]	; c102054 <install_dummy_isr+0x1bc>
 c101edc:	e5832000 	str	r2, [r3]
    pISR_DABORT   = (uint32) isr_DABORT_dummy;
 c101ee0:	e59f3170 	ldr	r3, [pc, #368]	; c102058 <install_dummy_isr+0x1c0>
 c101ee4:	e59f2170 	ldr	r2, [pc, #368]	; c10205c <install_dummy_isr+0x1c4>
 c101ee8:	e5832000 	str	r2, [r3]
    pISR_ADC	  = (uint32) isr_ADC_dummy;
 c101eec:	e59f316c 	ldr	r3, [pc, #364]	; c102060 <install_dummy_isr+0x1c8>
 c101ef0:	e59f216c 	ldr	r2, [pc, #364]	; c102064 <install_dummy_isr+0x1cc>
 c101ef4:	e5832000 	str	r2, [r3]
    pISR_RTC	  = (uint32) isr_RTC_dummy;
 c101ef8:	e59f3168 	ldr	r3, [pc, #360]	; c102068 <install_dummy_isr+0x1d0>
 c101efc:	e59f2168 	ldr	r2, [pc, #360]	; c10206c <install_dummy_isr+0x1d4>
 c101f00:	e5832000 	str	r2, [r3]
    pISR_UTXD1    = (uint32) isr_UTXD1_dummy;
 c101f04:	e59f3164 	ldr	r3, [pc, #356]	; c102070 <install_dummy_isr+0x1d8>
 c101f08:	e59f2164 	ldr	r2, [pc, #356]	; c102074 <install_dummy_isr+0x1dc>
 c101f0c:	e5832000 	str	r2, [r3]
    pISR_UTXD0	  = (uint32) isr_UTXD0_dummy;
 c101f10:	e59f3160 	ldr	r3, [pc, #352]	; c102078 <install_dummy_isr+0x1e0>
 c101f14:	e59f2160 	ldr	r2, [pc, #352]	; c10207c <install_dummy_isr+0x1e4>
 c101f18:	e5832000 	str	r2, [r3]
    pISR_SIO	  = (uint32) isr_SIO_dummy;
 c101f1c:	e59f315c 	ldr	r3, [pc, #348]	; c102080 <install_dummy_isr+0x1e8>
 c101f20:	e59f215c 	ldr	r2, [pc, #348]	; c102084 <install_dummy_isr+0x1ec>
 c101f24:	e5832000 	str	r2, [r3]
    pISR_IIC	  = (uint32) isr_IIC_dummy;
 c101f28:	e59f3158 	ldr	r3, [pc, #344]	; c102088 <install_dummy_isr+0x1f0>
 c101f2c:	e59f2158 	ldr	r2, [pc, #344]	; c10208c <install_dummy_isr+0x1f4>
 c101f30:	e5832000 	str	r2, [r3]
    pISR_URXD1	  = (uint32) isr_URXD1_dummy;
 c101f34:	e59f3154 	ldr	r3, [pc, #340]	; c102090 <install_dummy_isr+0x1f8>
 c101f38:	e59f2154 	ldr	r2, [pc, #340]	; c102094 <install_dummy_isr+0x1fc>
 c101f3c:	e5832000 	str	r2, [r3]
    pISR_URXD0 	  = (uint32) isr_URXD0_dummy;
 c101f40:	e59f3150 	ldr	r3, [pc, #336]	; c102098 <install_dummy_isr+0x200>
 c101f44:	e59f2150 	ldr	r2, [pc, #336]	; c10209c <install_dummy_isr+0x204>
 c101f48:	e5832000 	str	r2, [r3]
	pISR_TIMER5   = (uint32) isr_TIMER5_dummy;
 c101f4c:	e59f314c 	ldr	r3, [pc, #332]	; c1020a0 <install_dummy_isr+0x208>
 c101f50:	e59f214c 	ldr	r2, [pc, #332]	; c1020a4 <install_dummy_isr+0x20c>
 c101f54:	e5832000 	str	r2, [r3]
	pISR_TIMER4   = (uint32) isr_TIMER4_dummy;
 c101f58:	e59f3148 	ldr	r3, [pc, #328]	; c1020a8 <install_dummy_isr+0x210>
 c101f5c:	e59f2148 	ldr	r2, [pc, #328]	; c1020ac <install_dummy_isr+0x214>
 c101f60:	e5832000 	str	r2, [r3]
	pISR_TIMER3   = (uint32) isr_TIMER3_dummy;
 c101f64:	e59f3144 	ldr	r3, [pc, #324]	; c1020b0 <install_dummy_isr+0x218>
 c101f68:	e59f2144 	ldr	r2, [pc, #324]	; c1020b4 <install_dummy_isr+0x21c>
 c101f6c:	e5832000 	str	r2, [r3]
	pISR_TIMER2   = (uint32) isr_TIMER2_dummy;
 c101f70:	e59f3140 	ldr	r3, [pc, #320]	; c1020b8 <install_dummy_isr+0x220>
 c101f74:	e59f2140 	ldr	r2, [pc, #320]	; c1020bc <install_dummy_isr+0x224>
 c101f78:	e5832000 	str	r2, [r3]
	pISR_TIMER1   = (uint32) isr_TIMER1_dummy;
 c101f7c:	e59f313c 	ldr	r3, [pc, #316]	; c1020c0 <install_dummy_isr+0x228>
 c101f80:	e59f213c 	ldr	r2, [pc, #316]	; c1020c4 <install_dummy_isr+0x22c>
 c101f84:	e5832000 	str	r2, [r3]
	pISR_TIMER0   = (uint32) isr_TIMER0_dummy;
 c101f88:	e59f3138 	ldr	r3, [pc, #312]	; c1020c8 <install_dummy_isr+0x230>
 c101f8c:	e59f2138 	ldr	r2, [pc, #312]	; c1020cc <install_dummy_isr+0x234>
 c101f90:	e5832000 	str	r2, [r3]
	pISR_UERR01   = (uint32) isr_UERR01_dummy;
 c101f94:	e59f3134 	ldr	r3, [pc, #308]	; c1020d0 <install_dummy_isr+0x238>
 c101f98:	e59f2134 	ldr	r2, [pc, #308]	; c1020d4 <install_dummy_isr+0x23c>
 c101f9c:	e5832000 	str	r2, [r3]
	pISR_WDT	  = (uint32) isr_WDT_dummy;
 c101fa0:	e59f3130 	ldr	r3, [pc, #304]	; c1020d8 <install_dummy_isr+0x240>
 c101fa4:	e59f2130 	ldr	r2, [pc, #304]	; c1020dc <install_dummy_isr+0x244>
 c101fa8:	e5832000 	str	r2, [r3]
	pISR_BDMA1	  = (uint32) isr_BDMA1_dummy;
 c101fac:	e59f312c 	ldr	r3, [pc, #300]	; c1020e0 <install_dummy_isr+0x248>
 c101fb0:	e59f212c 	ldr	r2, [pc, #300]	; c1020e4 <install_dummy_isr+0x24c>
 c101fb4:	e5832000 	str	r2, [r3]
	pISR_BDMA0	  = (uint32) isr_BDMA0_dummy;
 c101fb8:	e59f3128 	ldr	r3, [pc, #296]	; c1020e8 <install_dummy_isr+0x250>
 c101fbc:	e59f2128 	ldr	r2, [pc, #296]	; c1020ec <install_dummy_isr+0x254>
 c101fc0:	e5832000 	str	r2, [r3]
	pISR_ZDMA1	  = (uint32) isr_ZDMA1_dummy;
 c101fc4:	e59f3124 	ldr	r3, [pc, #292]	; c1020f0 <install_dummy_isr+0x258>
 c101fc8:	e59f2124 	ldr	r2, [pc, #292]	; c1020f4 <install_dummy_isr+0x25c>
 c101fcc:	e5832000 	str	r2, [r3]
	pISR_ZDMA0	  = (uint32) isr_ZDMA0_dummy;
 c101fd0:	e59f3120 	ldr	r3, [pc, #288]	; c1020f8 <install_dummy_isr+0x260>
 c101fd4:	e59f2120 	ldr	r2, [pc, #288]	; c1020fc <install_dummy_isr+0x264>
 c101fd8:	e5832000 	str	r2, [r3]
	pISR_TICK	  = (uint32) isr_TICK_dummy;
 c101fdc:	e59f311c 	ldr	r3, [pc, #284]	; c102100 <install_dummy_isr+0x268>
 c101fe0:	e59f211c 	ldr	r2, [pc, #284]	; c102104 <install_dummy_isr+0x26c>
 c101fe4:	e5832000 	str	r2, [r3]
	pISR_PB		  = (uint32) isr_PB_dummy;
 c101fe8:	e59f3118 	ldr	r3, [pc, #280]	; c102108 <install_dummy_isr+0x270>
 c101fec:	e59f2118 	ldr	r2, [pc, #280]	; c10210c <install_dummy_isr+0x274>
 c101ff0:	e5832000 	str	r2, [r3]
	pISR_ETHERNET = (uint32) isr_ETHERNET_dummy;
 c101ff4:	e59f3114 	ldr	r3, [pc, #276]	; c102110 <install_dummy_isr+0x278>
 c101ff8:	e59f2114 	ldr	r2, [pc, #276]	; c102114 <install_dummy_isr+0x27c>
 c101ffc:	e5832000 	str	r2, [r3]
	pISR_TS 	  = (uint32) isr_TS_dummy;
 c102000:	e59f3110 	ldr	r3, [pc, #272]	; c102118 <install_dummy_isr+0x280>
 c102004:	e59f2110 	ldr	r2, [pc, #272]	; c10211c <install_dummy_isr+0x284>
 c102008:	e5832000 	str	r2, [r3]
	pISR_KEYPAD	  = (uint32) isr_KEYPAD_dummy;
 c10200c:	e59f310c 	ldr	r3, [pc, #268]	; c102120 <install_dummy_isr+0x288>
 c102010:	e59f210c 	ldr	r2, [pc, #268]	; c102124 <install_dummy_isr+0x28c>
 c102014:	e5832000 	str	r2, [r3]
	pISR_USB 	  = (uint32) isr_USB_dummy;
 c102018:	e59f3108 	ldr	r3, [pc, #264]	; c102128 <install_dummy_isr+0x290>
 c10201c:	e59f2108 	ldr	r2, [pc, #264]	; c10212c <install_dummy_isr+0x294>
 c102020:	e5832000 	str	r2, [r3]
}        
 c102024:	e24bd00c 	sub	sp, fp, #12
 c102028:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10202c:	e12fff1e 	bx	lr
 c102030:	0c7fff04 	.word	0x0c7fff04
 c102034:	0c10215c 	.word	0x0c10215c
 c102038:	0c7fff08 	.word	0x0c7fff08
 c10203c:	0c102130 	.word	0x0c102130
 c102040:	0c7fff18 	.word	0x0c7fff18
 c102044:	0c102188 	.word	0x0c102188
 c102048:	0c7fff1c 	.word	0x0c7fff1c
 c10204c:	0c1021b4 	.word	0x0c1021b4
 c102050:	0c7fff0c 	.word	0x0c7fff0c
 c102054:	0c1021e0 	.word	0x0c1021e0
 c102058:	0c7fff10 	.word	0x0c7fff10
 c10205c:	0c10220c 	.word	0x0c10220c
 c102060:	0c7fff20 	.word	0x0c7fff20
 c102064:	0c102238 	.word	0x0c102238
 c102068:	0c7fff24 	.word	0x0c7fff24
 c10206c:	0c102264 	.word	0x0c102264
 c102070:	0c7fff28 	.word	0x0c7fff28
 c102074:	0c102290 	.word	0x0c102290
 c102078:	0c7fff2c 	.word	0x0c7fff2c
 c10207c:	0c1022bc 	.word	0x0c1022bc
 c102080:	0c7fff30 	.word	0x0c7fff30
 c102084:	0c1022e8 	.word	0x0c1022e8
 c102088:	0c7fff34 	.word	0x0c7fff34
 c10208c:	0c102314 	.word	0x0c102314
 c102090:	0c7fff38 	.word	0x0c7fff38
 c102094:	0c102340 	.word	0x0c102340
 c102098:	0c7fff3c 	.word	0x0c7fff3c
 c10209c:	0c10236c 	.word	0x0c10236c
 c1020a0:	0c7fff40 	.word	0x0c7fff40
 c1020a4:	0c102398 	.word	0x0c102398
 c1020a8:	0c7fff44 	.word	0x0c7fff44
 c1020ac:	0c1023c4 	.word	0x0c1023c4
 c1020b0:	0c7fff48 	.word	0x0c7fff48
 c1020b4:	0c1023f0 	.word	0x0c1023f0
 c1020b8:	0c7fff4c 	.word	0x0c7fff4c
 c1020bc:	0c10241c 	.word	0x0c10241c
 c1020c0:	0c7fff50 	.word	0x0c7fff50
 c1020c4:	0c102448 	.word	0x0c102448
 c1020c8:	0c7fff54 	.word	0x0c7fff54
 c1020cc:	0c102474 	.word	0x0c102474
 c1020d0:	0c7fff58 	.word	0x0c7fff58
 c1020d4:	0c1024a0 	.word	0x0c1024a0
 c1020d8:	0c7fff5c 	.word	0x0c7fff5c
 c1020dc:	0c1024cc 	.word	0x0c1024cc
 c1020e0:	0c7fff60 	.word	0x0c7fff60
 c1020e4:	0c1024f8 	.word	0x0c1024f8
 c1020e8:	0c7fff64 	.word	0x0c7fff64
 c1020ec:	0c102524 	.word	0x0c102524
 c1020f0:	0c7fff68 	.word	0x0c7fff68
 c1020f4:	0c102550 	.word	0x0c102550
 c1020f8:	0c7fff6c 	.word	0x0c7fff6c
 c1020fc:	0c10257c 	.word	0x0c10257c
 c102100:	0c7fff70 	.word	0x0c7fff70
 c102104:	0c1025a8 	.word	0x0c1025a8
 c102108:	0c7fff74 	.word	0x0c7fff74
 c10210c:	0c1025d4 	.word	0x0c1025d4
 c102110:	0c7fff78 	.word	0x0c7fff78
 c102114:	0c102600 	.word	0x0c102600
 c102118:	0c7fff7c 	.word	0x0c7fff7c
 c10211c:	0c10262c 	.word	0x0c10262c
 c102120:	0c7fff80 	.word	0x0c7fff80
 c102124:	0c102658 	.word	0x0c102658
 c102128:	0c7fff84 	.word	0x0c7fff84
 c10212c:	0c102684 	.word	0x0c102684

0c102130 <isr_SWI_dummy>:

void isr_SWI_dummy( void ) {
 c102130:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102134:	e1a0c00d 	mov	ip, sp
 c102138:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10213c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy");
 c102140:	e59f0010 	ldr	r0, [pc, #16]	; c102158 <isr_SWI_dummy+0x28>
 c102144:	eb0004e9 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102148:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10214c:	e3a02075 	mov	r2, #117	; 0x75
 c102150:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102154:	eafffffe 	b	c102154 <isr_SWI_dummy+0x24>
 c102158:	0c104e74 	.word	0x0c104e74

0c10215c <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy( void ) {
 c10215c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102160:	e1a0c00d 	mov	ip, sp
 c102164:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102168:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy");
 c10216c:	e59f0010 	ldr	r0, [pc, #16]	; c102184 <isr_UNDEF_dummy+0x28>
 c102170:	eb0004de 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102174:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102178:	e3a02075 	mov	r2, #117	; 0x75
 c10217c:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102180:	eafffffe 	b	c102180 <isr_UNDEF_dummy+0x24>
 c102184:	0c104ea0 	.word	0x0c104ea0

0c102188 <isr_IRQ_dummy>:
}

void isr_IRQ_dummy( void ) {
 c102188:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10218c:	e1a0c00d 	mov	ip, sp
 c102190:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102194:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy");
 c102198:	e59f0010 	ldr	r0, [pc, #16]	; c1021b0 <isr_IRQ_dummy+0x28>
 c10219c:	eb0004d3 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1021a0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1021a4:	e3a02075 	mov	r2, #117	; 0x75
 c1021a8:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1021ac:	eafffffe 	b	c1021ac <isr_IRQ_dummy+0x24>
 c1021b0:	0c104ed0 	.word	0x0c104ed0

0c1021b4 <isr_FIQ_dummy>:
}

void isr_FIQ_dummy( void ) {
 c1021b4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1021b8:	e1a0c00d 	mov	ip, sp
 c1021bc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1021c0:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy");
 c1021c4:	e59f0010 	ldr	r0, [pc, #16]	; c1021dc <isr_FIQ_dummy+0x28>
 c1021c8:	eb0004c8 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1021cc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1021d0:	e3a02075 	mov	r2, #117	; 0x75
 c1021d4:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1021d8:	eafffffe 	b	c1021d8 <isr_FIQ_dummy+0x24>
 c1021dc:	0c104efc 	.word	0x0c104efc

0c1021e0 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy( void ) {
 c1021e0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1021e4:	e1a0c00d 	mov	ip, sp
 c1021e8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1021ec:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy");
 c1021f0:	e59f0010 	ldr	r0, [pc, #16]	; c102208 <isr_PABORT_dummy+0x28>
 c1021f4:	eb0004bd 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1021f8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1021fc:	e3a02075 	mov	r2, #117	; 0x75
 c102200:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102204:	eafffffe 	b	c102204 <isr_PABORT_dummy+0x24>
 c102208:	0c104f28 	.word	0x0c104f28

0c10220c <isr_DABORT_dummy>:
}

void isr_DABORT_dummy( void ) {
 c10220c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102210:	e1a0c00d 	mov	ip, sp
 c102214:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102218:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy");
 c10221c:	e59f0010 	ldr	r0, [pc, #16]	; c102234 <isr_DABORT_dummy+0x28>
 c102220:	eb0004b2 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102224:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102228:	e3a02075 	mov	r2, #117	; 0x75
 c10222c:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102230:	eafffffe 	b	c102230 <isr_DABORT_dummy+0x24>
 c102234:	0c104f58 	.word	0x0c104f58

0c102238 <isr_ADC_dummy>:
}

void isr_ADC_dummy( void ) {
 c102238:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10223c:	e1a0c00d 	mov	ip, sp
 c102240:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102244:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy");
 c102248:	e59f0010 	ldr	r0, [pc, #16]	; c102260 <isr_ADC_dummy+0x28>
 c10224c:	eb0004a7 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102250:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102254:	e3a02075 	mov	r2, #117	; 0x75
 c102258:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c10225c:	eafffffe 	b	c10225c <isr_ADC_dummy+0x24>
 c102260:	0c104f88 	.word	0x0c104f88

0c102264 <isr_RTC_dummy>:
}

void isr_RTC_dummy( void ) {
 c102264:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102268:	e1a0c00d 	mov	ip, sp
 c10226c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102270:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy");
 c102274:	e59f0010 	ldr	r0, [pc, #16]	; c10228c <isr_RTC_dummy+0x28>
 c102278:	eb00049c 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c10227c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102280:	e3a02075 	mov	r2, #117	; 0x75
 c102284:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102288:	eafffffe 	b	c102288 <isr_RTC_dummy+0x24>
 c10228c:	0c104fb4 	.word	0x0c104fb4

0c102290 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy( void ) {
 c102290:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102294:	e1a0c00d 	mov	ip, sp
 c102298:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10229c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy");
 c1022a0:	e59f0010 	ldr	r0, [pc, #16]	; c1022b8 <isr_UTXD1_dummy+0x28>
 c1022a4:	eb000491 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1022a8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1022ac:	e3a02075 	mov	r2, #117	; 0x75
 c1022b0:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1022b4:	eafffffe 	b	c1022b4 <isr_UTXD1_dummy+0x24>
 c1022b8:	0c104fe0 	.word	0x0c104fe0

0c1022bc <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy( void ) {
 c1022bc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1022c0:	e1a0c00d 	mov	ip, sp
 c1022c4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1022c8:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy");
 c1022cc:	e59f0010 	ldr	r0, [pc, #16]	; c1022e4 <isr_UTXD0_dummy+0x28>
 c1022d0:	eb000486 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1022d4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1022d8:	e3a02075 	mov	r2, #117	; 0x75
 c1022dc:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1022e0:	eafffffe 	b	c1022e0 <isr_UTXD0_dummy+0x24>
 c1022e4:	0c105010 	.word	0x0c105010

0c1022e8 <isr_SIO_dummy>:
}

void isr_SIO_dummy( void ) {
 c1022e8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1022ec:	e1a0c00d 	mov	ip, sp
 c1022f0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1022f4:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy");
 c1022f8:	e59f0010 	ldr	r0, [pc, #16]	; c102310 <isr_SIO_dummy+0x28>
 c1022fc:	eb00047b 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102300:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102304:	e3a02075 	mov	r2, #117	; 0x75
 c102308:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c10230c:	eafffffe 	b	c10230c <isr_SIO_dummy+0x24>
 c102310:	0c105040 	.word	0x0c105040

0c102314 <isr_IIC_dummy>:
}

void isr_IIC_dummy( void ) {
 c102314:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102318:	e1a0c00d 	mov	ip, sp
 c10231c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102320:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy");
 c102324:	e59f0010 	ldr	r0, [pc, #16]	; c10233c <isr_IIC_dummy+0x28>
 c102328:	eb000470 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c10232c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102330:	e3a02075 	mov	r2, #117	; 0x75
 c102334:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102338:	eafffffe 	b	c102338 <isr_IIC_dummy+0x24>
 c10233c:	0c10506c 	.word	0x0c10506c

0c102340 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy( void ) {
 c102340:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102344:	e1a0c00d 	mov	ip, sp
 c102348:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10234c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD1_dummy");
 c102350:	e59f0010 	ldr	r0, [pc, #16]	; c102368 <isr_URXD1_dummy+0x28>
 c102354:	eb000465 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102358:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10235c:	e3a02075 	mov	r2, #117	; 0x75
 c102360:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102364:	eafffffe 	b	c102364 <isr_URXD1_dummy+0x24>
 c102368:	0c105098 	.word	0x0c105098

0c10236c <isr_URXD0_dummy>:
}

void isr_URXD0_dummy( void ) {
 c10236c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102370:	e1a0c00d 	mov	ip, sp
 c102374:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102378:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD0_dummy");
 c10237c:	e59f0010 	ldr	r0, [pc, #16]	; c102394 <isr_URXD0_dummy+0x28>
 c102380:	eb00045a 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102384:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102388:	e3a02075 	mov	r2, #117	; 0x75
 c10238c:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102390:	eafffffe 	b	c102390 <isr_URXD0_dummy+0x24>
 c102394:	0c1050c8 	.word	0x0c1050c8

0c102398 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy( void ) {
 c102398:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10239c:	e1a0c00d 	mov	ip, sp
 c1023a0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1023a4:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy");
 c1023a8:	e59f0010 	ldr	r0, [pc, #16]	; c1023c0 <isr_TIMER5_dummy+0x28>
 c1023ac:	eb00044f 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1023b0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1023b4:	e3a02075 	mov	r2, #117	; 0x75
 c1023b8:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1023bc:	eafffffe 	b	c1023bc <isr_TIMER5_dummy+0x24>
 c1023c0:	0c1050f8 	.word	0x0c1050f8

0c1023c4 <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy( void ) {
 c1023c4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1023c8:	e1a0c00d 	mov	ip, sp
 c1023cc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1023d0:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy");
 c1023d4:	e59f0010 	ldr	r0, [pc, #16]	; c1023ec <isr_TIMER4_dummy+0x28>
 c1023d8:	eb000444 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1023dc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1023e0:	e3a02075 	mov	r2, #117	; 0x75
 c1023e4:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1023e8:	eafffffe 	b	c1023e8 <isr_TIMER4_dummy+0x24>
 c1023ec:	0c105128 	.word	0x0c105128

0c1023f0 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy( void ) {
 c1023f0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1023f4:	e1a0c00d 	mov	ip, sp
 c1023f8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1023fc:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy");
 c102400:	e59f0010 	ldr	r0, [pc, #16]	; c102418 <isr_TIMER3_dummy+0x28>
 c102404:	eb000439 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102408:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10240c:	e3a02075 	mov	r2, #117	; 0x75
 c102410:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102414:	eafffffe 	b	c102414 <isr_TIMER3_dummy+0x24>
 c102418:	0c105158 	.word	0x0c105158

0c10241c <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy( void ) {
 c10241c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102420:	e1a0c00d 	mov	ip, sp
 c102424:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102428:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c10242c:	e59f0010 	ldr	r0, [pc, #16]	; c102444 <isr_TIMER2_dummy+0x28>
 c102430:	eb00042e 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102434:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102438:	e3a02075 	mov	r2, #117	; 0x75
 c10243c:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102440:	eafffffe 	b	c102440 <isr_TIMER2_dummy+0x24>
 c102444:	0c105188 	.word	0x0c105188

0c102448 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy( void ) {
 c102448:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10244c:	e1a0c00d 	mov	ip, sp
 c102450:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102454:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER1_dummy");
 c102458:	e59f0010 	ldr	r0, [pc, #16]	; c102470 <isr_TIMER1_dummy+0x28>
 c10245c:	eb000423 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102460:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102464:	e3a02075 	mov	r2, #117	; 0x75
 c102468:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c10246c:	eafffffe 	b	c10246c <isr_TIMER1_dummy+0x24>
 c102470:	0c1051b8 	.word	0x0c1051b8

0c102474 <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy( void ) {
 c102474:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102478:	e1a0c00d 	mov	ip, sp
 c10247c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102480:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy");
 c102484:	e59f0010 	ldr	r0, [pc, #16]	; c10249c <isr_TIMER0_dummy+0x28>
 c102488:	eb000418 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c10248c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102490:	e3a02075 	mov	r2, #117	; 0x75
 c102494:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102498:	eafffffe 	b	c102498 <isr_TIMER0_dummy+0x24>
 c10249c:	0c1051e8 	.word	0x0c1051e8

0c1024a0 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy( void ) {
 c1024a0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1024a4:	e1a0c00d 	mov	ip, sp
 c1024a8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1024ac:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy");
 c1024b0:	e59f0010 	ldr	r0, [pc, #16]	; c1024c8 <isr_UERR01_dummy+0x28>
 c1024b4:	eb00040d 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1024b8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1024bc:	e3a02075 	mov	r2, #117	; 0x75
 c1024c0:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1024c4:	eafffffe 	b	c1024c4 <isr_UERR01_dummy+0x24>
 c1024c8:	0c105218 	.word	0x0c105218

0c1024cc <isr_WDT_dummy>:
}

void isr_WDT_dummy( void ) {
 c1024cc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1024d0:	e1a0c00d 	mov	ip, sp
 c1024d4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1024d8:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy");
 c1024dc:	e59f0010 	ldr	r0, [pc, #16]	; c1024f4 <isr_WDT_dummy+0x28>
 c1024e0:	eb000402 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1024e4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1024e8:	e3a02075 	mov	r2, #117	; 0x75
 c1024ec:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1024f0:	eafffffe 	b	c1024f0 <isr_WDT_dummy+0x24>
 c1024f4:	0c105248 	.word	0x0c105248

0c1024f8 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy( void ) {
 c1024f8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1024fc:	e1a0c00d 	mov	ip, sp
 c102500:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102504:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy");
 c102508:	e59f0010 	ldr	r0, [pc, #16]	; c102520 <isr_BDMA1_dummy+0x28>
 c10250c:	eb0003f7 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102510:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102514:	e3a02075 	mov	r2, #117	; 0x75
 c102518:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c10251c:	eafffffe 	b	c10251c <isr_BDMA1_dummy+0x24>
 c102520:	0c105274 	.word	0x0c105274

0c102524 <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy( void ) {
 c102524:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102528:	e1a0c00d 	mov	ip, sp
 c10252c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102530:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy");
 c102534:	e59f0010 	ldr	r0, [pc, #16]	; c10254c <isr_BDMA0_dummy+0x28>
 c102538:	eb0003ec 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c10253c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102540:	e3a02075 	mov	r2, #117	; 0x75
 c102544:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102548:	eafffffe 	b	c102548 <isr_BDMA0_dummy+0x24>
 c10254c:	0c1052a4 	.word	0x0c1052a4

0c102550 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy( void ) {
 c102550:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102554:	e1a0c00d 	mov	ip, sp
 c102558:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10255c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy");
 c102560:	e59f0010 	ldr	r0, [pc, #16]	; c102578 <isr_ZDMA1_dummy+0x28>
 c102564:	eb0003e1 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102568:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10256c:	e3a02075 	mov	r2, #117	; 0x75
 c102570:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102574:	eafffffe 	b	c102574 <isr_ZDMA1_dummy+0x24>
 c102578:	0c1052d4 	.word	0x0c1052d4

0c10257c <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy( void ) {
 c10257c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102580:	e1a0c00d 	mov	ip, sp
 c102584:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102588:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy");
 c10258c:	e59f0010 	ldr	r0, [pc, #16]	; c1025a4 <isr_ZDMA0_dummy+0x28>
 c102590:	eb0003d6 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102594:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102598:	e3a02075 	mov	r2, #117	; 0x75
 c10259c:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1025a0:	eafffffe 	b	c1025a0 <isr_ZDMA0_dummy+0x24>
 c1025a4:	0c105304 	.word	0x0c105304

0c1025a8 <isr_TICK_dummy>:
}

void isr_TICK_dummy( void ) {
 c1025a8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1025ac:	e1a0c00d 	mov	ip, sp
 c1025b0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1025b4:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy" );
 c1025b8:	e59f0010 	ldr	r0, [pc, #16]	; c1025d0 <isr_TICK_dummy+0x28>
 c1025bc:	eb0003cb 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1025c0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1025c4:	e3a02075 	mov	r2, #117	; 0x75
 c1025c8:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1025cc:	eafffffe 	b	c1025cc <isr_TICK_dummy+0x24>
 c1025d0:	0c105334 	.word	0x0c105334

0c1025d4 <isr_PB_dummy>:
}

void isr_PB_dummy( void ) {
 c1025d4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1025d8:	e1a0c00d 	mov	ip, sp
 c1025dc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1025e0:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PB_dummy");
 c1025e4:	e59f0010 	ldr	r0, [pc, #16]	; c1025fc <isr_PB_dummy+0x28>
 c1025e8:	eb0003c0 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c1025ec:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1025f0:	e3a02075 	mov	r2, #117	; 0x75
 c1025f4:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1025f8:	eafffffe 	b	c1025f8 <isr_PB_dummy+0x24>
 c1025fc:	0c105364 	.word	0x0c105364

0c102600 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy( void ) {
 c102600:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102604:	e1a0c00d 	mov	ip, sp
 c102608:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10260c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy");
 c102610:	e59f0010 	ldr	r0, [pc, #16]	; c102628 <isr_ETHERNET_dummy+0x28>
 c102614:	eb0003b5 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102618:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10261c:	e3a02075 	mov	r2, #117	; 0x75
 c102620:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102624:	eafffffe 	b	c102624 <isr_ETHERNET_dummy+0x24>
 c102628:	0c105390 	.word	0x0c105390

0c10262c <isr_TS_dummy>:
}

void isr_TS_dummy( void ) {
 c10262c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102630:	e1a0c00d 	mov	ip, sp
 c102634:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102638:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TS_dummy");
 c10263c:	e59f0010 	ldr	r0, [pc, #16]	; c102654 <isr_TS_dummy+0x28>
 c102640:	eb0003aa 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102644:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102648:	e3a02075 	mov	r2, #117	; 0x75
 c10264c:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c102650:	eafffffe 	b	c102650 <isr_TS_dummy+0x24>
 c102654:	0c1053c4 	.word	0x0c1053c4

0c102658 <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy( void ) {
 c102658:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10265c:	e1a0c00d 	mov	ip, sp
 c102660:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102664:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy");
 c102668:	e59f0010 	ldr	r0, [pc, #16]	; c102680 <isr_KEYPAD_dummy+0x28>
 c10266c:	eb00039f 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c102670:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c102674:	e3a02075 	mov	r2, #117	; 0x75
 c102678:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c10267c:	eafffffe 	b	c10267c <isr_KEYPAD_dummy+0x24>
 c102680:	0c1053f0 	.word	0x0c1053f0

0c102684 <isr_USB_dummy>:
}

void isr_USB_dummy( void ) {
 c102684:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c102688:	e1a0c00d 	mov	ip, sp
 c10268c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c102690:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_USB_dummy");
 c102694:	e59f0010 	ldr	r0, [pc, #16]	; c1026ac <isr_USB_dummy+0x28>
 c102698:	eb000394 	bl	c1034f0 <uart0_puts>
    SEGS = 0x75;
 c10269c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1026a0:	e3a02075 	mov	r2, #117	; 0x75
 c1026a4:	e5c32000 	strb	r2, [r3]
    while(1);     // Detener el sistema
 c1026a8:	eafffffe 	b	c1026a8 <isr_USB_dummy+0x24>
 c1026ac:	0c105420 	.word	0x0c105420

0c1026b0 <show_sys_info>:
}

static inline void show_sys_info( void ) {
 c1026b0:	e1a0c00d 	mov	ip, sp
 c1026b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1026b8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n");
 c1026bc:	e59f0064 	ldr	r0, [pc, #100]	; c102728 <show_sys_info+0x78>
 c1026c0:	eb00038a 	bl	c1034f0 <uart0_puts>
    uart0_puts("****************************\n");
 c1026c4:	e59f0060 	ldr	r0, [pc, #96]	; c10272c <show_sys_info+0x7c>
 c1026c8:	eb000388 	bl	c1034f0 <uart0_puts>
    uart0_puts("        *** WELCOME ***     \n");
 c1026cc:	e59f005c 	ldr	r0, [pc, #92]	; c102730 <show_sys_info+0x80>
 c1026d0:	eb000386 	bl	c1034f0 <uart0_puts>
    uart0_puts("****************************\n\n");
 c1026d4:	e59f0058 	ldr	r0, [pc, #88]	; c102734 <show_sys_info+0x84>
 c1026d8:	eb000384 	bl	c1034f0 <uart0_puts>

    uart0_puts("   FIRMWARE DEVELOPERS:\n");
 c1026dc:	e59f0054 	ldr	r0, [pc, #84]	; c102738 <show_sys_info+0x88>
 c1026e0:	eb000382 	bl	c1034f0 <uart0_puts>
    uart0_puts("     Gabriel Guillermo Saavedra Moreira\n");
 c1026e4:	e59f0050 	ldr	r0, [pc, #80]	; c10273c <show_sys_info+0x8c>
 c1026e8:	eb000380 	bl	c1034f0 <uart0_puts>
    uart0_puts("     Daniel MenÃ©ndez Crespo\n\n");
 c1026ec:	e59f004c 	ldr	r0, [pc, #76]	; c102740 <show_sys_info+0x90>
 c1026f0:	eb00037e 	bl	c1034f0 <uart0_puts>

    uart0_puts("   BOARD INFORMATION:\n");
 c1026f4:	e59f0048 	ldr	r0, [pc, #72]	; c102744 <show_sys_info+0x94>
 c1026f8:	eb00037c 	bl	c1034f0 <uart0_puts>
    uart0_puts("     - Board:   EMBEST S3CEV40\n");
 c1026fc:	e59f0044 	ldr	r0, [pc, #68]	; c102748 <show_sys_info+0x98>
 c102700:	eb00037a 	bl	c1034f0 <uart0_puts>
    uart0_puts("     - CPU:     Samsung S3C44B0X\n");
 c102704:	e59f0040 	ldr	r0, [pc, #64]	; c10274c <show_sys_info+0x9c>
 c102708:	eb000378 	bl	c1034f0 <uart0_puts>
    uart0_puts("     - Version: 24w42a\n\n");
 c10270c:	e59f003c 	ldr	r0, [pc, #60]	; c102750 <show_sys_info+0xa0>
 c102710:	eb000376 	bl	c1034f0 <uart0_puts>

    uart0_puts("****************************\n\n");
 c102714:	e59f0018 	ldr	r0, [pc, #24]	; c102734 <show_sys_info+0x84>
 c102718:	eb000374 	bl	c1034f0 <uart0_puts>
}
 c10271c:	e24bd00c 	sub	sp, fp, #12
 c102720:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102724:	e12fff1e 	bx	lr
 c102728:	0c10544c 	.word	0x0c10544c
 c10272c:	0c105450 	.word	0x0c105450
 c102730:	0c105470 	.word	0x0c105470
 c102734:	0c105490 	.word	0x0c105490
 c102738:	0c1054b0 	.word	0x0c1054b0
 c10273c:	0c1054cc 	.word	0x0c1054cc
 c102740:	0c1054f8 	.word	0x0c1054f8
 c102744:	0c105518 	.word	0x0c105518
 c102748:	0c105530 	.word	0x0c105530
 c10274c:	0c105550 	.word	0x0c105550
 c102750:	0c105574 	.word	0x0c105574

0c102754 <sleep>:

inline void sleep( void )
{
 c102754:	e1a0c00d 	mov	ip, sp
 c102758:	e92dd800 	push	{fp, ip, lr, pc}
 c10275c:	e24cb004 	sub	fp, ip, #4
    CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c102760:	e59f3018 	ldr	r3, [pc, #24]	; c102780 <sleep+0x2c>
 c102764:	e59f2014 	ldr	r2, [pc, #20]	; c102780 <sleep+0x2c>
 c102768:	e5922000 	ldr	r2, [r2]
 c10276c:	e3822004 	orr	r2, r2, #4
 c102770:	e5832000 	str	r2, [r3]
}
 c102774:	e24bd00c 	sub	sp, fp, #12
 c102778:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10277c:	e12fff1e 	bx	lr
 c102780:	01d80004 	.word	0x01d80004

0c102784 <sys_recovery>:

static void sys_recovery( void ) // NO TOCAR
{
 c102784:	e1a0c00d 	mov	ip, sp
 c102788:	e92dd800 	push	{fp, ip, lr, pc}
 c10278c:	e24cb004 	sub	fp, ip, #4
 c102790:	e24dd018 	sub	sp, sp, #24
    uint8 mode;
    uint32 sp, fp;
    uint32 *addrSrc, *addrDst;
    uint32 diffStacks;
    
    asm volatile ( "str sp, %0" : "=m" (sp) : : );    // lee el puntero a la cima de la pila de excepciï¿½n (SP) 
 c102794:	e50bd01c 	str	sp, [fp, #-28]	; 0xffffffe4
    asm volatile ( "str fp, %0" : "=m" (fp) : : );    // lee el puntero al marco de activaciï¿½n (FP) de sys_recovery() en la pila de excepciï¿½n
 c102798:	e50bb020 	str	fp, [fp, #-32]	; 0xffffffe0
    
    GET_OPMODE( &mode );    // lee el modo de ejecuciï¿½n del procesador
 c10279c:	e10f0000 	mrs	r0, CPSR
 c1027a0:	e200001f 	and	r0, r0, #31
 c1027a4:	e54b0015 	strb	r0, [fp, #-21]	; 0xffffffeb
    switch( mode )
 c1027a8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1027ac:	e2433011 	sub	r3, r3, #17
 c1027b0:	e353000a 	cmp	r3, #10
 c1027b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c1027b8:	ea00001e 	b	c102838 <sys_recovery+0xb4>
 c1027bc:	0c1027fc 	.word	0x0c1027fc
 c1027c0:	0c1027e8 	.word	0x0c1027e8
 c1027c4:	0c102838 	.word	0x0c102838
 c1027c8:	0c102838 	.word	0x0c102838
 c1027cc:	0c102838 	.word	0x0c102838
 c1027d0:	0c102838 	.word	0x0c102838
 c1027d4:	0c102810 	.word	0x0c102810
 c1027d8:	0c102838 	.word	0x0c102838
 c1027dc:	0c102838 	.word	0x0c102838
 c1027e0:	0c102838 	.word	0x0c102838
 c1027e4:	0c102824 	.word	0x0c102824
    {
        case IRQMODE:
            diffStacks = IRQSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila IRQ y la SVC
 c1027e8:	e3a03c03 	mov	r3, #768	; 0x300
 c1027ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)IRQSTACK;         // base de la pila IRQ
 c1027f0:	e59f3198 	ldr	r3, [pc, #408]	; c102990 <sys_recovery+0x20c>
 c1027f4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;
 c1027f8:	ea00000f 	b	c10283c <sys_recovery+0xb8>
        case FIQMODE:
            diffStacks = FIQSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila FIQ y la SVC
 c1027fc:	e3a03b01 	mov	r3, #1024	; 0x400
 c102800:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)FIQSTACK;         // base de la pila FIQ
 c102804:	e59f3188 	ldr	r3, [pc, #392]	; c102994 <sys_recovery+0x210>
 c102808:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;
 c10280c:	ea00000a 	b	c10283c <sys_recovery+0xb8>
        case ABTMODE:
            diffStacks = ABTSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila ABT y la SVC
 c102810:	e3a03c02 	mov	r3, #512	; 0x200
 c102814:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)ABTSTACK;         // base de la pila ABT
 c102818:	e59f3178 	ldr	r3, [pc, #376]	; c102998 <sys_recovery+0x214>
 c10281c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;
 c102820:	ea000005 	b	c10283c <sys_recovery+0xb8>
        case UNDMODE:
            diffStacks = UNDSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila UND y la SVC
 c102824:	e3a03c01 	mov	r3, #256	; 0x100
 c102828:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)UNDSTACK;         // base de la pila UND
 c10282c:	e59f3168 	ldr	r3, [pc, #360]	; c10299c <sys_recovery+0x218>
 c102830:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;         
 c102834:	ea000000 	b	c10283c <sys_recovery+0xb8>
        case USRMODE:
            // Habrï¿½a que hacer algo anï¿½logo a lo anterior y ademï¿½s para volver a modo SVC dado que no es vï¿½lido SET_OPMODE( SVCMODE ), es necesario esto:
            // pISR_SWI = (uint32) isr_SWI;
            // SWI( 0 );  
        default:
            while( 1 );                           // aquï¿½ no deberï¿½a llegarse
 c102838:	eafffffe 	b	c102838 <sys_recovery+0xb4>
            break;
    }    
        
    asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );    // restaura el SP de excepciï¿½n a su base para desechar su contenido y evitar su desbordamiento     
 c10283c:	e51bd024 	ldr	sp, [fp, #-36]	; 0xffffffdc
        
    for( addrDst = (uint32 *)SVCSTACK; addrSrc > (uint32 *)sp; )    // copia el contenido completo de la pila excepciï¿½n en la pila SVC
 c102840:	e59f3158 	ldr	r3, [pc, #344]	; c1029a0 <sys_recovery+0x21c>
 c102844:	e50b3010 	str	r3, [fp, #-16]
 c102848:	ea000009 	b	c102874 <sys_recovery+0xf0>
        *(--addrDst) = *(--addrSrc);
 c10284c:	e51b3010 	ldr	r3, [fp, #-16]
 c102850:	e2433004 	sub	r3, r3, #4
 c102854:	e50b3010 	str	r3, [fp, #-16]
 c102858:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10285c:	e2433004 	sub	r3, r3, #4
 c102860:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
 c102864:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102868:	e5932000 	ldr	r2, [r3]
 c10286c:	e51b3010 	ldr	r3, [fp, #-16]
 c102870:	e5832000 	str	r2, [r3]
            break;
    }    
        
    asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );    // restaura el SP de excepciï¿½n a su base para desechar su contenido y evitar su desbordamiento     
        
    for( addrDst = (uint32 *)SVCSTACK; addrSrc > (uint32 *)sp; )    // copia el contenido completo de la pila excepciï¿½n en la pila SVC
 c102874:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c102878:	e1a02003 	mov	r2, r3
 c10287c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102880:	e1520003 	cmp	r2, r3
 c102884:	3afffff0 	bcc	c10284c <sys_recovery+0xc8>
        *(--addrDst) = *(--addrSrc);

    addrDst = (uint32 *)(fp-diffStacks);   // carga el puntero al marco de activaciï¿½n de sys_recovery() en la pila SVC
 c102888:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10288c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102890:	e0633002 	rsb	r3, r3, r2
 c102894:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el PC apilado
 c102898:	e51b3010 	ldr	r3, [fp, #-16]
 c10289c:	e2433004 	sub	r3, r3, #4
 c1028a0:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el LR apilado
 c1028a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1028a8:	e2433004 	sub	r3, r3, #4
 c1028ac:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza SP apilado para que apunte a la pila SVC
 c1028b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1028b4:	e5932000 	ldr	r2, [r3]
 c1028b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1028bc:	e0632002 	rsb	r2, r3, r2
 c1028c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1028c4:	e5832000 	str	r2, [r3]
    addrDst--;                             // salta el SP apilado
 c1028c8:	e51b3010 	ldr	r3, [fp, #-16]
 c1028cc:	e2433004 	sub	r3, r3, #4
 c1028d0:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza el FP apilado para que apunte a la pila SVC
 c1028d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1028d8:	e5932000 	ldr	r2, [r3]
 c1028dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1028e0:	e0632002 	rsb	r2, r3, r2
 c1028e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1028e8:	e5832000 	str	r2, [r3]
    
    addrDst = (uint32 *)(*addrDst);        // carga el puntero al marco de activaciï¿½n de sys_init()
 c1028ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1028f0:	e5933000 	ldr	r3, [r3]
 c1028f4:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el PC apilado
 c1028f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1028fc:	e2433004 	sub	r3, r3, #4
 c102900:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el LR apilado
 c102904:	e51b3010 	ldr	r3, [fp, #-16]
 c102908:	e2433004 	sub	r3, r3, #4
 c10290c:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza SP apilado para que apunte a la pila SVC
 c102910:	e51b3010 	ldr	r3, [fp, #-16]
 c102914:	e5932000 	ldr	r2, [r3]
 c102918:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10291c:	e0632002 	rsb	r2, r3, r2
 c102920:	e51b3010 	ldr	r3, [fp, #-16]
 c102924:	e5832000 	str	r2, [r3]
    addrDst--;                             // salta el SP apilado
 c102928:	e51b3010 	ldr	r3, [fp, #-16]
 c10292c:	e2433004 	sub	r3, r3, #4
 c102930:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza el FP apilado para que apunte a la pila SVC
 c102934:	e51b3010 	ldr	r3, [fp, #-16]
 c102938:	e5932000 	ldr	r2, [r3]
 c10293c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102940:	e0632002 	rsb	r2, r3, r2
 c102944:	e51b3010 	ldr	r3, [fp, #-16]
 c102948:	e5832000 	str	r2, [r3]
   
    SET_OPMODE( SVCMODE );                           // cambia a modo SVC
 c10294c:	e10f0000 	mrs	r0, CPSR
 c102950:	e3c0001f 	bic	r0, r0, #31
 c102954:	e3800013 	orr	r0, r0, #19
 c102958:	e121f000 	msr	CPSR_c, r0

    sp -= diffStacks;
 c10295c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102960:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102964:	e0633002 	rsb	r3, r3, r2
 c102968:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    asm volatile ( "ldr sp, %0" : : "m" (sp) : );    // actualiza SP_svc para que apunte a la cima de la pila SVC
 c10296c:	e51bd01c 	ldr	sp, [fp, #-28]	; 0xffffffe4
    
    fp -= diffStacks;                 
 c102970:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102974:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102978:	e0633002 	rsb	r3, r3, r2
 c10297c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    asm volatile ( "ldr fp, %0" : : "m" (fp) : );    // actualiza FP para que apunte al marco de la pila SVC, debe ser siempre la ï¿½ltima sentencia
 c102980:	e51bb020 	ldr	fp, [fp, #-32]	; 0xffffffe0
}
 c102984:	e24bd00c 	sub	sp, fp, #12
 c102988:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10298c:	e12fff1e 	bx	lr
 c102990:	0c7ff400 	.word	0x0c7ff400
 c102994:	0c7ff500 	.word	0x0c7ff500
 c102998:	0c7ff300 	.word	0x0c7ff300
 c10299c:	0c7ff200 	.word	0x0c7ff200
 c1029a0:	0c7ff100 	.word	0x0c7ff100

0c1029a4 <timers_init>:
static uint32 loop_s = 0;

static void sw_delay_init( void );

void timers_init( void )
{
 c1029a4:	e1a0c00d 	mov	ip, sp
 c1029a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1029ac:	e24cb004 	sub	fp, ip, #4
    TCFG0 = 0x0;
 c1029b0:	e59f30bc 	ldr	r3, [pc, #188]	; c102a74 <timers_init+0xd0>
 c1029b4:	e3a02000 	mov	r2, #0
 c1029b8:	e5832000 	str	r2, [r3]
    TCFG1 = 0x0;
 c1029bc:	e59f30b4 	ldr	r3, [pc, #180]	; c102a78 <timers_init+0xd4>
 c1029c0:	e3a02000 	mov	r2, #0
 c1029c4:	e5832000 	str	r2, [r3]

    TCNTB0 = 0x0;
 c1029c8:	e59f30ac 	ldr	r3, [pc, #172]	; c102a7c <timers_init+0xd8>
 c1029cc:	e3a02000 	mov	r2, #0
 c1029d0:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c1029d4:	e59f30a4 	ldr	r3, [pc, #164]	; c102a80 <timers_init+0xdc>
 c1029d8:	e3a02000 	mov	r2, #0
 c1029dc:	e5832000 	str	r2, [r3]
    TCNTB1 = 0x0;
 c1029e0:	e59f309c 	ldr	r3, [pc, #156]	; c102a84 <timers_init+0xe0>
 c1029e4:	e3a02000 	mov	r2, #0
 c1029e8:	e5832000 	str	r2, [r3]
    TCMPB1 = 0x0;
 c1029ec:	e59f3094 	ldr	r3, [pc, #148]	; c102a88 <timers_init+0xe4>
 c1029f0:	e3a02000 	mov	r2, #0
 c1029f4:	e5832000 	str	r2, [r3]
    TCNTB2 = 0x0;
 c1029f8:	e59f308c 	ldr	r3, [pc, #140]	; c102a8c <timers_init+0xe8>
 c1029fc:	e3a02000 	mov	r2, #0
 c102a00:	e5832000 	str	r2, [r3]
    TCMPB2 = 0x0;
 c102a04:	e59f3084 	ldr	r3, [pc, #132]	; c102a90 <timers_init+0xec>
 c102a08:	e3a02000 	mov	r2, #0
 c102a0c:	e5832000 	str	r2, [r3]
    TCNTB3 = 0x0;
 c102a10:	e59f307c 	ldr	r3, [pc, #124]	; c102a94 <timers_init+0xf0>
 c102a14:	e3a02000 	mov	r2, #0
 c102a18:	e5832000 	str	r2, [r3]
    TCMPB3 = 0x0;
 c102a1c:	e59f3074 	ldr	r3, [pc, #116]	; c102a98 <timers_init+0xf4>
 c102a20:	e3a02000 	mov	r2, #0
 c102a24:	e5832000 	str	r2, [r3]
    TCNTB4 = 0x0;
 c102a28:	e59f306c 	ldr	r3, [pc, #108]	; c102a9c <timers_init+0xf8>
 c102a2c:	e3a02000 	mov	r2, #0
 c102a30:	e5832000 	str	r2, [r3]
    TCMPB4 = 0x0;
 c102a34:	e59f3064 	ldr	r3, [pc, #100]	; c102aa0 <timers_init+0xfc>
 c102a38:	e3a02000 	mov	r2, #0
 c102a3c:	e5832000 	str	r2, [r3]
    TCNTB5 = 0x0;
 c102a40:	e59f305c 	ldr	r3, [pc, #92]	; c102aa4 <timers_init+0x100>
 c102a44:	e3a02000 	mov	r2, #0
 c102a48:	e5832000 	str	r2, [r3]

    TCON = (1 << 1)  |	// timer 0
 c102a4c:	e59f3054 	ldr	r3, [pc, #84]	; c102aa8 <timers_init+0x104>
 c102a50:	e59f2054 	ldr	r2, [pc, #84]	; c102aac <timers_init+0x108>
 c102a54:	e5832000 	str	r2, [r3]
    	   (1 << 9)  |	// timer 1
    	   (1 << 13) |	// timer 2
    	   (1 << 17) |	// timer 3
    	   (1 << 21) |	// timer 4
    	   (1 << 25); 	// timer 5
    TCON = 0x0;
 c102a58:	e59f3048 	ldr	r3, [pc, #72]	; c102aa8 <timers_init+0x104>
 c102a5c:	e3a02000 	mov	r2, #0
 c102a60:	e5832000 	str	r2, [r3]

    sw_delay_init();
 c102a64:	eb000011 	bl	c102ab0 <sw_delay_init>
}
 c102a68:	e24bd00c 	sub	sp, fp, #12
 c102a6c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102a70:	e12fff1e 	bx	lr
 c102a74:	01d50000 	.word	0x01d50000
 c102a78:	01d50004 	.word	0x01d50004
 c102a7c:	01d5000c 	.word	0x01d5000c
 c102a80:	01d50010 	.word	0x01d50010
 c102a84:	01d50018 	.word	0x01d50018
 c102a88:	01d5001c 	.word	0x01d5001c
 c102a8c:	01d50024 	.word	0x01d50024
 c102a90:	01d50028 	.word	0x01d50028
 c102a94:	01d50030 	.word	0x01d50030
 c102a98:	01d50034 	.word	0x01d50034
 c102a9c:	01d5003c 	.word	0x01d5003c
 c102aa0:	01d50040 	.word	0x01d50040
 c102aa4:	01d50048 	.word	0x01d50048
 c102aa8:	01d50008 	.word	0x01d50008
 c102aac:	02222202 	.word	0x02222202

0c102ab0 <sw_delay_init>:

static void sw_delay_init( void )
{
 c102ab0:	e1a0c00d 	mov	ip, sp
 c102ab4:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c102ab8:	e24cb004 	sub	fp, ip, #4
 c102abc:	e24dd00c 	sub	sp, sp, #12
    uint32 i;
    
    timer3_start();
 c102ac0:	eb0000d4 	bl	c102e18 <timer3_start>
    for( i=1000000; i; i--);
 c102ac4:	e59f3088 	ldr	r3, [pc, #136]	; c102b54 <sw_delay_init+0xa4>
 c102ac8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c102acc:	ea000002 	b	c102adc <sw_delay_init+0x2c>
 c102ad0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102ad4:	e2433001 	sub	r3, r3, #1
 c102ad8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c102adc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102ae0:	e3530000 	cmp	r3, #0
 c102ae4:	1afffff9 	bne	c102ad0 <sw_delay_init+0x20>
    loop_s = ((uint64)1000000*10000)/timer3_stop();
 c102ae8:	eb0000f6 	bl	c102ec8 <timer3_stop>
 c102aec:	e1a03000 	mov	r3, r0
 c102af0:	e1a02003 	mov	r2, r3
 c102af4:	e1a03002 	mov	r3, r2
 c102af8:	e3a04000 	mov	r4, #0
 c102afc:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c102b00:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c102b04:	e2800b01 	add	r0, r0, #1024	; 0x400
 c102b08:	e3a01002 	mov	r1, #2
 c102b0c:	e1a02003 	mov	r2, r3
 c102b10:	e1a03004 	mov	r3, r4
 c102b14:	eb000593 	bl	c104168 <__aeabi_uldivmod>
 c102b18:	e1a03000 	mov	r3, r0
 c102b1c:	e1a04001 	mov	r4, r1
 c102b20:	e1a02003 	mov	r2, r3
 c102b24:	e59f302c 	ldr	r3, [pc, #44]	; c102b58 <sw_delay_init+0xa8>
 c102b28:	e5832000 	str	r2, [r3]
    loop_ms = loop_s / 1000;
 c102b2c:	e59f3024 	ldr	r3, [pc, #36]	; c102b58 <sw_delay_init+0xa8>
 c102b30:	e5932000 	ldr	r2, [r3]
 c102b34:	e59f3020 	ldr	r3, [pc, #32]	; c102b5c <sw_delay_init+0xac>
 c102b38:	e0831392 	umull	r1, r3, r2, r3
 c102b3c:	e1a02323 	lsr	r2, r3, #6
 c102b40:	e59f3018 	ldr	r3, [pc, #24]	; c102b60 <sw_delay_init+0xb0>
 c102b44:	e5832000 	str	r2, [r3]
};
 c102b48:	e24bd010 	sub	sp, fp, #16
 c102b4c:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c102b50:	e12fff1e 	bx	lr
 c102b54:	000f4240 	.word	0x000f4240
 c102b58:	0c105678 	.word	0x0c105678
 c102b5c:	10624dd3 	.word	0x10624dd3
 c102b60:	0c105674 	.word	0x0c105674

0c102b64 <wait_for_1ms>:

void wait_for_1ms(void) {
 c102b64:	e1a0c00d 	mov	ip, sp
 c102b68:	e92dd800 	push	{fp, ip, lr, pc}
 c102b6c:	e24cb004 	sub	fp, ip, #4
	TCFG0  = (TCFG0 & ~(0xFF << 8)) | (0 << 8);  // Prescaler = 0
 c102b70:	e59f3090 	ldr	r3, [pc, #144]	; c102c08 <wait_for_1ms+0xa4>
 c102b74:	e59f208c 	ldr	r2, [pc, #140]	; c102c08 <wait_for_1ms+0xa4>
 c102b78:	e5922000 	ldr	r2, [r2]
 c102b7c:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c102b80:	e5832000 	str	r2, [r3]
	TCFG1  = (TCFG1 & ~(0xF << 12)) | (0 << 12); // T3 divisor = 2
 c102b84:	e59f3080 	ldr	r3, [pc, #128]	; c102c0c <wait_for_1ms+0xa8>
 c102b88:	e59f207c 	ldr	r2, [pc, #124]	; c102c0c <wait_for_1ms+0xa8>
 c102b8c:	e5922000 	ldr	r2, [r2]
 c102b90:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c102b94:	e5832000 	str	r2, [r3]
	TCNTB3 = 32000;								 // T3 count = 32000
 c102b98:	e59f3070 	ldr	r3, [pc, #112]	; c102c10 <wait_for_1ms+0xac>
 c102b9c:	e3a02c7d 	mov	r2, #32000	; 0x7d00
 c102ba0:	e5832000 	str	r2, [r3]
	TCON   = (TCON  & ~(0xF << 16)) | (1 << 17); // one shot, load TCNT3, stop T3
 c102ba4:	e59f3068 	ldr	r3, [pc, #104]	; c102c14 <wait_for_1ms+0xb0>
 c102ba8:	e59f2064 	ldr	r2, [pc, #100]	; c102c14 <wait_for_1ms+0xb0>
 c102bac:	e5922000 	ldr	r2, [r2]
 c102bb0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102bb4:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c102bb8:	e5832000 	str	r2, [r3]
	TCON   = (TCON  & ~(0xF << 16)) | (1 << 16); // one shot, unload TCNT3, start T3
 c102bbc:	e59f3050 	ldr	r3, [pc, #80]	; c102c14 <wait_for_1ms+0xb0>
 c102bc0:	e59f204c 	ldr	r2, [pc, #76]	; c102c14 <wait_for_1ms+0xb0>
 c102bc4:	e5922000 	ldr	r2, [r2]
 c102bc8:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102bcc:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102bd0:	e5832000 	str	r2, [r3]
	while(!TCNTO3);
 c102bd4:	e1a00000 	nop			; (mov r0, r0)
 c102bd8:	e59f3038 	ldr	r3, [pc, #56]	; c102c18 <wait_for_1ms+0xb4>
 c102bdc:	e5933000 	ldr	r3, [r3]
 c102be0:	e3530000 	cmp	r3, #0
 c102be4:	0afffffb 	beq	c102bd8 <wait_for_1ms+0x74>
	while(TCNTO3);
 c102be8:	e1a00000 	nop			; (mov r0, r0)
 c102bec:	e59f3024 	ldr	r3, [pc, #36]	; c102c18 <wait_for_1ms+0xb4>
 c102bf0:	e5933000 	ldr	r3, [r3]
 c102bf4:	e3530000 	cmp	r3, #0
 c102bf8:	1afffffb 	bne	c102bec <wait_for_1ms+0x88>
}
 c102bfc:	e24bd00c 	sub	sp, fp, #12
 c102c00:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102c04:	e12fff1e 	bx	lr
 c102c08:	01d50000 	.word	0x01d50000
 c102c0c:	01d50004 	.word	0x01d50004
 c102c10:	01d50030 	.word	0x01d50030
 c102c14:	01d50008 	.word	0x01d50008
 c102c18:	01d50038 	.word	0x01d50038

0c102c1c <wait_for_1s>:

void wait_for_1s(void) {
 c102c1c:	e1a0c00d 	mov	ip, sp
 c102c20:	e92dd800 	push	{fp, ip, lr, pc}
 c102c24:	e24cb004 	sub	fp, ip, #4
	TCFG0  = (TCFG0 & ~(0xFF << 8)) | (63 << 8); // Prescaler = 63
 c102c28:	e59f3098 	ldr	r3, [pc, #152]	; c102cc8 <wait_for_1s+0xac>
 c102c2c:	e59f2094 	ldr	r2, [pc, #148]	; c102cc8 <wait_for_1s+0xac>
 c102c30:	e5922000 	ldr	r2, [r2]
 c102c34:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c102c38:	e3822c3f 	orr	r2, r2, #16128	; 0x3f00
 c102c3c:	e5832000 	str	r2, [r3]
	TCFG1  = (TCFG1 & ~(0xF << 12)) | (4 << 12); // T3 divisor = 32
 c102c40:	e59f3084 	ldr	r3, [pc, #132]	; c102ccc <wait_for_1s+0xb0>
 c102c44:	e59f2080 	ldr	r2, [pc, #128]	; c102ccc <wait_for_1s+0xb0>
 c102c48:	e5922000 	ldr	r2, [r2]
 c102c4c:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c102c50:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c102c54:	e5832000 	str	r2, [r3]
	TCNTB3 = 31250;								 // T3 count = 31250
 c102c58:	e59f3070 	ldr	r3, [pc, #112]	; c102cd0 <wait_for_1s+0xb4>
 c102c5c:	e59f2070 	ldr	r2, [pc, #112]	; c102cd4 <wait_for_1s+0xb8>
 c102c60:	e5832000 	str	r2, [r3]
	TCON   = (TCON  & ~(0xF << 16)) | (1 << 17); // one shot, load TCNT3, stop T3
 c102c64:	e59f306c 	ldr	r3, [pc, #108]	; c102cd8 <wait_for_1s+0xbc>
 c102c68:	e59f2068 	ldr	r2, [pc, #104]	; c102cd8 <wait_for_1s+0xbc>
 c102c6c:	e5922000 	ldr	r2, [r2]
 c102c70:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102c74:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c102c78:	e5832000 	str	r2, [r3]
	TCON   = (TCON  & ~(0xF << 16)) | (1 << 16); // one shot, unload TCNT3, start T3
 c102c7c:	e59f3054 	ldr	r3, [pc, #84]	; c102cd8 <wait_for_1s+0xbc>
 c102c80:	e59f2050 	ldr	r2, [pc, #80]	; c102cd8 <wait_for_1s+0xbc>
 c102c84:	e5922000 	ldr	r2, [r2]
 c102c88:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102c8c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102c90:	e5832000 	str	r2, [r3]
	while(!TCNTO3);
 c102c94:	e1a00000 	nop			; (mov r0, r0)
 c102c98:	e59f303c 	ldr	r3, [pc, #60]	; c102cdc <wait_for_1s+0xc0>
 c102c9c:	e5933000 	ldr	r3, [r3]
 c102ca0:	e3530000 	cmp	r3, #0
 c102ca4:	0afffffb 	beq	c102c98 <wait_for_1s+0x7c>
	while(TCNTO3);
 c102ca8:	e1a00000 	nop			; (mov r0, r0)
 c102cac:	e59f3028 	ldr	r3, [pc, #40]	; c102cdc <wait_for_1s+0xc0>
 c102cb0:	e5933000 	ldr	r3, [r3]
 c102cb4:	e3530000 	cmp	r3, #0
 c102cb8:	1afffffb 	bne	c102cac <wait_for_1s+0x90>
}
 c102cbc:	e24bd00c 	sub	sp, fp, #12
 c102cc0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102cc4:	e12fff1e 	bx	lr
 c102cc8:	01d50000 	.word	0x01d50000
 c102ccc:	01d50004 	.word	0x01d50004
 c102cd0:	01d50030 	.word	0x01d50030
 c102cd4:	00007a12 	.word	0x00007a12
 c102cd8:	01d50008 	.word	0x01d50008
 c102cdc:	01d50038 	.word	0x01d50038

0c102ce0 <timer3_delay_ms>:

void timer3_delay_ms( uint16 n ) {
 c102ce0:	e1a0c00d 	mov	ip, sp
 c102ce4:	e92dd800 	push	{fp, ip, lr, pc}
 c102ce8:	e24cb004 	sub	fp, ip, #4
 c102cec:	e24dd008 	sub	sp, sp, #8
 c102cf0:	e1a03000 	mov	r3, r0
 c102cf4:	e14b30be 	strh	r3, [fp, #-14]
    for( ; n; n-- ) {
 c102cf8:	ea000003 	b	c102d0c <timer3_delay_ms+0x2c>
    	wait_for_1ms();
 c102cfc:	ebffff98 	bl	c102b64 <wait_for_1ms>
	while(!TCNTO3);
	while(TCNTO3);
}

void timer3_delay_ms( uint16 n ) {
    for( ; n; n-- ) {
 c102d00:	e15b30be 	ldrh	r3, [fp, #-14]
 c102d04:	e2433001 	sub	r3, r3, #1
 c102d08:	e14b30be 	strh	r3, [fp, #-14]
 c102d0c:	e15b30be 	ldrh	r3, [fp, #-14]
 c102d10:	e3530000 	cmp	r3, #0
 c102d14:	1afffff8 	bne	c102cfc <timer3_delay_ms+0x1c>
    	wait_for_1ms();
    }
}
 c102d18:	e24bd00c 	sub	sp, fp, #12
 c102d1c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102d20:	e12fff1e 	bx	lr

0c102d24 <sw_delay_ms>:

void sw_delay_ms( uint16 n )
{
 c102d24:	e1a0c00d 	mov	ip, sp
 c102d28:	e92dd800 	push	{fp, ip, lr, pc}
 c102d2c:	e24cb004 	sub	fp, ip, #4
 c102d30:	e24dd010 	sub	sp, sp, #16
 c102d34:	e1a03000 	mov	r3, r0
 c102d38:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_ms*n; i; i-- );
 c102d3c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c102d40:	e59f2030 	ldr	r2, [pc, #48]	; c102d78 <sw_delay_ms+0x54>
 c102d44:	e5922000 	ldr	r2, [r2]
 c102d48:	e0030392 	mul	r3, r2, r3
 c102d4c:	e50b3010 	str	r3, [fp, #-16]
 c102d50:	ea000002 	b	c102d60 <sw_delay_ms+0x3c>
 c102d54:	e51b3010 	ldr	r3, [fp, #-16]
 c102d58:	e2433001 	sub	r3, r3, #1
 c102d5c:	e50b3010 	str	r3, [fp, #-16]
 c102d60:	e51b3010 	ldr	r3, [fp, #-16]
 c102d64:	e3530000 	cmp	r3, #0
 c102d68:	1afffff9 	bne	c102d54 <sw_delay_ms+0x30>
}
 c102d6c:	e24bd00c 	sub	sp, fp, #12
 c102d70:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102d74:	e12fff1e 	bx	lr
 c102d78:	0c105674 	.word	0x0c105674

0c102d7c <timer3_delay_s>:

void timer3_delay_s( uint16 n ) {
 c102d7c:	e1a0c00d 	mov	ip, sp
 c102d80:	e92dd800 	push	{fp, ip, lr, pc}
 c102d84:	e24cb004 	sub	fp, ip, #4
 c102d88:	e24dd008 	sub	sp, sp, #8
 c102d8c:	e1a03000 	mov	r3, r0
 c102d90:	e14b30be 	strh	r3, [fp, #-14]
    for( ; n; n--){
 c102d94:	ea000003 	b	c102da8 <timer3_delay_s+0x2c>
    	wait_for_1s();
 c102d98:	ebffff9f 	bl	c102c1c <wait_for_1s>
    
    for( i=loop_ms*n; i; i-- );
}

void timer3_delay_s( uint16 n ) {
    for( ; n; n--){
 c102d9c:	e15b30be 	ldrh	r3, [fp, #-14]
 c102da0:	e2433001 	sub	r3, r3, #1
 c102da4:	e14b30be 	strh	r3, [fp, #-14]
 c102da8:	e15b30be 	ldrh	r3, [fp, #-14]
 c102dac:	e3530000 	cmp	r3, #0
 c102db0:	1afffff8 	bne	c102d98 <timer3_delay_s+0x1c>
    	wait_for_1s();
    }
}
 c102db4:	e24bd00c 	sub	sp, fp, #12
 c102db8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102dbc:	e12fff1e 	bx	lr

0c102dc0 <sw_delay_s>:

void sw_delay_s( uint16 n )
{
 c102dc0:	e1a0c00d 	mov	ip, sp
 c102dc4:	e92dd800 	push	{fp, ip, lr, pc}
 c102dc8:	e24cb004 	sub	fp, ip, #4
 c102dcc:	e24dd010 	sub	sp, sp, #16
 c102dd0:	e1a03000 	mov	r3, r0
 c102dd4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_s*n; i; i-- );
 c102dd8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c102ddc:	e59f2030 	ldr	r2, [pc, #48]	; c102e14 <sw_delay_s+0x54>
 c102de0:	e5922000 	ldr	r2, [r2]
 c102de4:	e0030392 	mul	r3, r2, r3
 c102de8:	e50b3010 	str	r3, [fp, #-16]
 c102dec:	ea000002 	b	c102dfc <sw_delay_s+0x3c>
 c102df0:	e51b3010 	ldr	r3, [fp, #-16]
 c102df4:	e2433001 	sub	r3, r3, #1
 c102df8:	e50b3010 	str	r3, [fp, #-16]
 c102dfc:	e51b3010 	ldr	r3, [fp, #-16]
 c102e00:	e3530000 	cmp	r3, #0
 c102e04:	1afffff9 	bne	c102df0 <sw_delay_s+0x30>
}
 c102e08:	e24bd00c 	sub	sp, fp, #12
 c102e0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e10:	e12fff1e 	bx	lr
 c102e14:	0c105678 	.word	0x0c105678

0c102e18 <timer3_start>:

void timer3_start( void ) 
{
 c102e18:	e1a0c00d 	mov	ip, sp
 c102e1c:	e92dd800 	push	{fp, ip, lr, pc}
 c102e20:	e24cb004 	sub	fp, ip, #4
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);    
 c102e24:	e59f3084 	ldr	r3, [pc, #132]	; c102eb0 <timer3_start+0x98>
 c102e28:	e59f2080 	ldr	r2, [pc, #128]	; c102eb0 <timer3_start+0x98>
 c102e2c:	e5922000 	ldr	r2, [r2]
 c102e30:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c102e34:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c102e38:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c102e3c:	e59f3070 	ldr	r3, [pc, #112]	; c102eb4 <timer3_start+0x9c>
 c102e40:	e59f206c 	ldr	r2, [pc, #108]	; c102eb4 <timer3_start+0x9c>
 c102e44:	e5922000 	ldr	r2, [r2]
 c102e48:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c102e4c:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c102e50:	e5832000 	str	r2, [r3]
    
    TCNTB3 = 0xffff; 
 c102e54:	e59f305c 	ldr	r3, [pc, #92]	; c102eb8 <timer3_start+0xa0>
 c102e58:	e59f205c 	ldr	r2, [pc, #92]	; c102ebc <timer3_start+0xa4>
 c102e5c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c102e60:	e59f3058 	ldr	r3, [pc, #88]	; c102ec0 <timer3_start+0xa8>
 c102e64:	e59f2054 	ldr	r2, [pc, #84]	; c102ec0 <timer3_start+0xa8>
 c102e68:	e5922000 	ldr	r2, [r2]
 c102e6c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102e70:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c102e74:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c102e78:	e59f3040 	ldr	r3, [pc, #64]	; c102ec0 <timer3_start+0xa8>
 c102e7c:	e59f203c 	ldr	r2, [pc, #60]	; c102ec0 <timer3_start+0xa8>
 c102e80:	e5922000 	ldr	r2, [r2]
 c102e84:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102e88:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102e8c:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c102e90:	e1a00000 	nop			; (mov r0, r0)
 c102e94:	e59f3028 	ldr	r3, [pc, #40]	; c102ec4 <timer3_start+0xac>
 c102e98:	e5933000 	ldr	r3, [r3]
 c102e9c:	e3530000 	cmp	r3, #0
 c102ea0:	0afffffb 	beq	c102e94 <timer3_start+0x7c>
}
 c102ea4:	e24bd00c 	sub	sp, fp, #12
 c102ea8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102eac:	e12fff1e 	bx	lr
 c102eb0:	01d50000 	.word	0x01d50000
 c102eb4:	01d50004 	.word	0x01d50004
 c102eb8:	01d50030 	.word	0x01d50030
 c102ebc:	0000ffff 	.word	0x0000ffff
 c102ec0:	01d50008 	.word	0x01d50008
 c102ec4:	01d50038 	.word	0x01d50038

0c102ec8 <timer3_stop>:

uint16 timer3_stop( void )
{
 c102ec8:	e1a0c00d 	mov	ip, sp
 c102ecc:	e92dd800 	push	{fp, ip, lr, pc}
 c102ed0:	e24cb004 	sub	fp, ip, #4
    TCON &= ~(1 << 16);
 c102ed4:	e59f3038 	ldr	r3, [pc, #56]	; c102f14 <timer3_stop+0x4c>
 c102ed8:	e59f2034 	ldr	r2, [pc, #52]	; c102f14 <timer3_stop+0x4c>
 c102edc:	e5922000 	ldr	r2, [r2]
 c102ee0:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c102ee4:	e5832000 	str	r2, [r3]
    return 0xffff - TCNTO3;
 c102ee8:	e59f3028 	ldr	r3, [pc, #40]	; c102f18 <timer3_stop+0x50>
 c102eec:	e5933000 	ldr	r3, [r3]
 c102ef0:	e1a03803 	lsl	r3, r3, #16
 c102ef4:	e1a03823 	lsr	r3, r3, #16
 c102ef8:	e1e03003 	mvn	r3, r3
 c102efc:	e1a03803 	lsl	r3, r3, #16
 c102f00:	e1a03823 	lsr	r3, r3, #16
}
 c102f04:	e1a00003 	mov	r0, r3
 c102f08:	e24bd00c 	sub	sp, fp, #12
 c102f0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102f10:	e12fff1e 	bx	lr
 c102f14:	01d50008 	.word	0x01d50008
 c102f18:	01d50038 	.word	0x01d50038

0c102f1c <timer3_start_timeout>:

void timer3_start_timeout( uint16 n ) 
{
 c102f1c:	e1a0c00d 	mov	ip, sp
 c102f20:	e92dd800 	push	{fp, ip, lr, pc}
 c102f24:	e24cb004 	sub	fp, ip, #4
 c102f28:	e24dd008 	sub	sp, sp, #8
 c102f2c:	e1a03000 	mov	r3, r0
 c102f30:	e14b30be 	strh	r3, [fp, #-14]
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);          
 c102f34:	e59f3084 	ldr	r3, [pc, #132]	; c102fc0 <timer3_start_timeout+0xa4>
 c102f38:	e59f2080 	ldr	r2, [pc, #128]	; c102fc0 <timer3_start_timeout+0xa4>
 c102f3c:	e5922000 	ldr	r2, [r2]
 c102f40:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c102f44:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c102f48:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c102f4c:	e59f3070 	ldr	r3, [pc, #112]	; c102fc4 <timer3_start_timeout+0xa8>
 c102f50:	e59f206c 	ldr	r2, [pc, #108]	; c102fc4 <timer3_start_timeout+0xa8>
 c102f54:	e5922000 	ldr	r2, [r2]
 c102f58:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c102f5c:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c102f60:	e5832000 	str	r2, [r3]
    
    TCNTB3 = n; 
 c102f64:	e59f305c 	ldr	r3, [pc, #92]	; c102fc8 <timer3_start_timeout+0xac>
 c102f68:	e15b20be 	ldrh	r2, [fp, #-14]
 c102f6c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c102f70:	e59f3054 	ldr	r3, [pc, #84]	; c102fcc <timer3_start_timeout+0xb0>
 c102f74:	e59f2050 	ldr	r2, [pc, #80]	; c102fcc <timer3_start_timeout+0xb0>
 c102f78:	e5922000 	ldr	r2, [r2]
 c102f7c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102f80:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c102f84:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c102f88:	e59f303c 	ldr	r3, [pc, #60]	; c102fcc <timer3_start_timeout+0xb0>
 c102f8c:	e59f2038 	ldr	r2, [pc, #56]	; c102fcc <timer3_start_timeout+0xb0>
 c102f90:	e5922000 	ldr	r2, [r2]
 c102f94:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c102f98:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c102f9c:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c102fa0:	e1a00000 	nop			; (mov r0, r0)
 c102fa4:	e59f3024 	ldr	r3, [pc, #36]	; c102fd0 <timer3_start_timeout+0xb4>
 c102fa8:	e5933000 	ldr	r3, [r3]
 c102fac:	e3530000 	cmp	r3, #0
 c102fb0:	0afffffb 	beq	c102fa4 <timer3_start_timeout+0x88>
}
 c102fb4:	e24bd00c 	sub	sp, fp, #12
 c102fb8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102fbc:	e12fff1e 	bx	lr
 c102fc0:	01d50000 	.word	0x01d50000
 c102fc4:	01d50004 	.word	0x01d50004
 c102fc8:	01d50030 	.word	0x01d50030
 c102fcc:	01d50008 	.word	0x01d50008
 c102fd0:	01d50038 	.word	0x01d50038

0c102fd4 <timer3_timeout>:

uint16 timer3_timeout( )
{
 c102fd4:	e1a0c00d 	mov	ip, sp
 c102fd8:	e92dd800 	push	{fp, ip, lr, pc}
 c102fdc:	e24cb004 	sub	fp, ip, #4
    return !TCNTO3;
 c102fe0:	e59f3024 	ldr	r3, [pc, #36]	; c10300c <timer3_timeout+0x38>
 c102fe4:	e5933000 	ldr	r3, [r3]
 c102fe8:	e3530000 	cmp	r3, #0
 c102fec:	13a03000 	movne	r3, #0
 c102ff0:	03a03001 	moveq	r3, #1
 c102ff4:	e1a03803 	lsl	r3, r3, #16
 c102ff8:	e1a03823 	lsr	r3, r3, #16
}    
 c102ffc:	e1a00003 	mov	r0, r3
 c103000:	e24bd00c 	sub	sp, fp, #12
 c103004:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103008:	e12fff1e 	bx	lr
 c10300c:	01d50038 	.word	0x01d50038

0c103010 <timer0_open_tick>:

void timer0_open_tick( void (*isr)(void), uint16 tps )
{
 c103010:	e1a0c00d 	mov	ip, sp
 c103014:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c103018:	e24cb004 	sub	fp, ip, #4
 c10301c:	e24dd00c 	sub	sp, sp, #12
 c103020:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c103024:	e1a03001 	mov	r3, r1
 c103028:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    pISR_TIMER0 = isr;
 c10302c:	e59f31ec 	ldr	r3, [pc, #492]	; c103220 <timer0_open_tick+0x210>
 c103030:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c103034:	e5832000 	str	r2, [r3]
    I_ISPC      = BIT_TIMER0;
 c103038:	e59f31e4 	ldr	r3, [pc, #484]	; c103224 <timer0_open_tick+0x214>
 c10303c:	e3a02a02 	mov	r2, #8192	; 0x2000
 c103040:	e5832000 	str	r2, [r3]
    INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c103044:	e59f21dc 	ldr	r2, [pc, #476]	; c103228 <timer0_open_tick+0x218>
 c103048:	e59f31d8 	ldr	r3, [pc, #472]	; c103228 <timer0_open_tick+0x218>
 c10304c:	e5933000 	ldr	r3, [r3]
 c103050:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c103054:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c103058:	e5823000 	str	r3, [r2]
	** We want a 25us, 2.5us, 0.25us and 31.25ns timer setup so we use the formula t = (N + 1) * D / MCLK
	** Since N in [0, 1, ..., 255] then we solve for N t(seconds) = ((N + 1) * D)/(64 * 10^6)
	** This is a bit of trial and error, since we want N to be in range. The divisor may vary.
	*/

    if( tps > 0 && tps <= 10 ) {
 c10305c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c103060:	e3530000 	cmp	r3, #0
 c103064:	0a000018 	beq	c1030cc <timer0_open_tick+0xbc>
 c103068:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10306c:	e353000a 	cmp	r3, #10
 c103070:	8a000015 	bhi	c1030cc <timer0_open_tick+0xbc>
    	/*
    	** Solving the formula we get N = 199 and D = 8
    	*/
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (199 << 0); // Set prescaler to 199
 c103074:	e59f31b0 	ldr	r3, [pc, #432]	; c10322c <timer0_open_tick+0x21c>
 c103078:	e59f21ac 	ldr	r2, [pc, #428]	; c10322c <timer0_open_tick+0x21c>
 c10307c:	e5922000 	ldr	r2, [r2]
 c103080:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c103084:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c103088:	e5832000 	str	r2, [r3]
		TCFG1  = (TCFG1 & ~(0xf << 0)) | (2 << 0);	  // Set divisor to 8
 c10308c:	e59f319c 	ldr	r3, [pc, #412]	; c103230 <timer0_open_tick+0x220>
 c103090:	e59f2198 	ldr	r2, [pc, #408]	; c103230 <timer0_open_tick+0x220>
 c103094:	e5922000 	ldr	r2, [r2]
 c103098:	e3c2200f 	bic	r2, r2, #15
 c10309c:	e3822002 	orr	r2, r2, #2
 c1030a0:	e5832000 	str	r2, [r3]
        TCNTB0 = (40000U / tps);
 c1030a4:	e59f4188 	ldr	r4, [pc, #392]	; c103234 <timer0_open_tick+0x224>
 c1030a8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1030ac:	e59f0184 	ldr	r0, [pc, #388]	; c103238 <timer0_open_tick+0x228>
 c1030b0:	e1a01003 	mov	r1, r3
 c1030b4:	eb0003e5 	bl	c104050 <__aeabi_uidiv>
 c1030b8:	e1a03000 	mov	r3, r0
 c1030bc:	e1a03803 	lsl	r3, r3, #16
 c1030c0:	e1a03823 	lsr	r3, r3, #16
 c1030c4:	e5843000 	str	r3, [r4]
 c1030c8:	ea000045 	b	c1031e4 <timer0_open_tick+0x1d4>
    } else if( tps > 10 && tps <= 100 ) {
 c1030cc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1030d0:	e353000a 	cmp	r3, #10
 c1030d4:	9a000015 	bls	c103130 <timer0_open_tick+0x120>
 c1030d8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1030dc:	e3530064 	cmp	r3, #100	; 0x64
 c1030e0:	8a000012 	bhi	c103130 <timer0_open_tick+0x120>
    	/*
		** Solving the formula we get N = 79 and D = 2
		*/
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (79 << 0); // Set prescaler to 79
 c1030e4:	e59f3140 	ldr	r3, [pc, #320]	; c10322c <timer0_open_tick+0x21c>
 c1030e8:	e59f213c 	ldr	r2, [pc, #316]	; c10322c <timer0_open_tick+0x21c>
 c1030ec:	e5922000 	ldr	r2, [r2]
 c1030f0:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1030f4:	e382204f 	orr	r2, r2, #79	; 0x4f
 c1030f8:	e5832000 	str	r2, [r3]
		TCFG1  = (TCFG1 & ~(0xf << 0)) | (0 << 0);	 // Set divisor to 2
 c1030fc:	e59f312c 	ldr	r3, [pc, #300]	; c103230 <timer0_open_tick+0x220>
 c103100:	e59f2128 	ldr	r2, [pc, #296]	; c103230 <timer0_open_tick+0x220>
 c103104:	e5922000 	ldr	r2, [r2]
 c103108:	e3c2200f 	bic	r2, r2, #15
 c10310c:	e5832000 	str	r2, [r3]
        TCNTB0 = (400000U / (uint32) tps);
 c103110:	e59f411c 	ldr	r4, [pc, #284]	; c103234 <timer0_open_tick+0x224>
 c103114:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c103118:	e59f011c 	ldr	r0, [pc, #284]	; c10323c <timer0_open_tick+0x22c>
 c10311c:	e1a01003 	mov	r1, r3
 c103120:	eb0003ca 	bl	c104050 <__aeabi_uidiv>
 c103124:	e1a03000 	mov	r3, r0
 c103128:	e5843000 	str	r3, [r4]
 c10312c:	ea00002c 	b	c1031e4 <timer0_open_tick+0x1d4>
    } else if( tps > 100 && tps <= 1000 ) {
 c103130:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c103134:	e3530064 	cmp	r3, #100	; 0x64
 c103138:	9a000015 	bls	c103194 <timer0_open_tick+0x184>
 c10313c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c103140:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c103144:	8a000012 	bhi	c103194 <timer0_open_tick+0x184>
    	/*
		** Solving the formula we get N = 7 and D = 2
		*/
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (7 << 0); // Set prescaler to 7
 c103148:	e59f30dc 	ldr	r3, [pc, #220]	; c10322c <timer0_open_tick+0x21c>
 c10314c:	e59f20d8 	ldr	r2, [pc, #216]	; c10322c <timer0_open_tick+0x21c>
 c103150:	e5922000 	ldr	r2, [r2]
 c103154:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c103158:	e3822007 	orr	r2, r2, #7
 c10315c:	e5832000 	str	r2, [r3]
		TCFG1  = (TCFG1 & ~(0xf << 0)) | (0 << 0);	// Set divisor to 2
 c103160:	e59f30c8 	ldr	r3, [pc, #200]	; c103230 <timer0_open_tick+0x220>
 c103164:	e59f20c4 	ldr	r2, [pc, #196]	; c103230 <timer0_open_tick+0x220>
 c103168:	e5922000 	ldr	r2, [r2]
 c10316c:	e3c2200f 	bic	r2, r2, #15
 c103170:	e5832000 	str	r2, [r3]
        TCNTB0 = (4000000U / (uint32) tps);
 c103174:	e59f40b8 	ldr	r4, [pc, #184]	; c103234 <timer0_open_tick+0x224>
 c103178:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10317c:	e59f00bc 	ldr	r0, [pc, #188]	; c103240 <timer0_open_tick+0x230>
 c103180:	e1a01003 	mov	r1, r3
 c103184:	eb0003b1 	bl	c104050 <__aeabi_uidiv>
 c103188:	e1a03000 	mov	r3, r0
 c10318c:	e5843000 	str	r3, [r4]
 c103190:	ea000013 	b	c1031e4 <timer0_open_tick+0x1d4>
    } else if ( tps > 1000 ) {
 c103194:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c103198:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c10319c:	9a000010 	bls	c1031e4 <timer0_open_tick+0x1d4>
    	/*
		** Solving the formula we get N = 0 and D = 2
		*/
    	TCFG0  = (TCFG0 & ~(0xff << 0)) | (0 << 0); // Set prescaler to 0
 c1031a0:	e59f3084 	ldr	r3, [pc, #132]	; c10322c <timer0_open_tick+0x21c>
 c1031a4:	e59f2080 	ldr	r2, [pc, #128]	; c10322c <timer0_open_tick+0x21c>
 c1031a8:	e5922000 	ldr	r2, [r2]
 c1031ac:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1031b0:	e5832000 	str	r2, [r3]
		TCFG1  = (TCFG1 & ~(0xf << 0)) | (0 << 0);	// Set divisor to 2
 c1031b4:	e59f3074 	ldr	r3, [pc, #116]	; c103230 <timer0_open_tick+0x220>
 c1031b8:	e59f2070 	ldr	r2, [pc, #112]	; c103230 <timer0_open_tick+0x220>
 c1031bc:	e5922000 	ldr	r2, [r2]
 c1031c0:	e3c2200f 	bic	r2, r2, #15
 c1031c4:	e5832000 	str	r2, [r3]
        TCNTB0 = (32000000U / (uint32) tps);
 c1031c8:	e59f4064 	ldr	r4, [pc, #100]	; c103234 <timer0_open_tick+0x224>
 c1031cc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1031d0:	e59f006c 	ldr	r0, [pc, #108]	; c103244 <timer0_open_tick+0x234>
 c1031d4:	e1a01003 	mov	r1, r3
 c1031d8:	eb00039c 	bl	c104050 <__aeabi_uidiv>
 c1031dc:	e1a03000 	mov	r3, r0
 c1031e0:	e5843000 	str	r3, [r4]
    }

    TCON = (TCON  & ~(0xF << 0)) | (1 << 3) | (1 << 1); // one shot, load TCNT0, stop T0
 c1031e4:	e59f305c 	ldr	r3, [pc, #92]	; c103248 <timer0_open_tick+0x238>
 c1031e8:	e59f2058 	ldr	r2, [pc, #88]	; c103248 <timer0_open_tick+0x238>
 c1031ec:	e5922000 	ldr	r2, [r2]
 c1031f0:	e3c2200f 	bic	r2, r2, #15
 c1031f4:	e382200a 	orr	r2, r2, #10
 c1031f8:	e5832000 	str	r2, [r3]
	TCON = (TCON  & ~(0xF << 0)) | (1 << 3) | (1 << 0); // one shot, unload TCNT0, start T0
 c1031fc:	e59f3044 	ldr	r3, [pc, #68]	; c103248 <timer0_open_tick+0x238>
 c103200:	e59f2040 	ldr	r2, [pc, #64]	; c103248 <timer0_open_tick+0x238>
 c103204:	e5922000 	ldr	r2, [r2]
 c103208:	e3c2200f 	bic	r2, r2, #15
 c10320c:	e3822009 	orr	r2, r2, #9
 c103210:	e5832000 	str	r2, [r3]
}
 c103214:	e24bd010 	sub	sp, fp, #16
 c103218:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c10321c:	e12fff1e 	bx	lr
 c103220:	0c7fff54 	.word	0x0c7fff54
 c103224:	01e00024 	.word	0x01e00024
 c103228:	01e0000c 	.word	0x01e0000c
 c10322c:	01d50000 	.word	0x01d50000
 c103230:	01d50004 	.word	0x01d50004
 c103234:	01d5000c 	.word	0x01d5000c
 c103238:	00009c40 	.word	0x00009c40
 c10323c:	00061a80 	.word	0x00061a80
 c103240:	003d0900 	.word	0x003d0900
 c103244:	01e84800 	.word	0x01e84800
 c103248:	01d50008 	.word	0x01d50008

0c10324c <timer0_open_ms>:

void timer0_open_ms( void (*isr)(void), uint16 ms, uint8 mode )
{
 c10324c:	e1a0c00d 	mov	ip, sp
 c103250:	e92dd800 	push	{fp, ip, lr, pc}
 c103254:	e24cb004 	sub	fp, ip, #4
 c103258:	e24dd008 	sub	sp, sp, #8
 c10325c:	e50b0010 	str	r0, [fp, #-16]
 c103260:	e1a03002 	mov	r3, r2
 c103264:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c103268:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    pISR_TIMER0 = isr;
 c10326c:	e59f30c8 	ldr	r3, [pc, #200]	; c10333c <timer0_open_ms+0xf0>
 c103270:	e51b2010 	ldr	r2, [fp, #-16]
 c103274:	e5832000 	str	r2, [r3]
    I_ISPC      = BIT_TIMER0;
 c103278:	e59f30c0 	ldr	r3, [pc, #192]	; c103340 <timer0_open_ms+0xf4>
 c10327c:	e3a02a02 	mov	r2, #8192	; 0x2000
 c103280:	e5832000 	str	r2, [r3]
    INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c103284:	e59f20b8 	ldr	r2, [pc, #184]	; c103344 <timer0_open_ms+0xf8>
 c103288:	e59f30b4 	ldr	r3, [pc, #180]	; c103344 <timer0_open_ms+0xf8>
 c10328c:	e5933000 	ldr	r3, [r3]
 c103290:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c103294:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c103298:	e5823000 	str	r3, [r2]
    ** Since N in [0, 1, ..., 255] then we solve for N 10^(-4) = ((N + 1) * 32)/(64 * 10^6)
    ** Hence N is 199 and we need Divisor to be 32 in order to have N in range
    ** This is a bit of trial and error
	*/

    TCFG0  = (TCFG0 & ~(0xff << 0)) | (199 << 0); // Set prescaler to 199
 c10329c:	e59f30a4 	ldr	r3, [pc, #164]	; c103348 <timer0_open_ms+0xfc>
 c1032a0:	e59f20a0 	ldr	r2, [pc, #160]	; c103348 <timer0_open_ms+0xfc>
 c1032a4:	e5922000 	ldr	r2, [r2]
 c1032a8:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1032ac:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c1032b0:	e5832000 	str	r2, [r3]
    TCFG1  = (TCFG1 & ~(0xf << 0)) | (4 << 0);	  // Set divisor to 32
 c1032b4:	e59f3090 	ldr	r3, [pc, #144]	; c10334c <timer0_open_ms+0x100>
 c1032b8:	e59f208c 	ldr	r2, [pc, #140]	; c10334c <timer0_open_ms+0x100>
 c1032bc:	e5922000 	ldr	r2, [r2]
 c1032c0:	e3c2200f 	bic	r2, r2, #15
 c1032c4:	e3822004 	orr	r2, r2, #4
 c1032c8:	e5832000 	str	r2, [r3]
    TCNTB0 = 10*ms;
 c1032cc:	e59f107c 	ldr	r1, [pc, #124]	; c103350 <timer0_open_ms+0x104>
 c1032d0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1032d4:	e1a03002 	mov	r3, r2
 c1032d8:	e1a03103 	lsl	r3, r3, #2
 c1032dc:	e0833002 	add	r3, r3, r2
 c1032e0:	e1a03083 	lsl	r3, r3, #1
 c1032e4:	e5813000 	str	r3, [r1]

    TCON   = (TCON  & ~(0xF << 0)) | (mode << 3) | (1 << 1); // load TCNT0, stop T0
 c1032e8:	e59f3064 	ldr	r3, [pc, #100]	; c103354 <timer0_open_ms+0x108>
 c1032ec:	e59f2060 	ldr	r2, [pc, #96]	; c103354 <timer0_open_ms+0x108>
 c1032f0:	e5922000 	ldr	r2, [r2]
 c1032f4:	e3c2100f 	bic	r1, r2, #15
 c1032f8:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c1032fc:	e1a02182 	lsl	r2, r2, #3
 c103300:	e1812002 	orr	r2, r1, r2
 c103304:	e3822002 	orr	r2, r2, #2
 c103308:	e5832000 	str	r2, [r3]
	TCON   = (TCON  & ~(0xF << 0)) | (mode << 3) | (1 << 0); // unload TCNT0, start T0
 c10330c:	e59f3040 	ldr	r3, [pc, #64]	; c103354 <timer0_open_ms+0x108>
 c103310:	e59f203c 	ldr	r2, [pc, #60]	; c103354 <timer0_open_ms+0x108>
 c103314:	e5922000 	ldr	r2, [r2]
 c103318:	e3c2100f 	bic	r1, r2, #15
 c10331c:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c103320:	e1a02182 	lsl	r2, r2, #3
 c103324:	e1812002 	orr	r2, r1, r2
 c103328:	e3822001 	orr	r2, r2, #1
 c10332c:	e5832000 	str	r2, [r3]
}
 c103330:	e24bd00c 	sub	sp, fp, #12
 c103334:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103338:	e12fff1e 	bx	lr
 c10333c:	0c7fff54 	.word	0x0c7fff54
 c103340:	01e00024 	.word	0x01e00024
 c103344:	01e0000c 	.word	0x01e0000c
 c103348:	01d50000 	.word	0x01d50000
 c10334c:	01d50004 	.word	0x01d50004
 c103350:	01d5000c 	.word	0x01d5000c
 c103354:	01d50008 	.word	0x01d50008

0c103358 <timer0_close>:

void timer0_close( void )
{
 c103358:	e1a0c00d 	mov	ip, sp
 c10335c:	e92dd800 	push	{fp, ip, lr, pc}
 c103360:	e24cb004 	sub	fp, ip, #4
    TCNTB0 = 0x0;
 c103364:	e59f3070 	ldr	r3, [pc, #112]	; c1033dc <timer0_close+0x84>
 c103368:	e3a02000 	mov	r2, #0
 c10336c:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c103370:	e59f3068 	ldr	r3, [pc, #104]	; c1033e0 <timer0_close+0x88>
 c103374:	e3a02000 	mov	r2, #0
 c103378:	e5832000 	str	r2, [r3]

    TCON   = (TCON  & ~(0xF << 0)) | (1 << 3) | (1 << 1); // one shot, load TCNT0, stop T0
 c10337c:	e59f3060 	ldr	r3, [pc, #96]	; c1033e4 <timer0_close+0x8c>
 c103380:	e59f205c 	ldr	r2, [pc, #92]	; c1033e4 <timer0_close+0x8c>
 c103384:	e5922000 	ldr	r2, [r2]
 c103388:	e3c2200f 	bic	r2, r2, #15
 c10338c:	e382200a 	orr	r2, r2, #10
 c103390:	e5832000 	str	r2, [r3]
   	TCON   = (TCON  & ~(0xF << 0)) | (1 << 3) | (1 << 0); // one shot, unload TCNT0, start T0
 c103394:	e59f3048 	ldr	r3, [pc, #72]	; c1033e4 <timer0_close+0x8c>
 c103398:	e59f2044 	ldr	r2, [pc, #68]	; c1033e4 <timer0_close+0x8c>
 c10339c:	e5922000 	ldr	r2, [r2]
 c1033a0:	e3c2200f 	bic	r2, r2, #15
 c1033a4:	e3822009 	orr	r2, r2, #9
 c1033a8:	e5832000 	str	r2, [r3]
    
    INTMSK     |= BIT_GLOBAL | BIT_TIMER0;
 c1033ac:	e59f2034 	ldr	r2, [pc, #52]	; c1033e8 <timer0_close+0x90>
 c1033b0:	e59f3030 	ldr	r3, [pc, #48]	; c1033e8 <timer0_close+0x90>
 c1033b4:	e5933000 	ldr	r3, [r3]
 c1033b8:	e3833301 	orr	r3, r3, #67108864	; 0x4000000
 c1033bc:	e3833a02 	orr	r3, r3, #8192	; 0x2000
 c1033c0:	e5823000 	str	r3, [r2]
    pISR_TIMER0 = isr_TIMER0_dummy;
 c1033c4:	e59f3020 	ldr	r3, [pc, #32]	; c1033ec <timer0_close+0x94>
 c1033c8:	e59f2020 	ldr	r2, [pc, #32]	; c1033f0 <timer0_close+0x98>
 c1033cc:	e5832000 	str	r2, [r3]
}
 c1033d0:	e24bd00c 	sub	sp, fp, #12
 c1033d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1033d8:	e12fff1e 	bx	lr
 c1033dc:	01d5000c 	.word	0x01d5000c
 c1033e0:	01d50010 	.word	0x01d50010
 c1033e4:	01d50008 	.word	0x01d50008
 c1033e8:	01e0000c 	.word	0x01e0000c
 c1033ec:	0c7fff54 	.word	0x0c7fff54
 c1033f0:	0c102474 	.word	0x0c102474

0c1033f4 <uart0_init>:
#include <s3c44b0x.h>
#include <uart.h>

void uart0_init(void)
{
 c1033f4:	e1a0c00d 	mov	ip, sp
 c1033f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1033fc:	e24cb004 	sub	fp, ip, #4
    UFCON0 = 0x1;
 c103400:	e59f3040 	ldr	r3, [pc, #64]	; c103448 <uart0_init+0x54>
 c103404:	e3a02001 	mov	r2, #1
 c103408:	e5832000 	str	r2, [r3]
    UMCON0 = 0x0;
 c10340c:	e59f3038 	ldr	r3, [pc, #56]	; c10344c <uart0_init+0x58>
 c103410:	e3a02000 	mov	r2, #0
 c103414:	e5832000 	str	r2, [r3]
    ULCON0 = 0x3;
 c103418:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c10341c:	e3a02003 	mov	r2, #3
 c103420:	e5832000 	str	r2, [r3]
    UBRDIV0 = 0x22;
 c103424:	e59f3024 	ldr	r3, [pc, #36]	; c103450 <uart0_init+0x5c>
 c103428:	e3a02022 	mov	r2, #34	; 0x22
 c10342c:	e5832000 	str	r2, [r3]
    UCON0 = 0x5;
 c103430:	e59f301c 	ldr	r3, [pc, #28]	; c103454 <uart0_init+0x60>
 c103434:	e3a02005 	mov	r2, #5
 c103438:	e5832000 	str	r2, [r3]
}
 c10343c:	e24bd00c 	sub	sp, fp, #12
 c103440:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103444:	e12fff1e 	bx	lr
 c103448:	01d00008 	.word	0x01d00008
 c10344c:	01d0000c 	.word	0x01d0000c
 c103450:	01d00028 	.word	0x01d00028
 c103454:	01d00004 	.word	0x01d00004

0c103458 <uart0_putchar>:

void uart0_putchar(char ch)
{
 c103458:	e1a0c00d 	mov	ip, sp
 c10345c:	e92dd800 	push	{fp, ip, lr, pc}
 c103460:	e24cb004 	sub	fp, ip, #4
 c103464:	e24dd008 	sub	sp, sp, #8
 c103468:	e1a03000 	mov	r3, r0
 c10346c:	e54b300d 	strb	r3, [fp, #-13]
    while(UFSTAT0 & (1 << 9));
 c103470:	e1a00000 	nop			; (mov r0, r0)
 c103474:	e59f3024 	ldr	r3, [pc, #36]	; c1034a0 <uart0_putchar+0x48>
 c103478:	e5933000 	ldr	r3, [r3]
 c10347c:	e2033c02 	and	r3, r3, #512	; 0x200
 c103480:	e3530000 	cmp	r3, #0
 c103484:	1afffffa 	bne	c103474 <uart0_putchar+0x1c>
    UTXH0 = ch;
 c103488:	e59f3014 	ldr	r3, [pc, #20]	; c1034a4 <uart0_putchar+0x4c>
 c10348c:	e55b200d 	ldrb	r2, [fp, #-13]
 c103490:	e5832000 	str	r2, [r3]
}        
 c103494:	e24bd00c 	sub	sp, fp, #12
 c103498:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10349c:	e12fff1e 	bx	lr
 c1034a0:	01d00018 	.word	0x01d00018
 c1034a4:	01d00020 	.word	0x01d00020

0c1034a8 <uart0_getchar>:

char uart0_getchar(void)
{
 c1034a8:	e1a0c00d 	mov	ip, sp
 c1034ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1034b0:	e24cb004 	sub	fp, ip, #4
    while(!(UFSTAT0 & 0xf));
 c1034b4:	e1a00000 	nop			; (mov r0, r0)
 c1034b8:	e59f3028 	ldr	r3, [pc, #40]	; c1034e8 <uart0_getchar+0x40>
 c1034bc:	e5933000 	ldr	r3, [r3]
 c1034c0:	e203300f 	and	r3, r3, #15
 c1034c4:	e3530000 	cmp	r3, #0
 c1034c8:	0afffffa 	beq	c1034b8 <uart0_getchar+0x10>
    return URXH0;
 c1034cc:	e59f3018 	ldr	r3, [pc, #24]	; c1034ec <uart0_getchar+0x44>
 c1034d0:	e5933000 	ldr	r3, [r3]
 c1034d4:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c1034d8:	e1a00003 	mov	r0, r3
 c1034dc:	e24bd00c 	sub	sp, fp, #12
 c1034e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1034e4:	e12fff1e 	bx	lr
 c1034e8:	01d00018 	.word	0x01d00018
 c1034ec:	01d00024 	.word	0x01d00024

0c1034f0 <uart0_puts>:

void uart0_puts(char *s) {
 c1034f0:	e1a0c00d 	mov	ip, sp
 c1034f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1034f8:	e24cb004 	sub	fp, ip, #4
 c1034fc:	e24dd008 	sub	sp, sp, #8
 c103500:	e50b0010 	str	r0, [fp, #-16]
    while(*s) {
 c103504:	ea000006 	b	c103524 <uart0_puts+0x34>
    	uart0_putchar(*s);
 c103508:	e51b3010 	ldr	r3, [fp, #-16]
 c10350c:	e5d33000 	ldrb	r3, [r3]
 c103510:	e1a00003 	mov	r0, r3
 c103514:	ebffffcf 	bl	c103458 <uart0_putchar>
    	++s;
 c103518:	e51b3010 	ldr	r3, [fp, #-16]
 c10351c:	e2833001 	add	r3, r3, #1
 c103520:	e50b3010 	str	r3, [fp, #-16]
    while(!(UFSTAT0 & 0xf));
    return URXH0;
}

void uart0_puts(char *s) {
    while(*s) {
 c103524:	e51b3010 	ldr	r3, [fp, #-16]
 c103528:	e5d33000 	ldrb	r3, [r3]
 c10352c:	e3530000 	cmp	r3, #0
 c103530:	1afffff4 	bne	c103508 <uart0_puts+0x18>
    	uart0_putchar(*s);
    	++s;
    }
}
 c103534:	e24bd00c 	sub	sp, fp, #12
 c103538:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10353c:	e12fff1e 	bx	lr

0c103540 <uart0_putint>:

void uart0_putint(int32 i) {
 c103540:	e1a0c00d 	mov	ip, sp
 c103544:	e92dd800 	push	{fp, ip, lr, pc}
 c103548:	e24cb004 	sub	fp, ip, #4
 c10354c:	e24dd020 	sub	sp, sp, #32
 c103550:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    char buff[11 + 1];
    char* _Idx = buff + 11;
 c103554:	e24b3020 	sub	r3, fp, #32
 c103558:	e283300b 	add	r3, r3, #11
 c10355c:	e50b3010 	str	r3, [fp, #-16]
    boolean _Neg = 0;
 c103560:	e3a03000 	mov	r3, #0
 c103564:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

    *_Idx = '\0';
 c103568:	e51b3010 	ldr	r3, [fp, #-16]
 c10356c:	e3a02000 	mov	r2, #0
 c103570:	e5c32000 	strb	r2, [r3]

    if(i == 0) {
 c103574:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103578:	e3530000 	cmp	r3, #0
 c10357c:	1a000008 	bne	c1035a4 <uart0_putint+0x64>
    	*--_Idx = '0';
 c103580:	e51b3010 	ldr	r3, [fp, #-16]
 c103584:	e2433001 	sub	r3, r3, #1
 c103588:	e50b3010 	str	r3, [fp, #-16]
 c10358c:	e51b3010 	ldr	r3, [fp, #-16]
 c103590:	e3a02030 	mov	r2, #48	; 0x30
 c103594:	e5c32000 	strb	r2, [r3]
    	uart0_puts(_Idx);
 c103598:	e51b0010 	ldr	r0, [fp, #-16]
 c10359c:	ebffffd3 	bl	c1034f0 <uart0_puts>
    	return;
 c1035a0:	ea000030 	b	c103668 <uart0_putint+0x128>
    }

    if(i < 0) {
 c1035a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1035a8:	e3530000 	cmp	r3, #0
 c1035ac:	aa00001f 	bge	c103630 <uart0_putint+0xf0>
    	_Neg = 1;
 c1035b0:	e3a03001 	mov	r3, #1
 c1035b4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    	i = -i;
 c1035b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1035bc:	e2633000 	rsb	r3, r3, #0
 c1035c0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }

    while(i) {
 c1035c4:	ea000019 	b	c103630 <uart0_putint+0xf0>
    	*--_Idx = (i % 10) + '0';
 c1035c8:	e51b3010 	ldr	r3, [fp, #-16]
 c1035cc:	e2433001 	sub	r3, r3, #1
 c1035d0:	e50b3010 	str	r3, [fp, #-16]
 c1035d4:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c1035d8:	e59f3094 	ldr	r3, [pc, #148]	; c103674 <uart0_putint+0x134>
 c1035dc:	e0c32391 	smull	r2, r3, r1, r3
 c1035e0:	e1a02143 	asr	r2, r3, #2
 c1035e4:	e1a03fc1 	asr	r3, r1, #31
 c1035e8:	e0632002 	rsb	r2, r3, r2
 c1035ec:	e1a03002 	mov	r3, r2
 c1035f0:	e1a03103 	lsl	r3, r3, #2
 c1035f4:	e0833002 	add	r3, r3, r2
 c1035f8:	e1a03083 	lsl	r3, r3, #1
 c1035fc:	e0632001 	rsb	r2, r3, r1
 c103600:	e20230ff 	and	r3, r2, #255	; 0xff
 c103604:	e2833030 	add	r3, r3, #48	; 0x30
 c103608:	e20320ff 	and	r2, r3, #255	; 0xff
 c10360c:	e51b3010 	ldr	r3, [fp, #-16]
 c103610:	e5c32000 	strb	r2, [r3]
    	i /= 10;
 c103614:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103618:	e59f2054 	ldr	r2, [pc, #84]	; c103674 <uart0_putint+0x134>
 c10361c:	e0c21293 	smull	r1, r2, r3, r2
 c103620:	e1a02142 	asr	r2, r2, #2
 c103624:	e1a03fc3 	asr	r3, r3, #31
 c103628:	e0633002 	rsb	r3, r3, r2
 c10362c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    if(i < 0) {
    	_Neg = 1;
    	i = -i;
    }

    while(i) {
 c103630:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103634:	e3530000 	cmp	r3, #0
 c103638:	1affffe2 	bne	c1035c8 <uart0_putint+0x88>
    	*--_Idx = (i % 10) + '0';
    	i /= 10;
    }

    if(_Neg) {
 c10363c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103640:	e3530000 	cmp	r3, #0
 c103644:	0a000005 	beq	c103660 <uart0_putint+0x120>
    	*--_Idx = '-';
 c103648:	e51b3010 	ldr	r3, [fp, #-16]
 c10364c:	e2433001 	sub	r3, r3, #1
 c103650:	e50b3010 	str	r3, [fp, #-16]
 c103654:	e51b3010 	ldr	r3, [fp, #-16]
 c103658:	e3a0202d 	mov	r2, #45	; 0x2d
 c10365c:	e5c32000 	strb	r2, [r3]
    }

    uart0_puts(_Idx);
 c103660:	e51b0010 	ldr	r0, [fp, #-16]
 c103664:	ebffffa1 	bl	c1034f0 <uart0_puts>

}
 c103668:	e24bd00c 	sub	sp, fp, #12
 c10366c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103670:	e12fff1e 	bx	lr
 c103674:	66666667 	.word	0x66666667

0c103678 <uart0_puthex>:

void uart0_puthex(uint32 i)
{
 c103678:	e1a0c00d 	mov	ip, sp
 c10367c:	e92dd800 	push	{fp, ip, lr, pc}
 c103680:	e24cb004 	sub	fp, ip, #4
 c103684:	e24dd018 	sub	sp, sp, #24
 c103688:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c10368c:	e24b301c 	sub	r3, fp, #28
 c103690:	e2833008 	add	r3, r3, #8
 c103694:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c103698:	e51b3010 	ldr	r3, [fp, #-16]
 c10369c:	e3a02000 	mov	r2, #0
 c1036a0:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c1036a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1036a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1036ac:	e203300f 	and	r3, r3, #15
 c1036b0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c1036b4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1036b8:	e3530009 	cmp	r3, #9
 c1036bc:	8a000008 	bhi	c1036e4 <uart0_puthex+0x6c>
            *--p = '0' + c;
 c1036c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1036c4:	e2433001 	sub	r3, r3, #1
 c1036c8:	e50b3010 	str	r3, [fp, #-16]
 c1036cc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1036d0:	e2833030 	add	r3, r3, #48	; 0x30
 c1036d4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1036d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1036dc:	e5c32000 	strb	r2, [r3]
 c1036e0:	ea000007 	b	c103704 <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c1036e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1036e8:	e2433001 	sub	r3, r3, #1
 c1036ec:	e50b3010 	str	r3, [fp, #-16]
 c1036f0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1036f4:	e2833057 	add	r3, r3, #87	; 0x57
 c1036f8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1036fc:	e51b3010 	ldr	r3, [fp, #-16]
 c103700:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c103704:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103708:	e1a03223 	lsr	r3, r3, #4
 c10370c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c103710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103714:	e3530000 	cmp	r3, #0
 c103718:	1affffe1 	bne	c1036a4 <uart0_puthex+0x2c>

    uart0_puts( p );
 c10371c:	e51b0010 	ldr	r0, [fp, #-16]
 c103720:	ebffff72 	bl	c1034f0 <uart0_puts>
}
 c103724:	e24bd00c 	sub	sp, fp, #12
 c103728:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10372c:	e12fff1e 	bx	lr

0c103730 <uart0_gets>:

void uart0_gets(char *s) {
 c103730:	e1a0c00d 	mov	ip, sp
 c103734:	e92dd800 	push	{fp, ip, lr, pc}
 c103738:	e24cb004 	sub	fp, ip, #4
 c10373c:	e24dd010 	sub	sp, sp, #16
 c103740:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char _Ch;

    do {
    	_Ch = uart0_getchar();
 c103744:	ebffff57 	bl	c1034a8 <uart0_getchar>
 c103748:	e1a03000 	mov	r3, r0
 c10374c:	e54b300d 	strb	r3, [fp, #-13]
    	*s++ = _Ch;
 c103750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103754:	e55b200d 	ldrb	r2, [fp, #-13]
 c103758:	e5c32000 	strb	r2, [r3]
 c10375c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103760:	e2833001 	add	r3, r3, #1
 c103764:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    } while(_Ch != '\n' && _Ch != '\r');
 c103768:	e55b300d 	ldrb	r3, [fp, #-13]
 c10376c:	e353000a 	cmp	r3, #10
 c103770:	0a000002 	beq	c103780 <uart0_gets+0x50>
 c103774:	e55b300d 	ldrb	r3, [fp, #-13]
 c103778:	e353000d 	cmp	r3, #13
 c10377c:	1afffff0 	bne	c103744 <uart0_gets+0x14>

    *(s - 1) = '\0';
 c103780:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103784:	e2433001 	sub	r3, r3, #1
 c103788:	e3a02000 	mov	r2, #0
 c10378c:	e5c32000 	strb	r2, [r3]
}
 c103790:	e24bd00c 	sub	sp, fp, #12
 c103794:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103798:	e12fff1e 	bx	lr

0c10379c <uart0_getint>:

int32 uart0_getint(void) {
 c10379c:	e1a0c00d 	mov	ip, sp
 c1037a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1037a4:	e24cb004 	sub	fp, ip, #4
 c1037a8:	e24dd018 	sub	sp, sp, #24
	char _Buff[11 + 1];
	uart0_gets(_Buff);
 c1037ac:	e24b3024 	sub	r3, fp, #36	; 0x24
 c1037b0:	e1a00003 	mov	r0, r3
 c1037b4:	ebffffdd 	bl	c103730 <uart0_gets>

	int32 result = 0;
 c1037b8:	e3a03000 	mov	r3, #0
 c1037bc:	e50b3010 	str	r3, [fp, #-16]
	boolean _Neg = 0;
 c1037c0:	e3a03000 	mov	r3, #0
 c1037c4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	uint32 _Idx	 = 0;
 c1037c8:	e3a03000 	mov	r3, #0
 c1037cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	if(_Buff[0] == '-') {
 c1037d0:	e55b3024 	ldrb	r3, [fp, #-36]	; 0xffffffdc
 c1037d4:	e353002d 	cmp	r3, #45	; 0x2d
 c1037d8:	1a000018 	bne	c103840 <uart0_getint+0xa4>
		_Neg = 1;
 c1037dc:	e3a03001 	mov	r3, #1
 c1037e0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		++_Idx;
 c1037e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1037e8:	e2833001 	add	r3, r3, #1
 c1037ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}

	while(_Buff[_Idx] >= '0' && _Buff[_Idx] <= '9') {
 c1037f0:	ea000013 	b	c103844 <uart0_getint+0xa8>
		result = result * 10 + (_Buff[_Idx] - '0');
 c1037f4:	e51b2010 	ldr	r2, [fp, #-16]
 c1037f8:	e1a03002 	mov	r3, r2
 c1037fc:	e1a03103 	lsl	r3, r3, #2
 c103800:	e0833002 	add	r3, r3, r2
 c103804:	e1a03083 	lsl	r3, r3, #1
 c103808:	e1a02003 	mov	r2, r3
 c10380c:	e3e03017 	mvn	r3, #23
 c103810:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c103814:	e24b000c 	sub	r0, fp, #12
 c103818:	e0801001 	add	r1, r0, r1
 c10381c:	e0813003 	add	r3, r1, r3
 c103820:	e5d33000 	ldrb	r3, [r3]
 c103824:	e2433030 	sub	r3, r3, #48	; 0x30
 c103828:	e0823003 	add	r3, r2, r3
 c10382c:	e50b3010 	str	r3, [fp, #-16]
		++_Idx;
 c103830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103834:	e2833001 	add	r3, r3, #1
 c103838:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10383c:	ea000000 	b	c103844 <uart0_getint+0xa8>
	if(_Buff[0] == '-') {
		_Neg = 1;
		++_Idx;
	}

	while(_Buff[_Idx] >= '0' && _Buff[_Idx] <= '9') {
 c103840:	e1a00000 	nop			; (mov r0, r0)
 c103844:	e3e03017 	mvn	r3, #23
 c103848:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10384c:	e24b100c 	sub	r1, fp, #12
 c103850:	e0812002 	add	r2, r1, r2
 c103854:	e0823003 	add	r3, r2, r3
 c103858:	e5d33000 	ldrb	r3, [r3]
 c10385c:	e353002f 	cmp	r3, #47	; 0x2f
 c103860:	9a000007 	bls	c103884 <uart0_getint+0xe8>
 c103864:	e3e03017 	mvn	r3, #23
 c103868:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10386c:	e24b000c 	sub	r0, fp, #12
 c103870:	e0802002 	add	r2, r0, r2
 c103874:	e0823003 	add	r3, r2, r3
 c103878:	e5d33000 	ldrb	r3, [r3]
 c10387c:	e3530039 	cmp	r3, #57	; 0x39
 c103880:	9affffdb 	bls	c1037f4 <uart0_getint+0x58>
		result = result * 10 + (_Buff[_Idx] - '0');
		++_Idx;
	}

	if(_Neg) {
 c103884:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103888:	e3530000 	cmp	r3, #0
 c10388c:	0a000002 	beq	c10389c <uart0_getint+0x100>
		result = -result;
 c103890:	e51b3010 	ldr	r3, [fp, #-16]
 c103894:	e2633000 	rsb	r3, r3, #0
 c103898:	e50b3010 	str	r3, [fp, #-16]
	}

	return result;
 c10389c:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1038a0:	e1a00003 	mov	r0, r3
 c1038a4:	e24bd00c 	sub	sp, fp, #12
 c1038a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1038ac:	e12fff1e 	bx	lr

0c1038b0 <uart0_gethex>:

uint32 uart0_gethex(void) {
 c1038b0:	e1a0c00d 	mov	ip, sp
 c1038b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1038b8:	e24cb004 	sub	fp, ip, #4
 c1038bc:	e24dd018 	sub	sp, sp, #24
    char _Buff[8 + 1];
    uart0_gets(_Buff);
 c1038c0:	e24b3020 	sub	r3, fp, #32
 c1038c4:	e1a00003 	mov	r0, r3
 c1038c8:	ebffff98 	bl	c103730 <uart0_gets>

    uint32 result = 0;
 c1038cc:	e3a03000 	mov	r3, #0
 c1038d0:	e50b3010 	str	r3, [fp, #-16]
    char* _Idx 	  = _Buff;
 c1038d4:	e24b3020 	sub	r3, fp, #32
 c1038d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    while(*_Idx != '\0') {
 c1038dc:	ea00002b 	b	c103990 <uart0_gethex+0xe0>
    	char _Ch = *_Idx;
 c1038e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1038e4:	e5d33000 	ldrb	r3, [r3]
 c1038e8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    	if	   (_Ch >= '0' && _Ch <= '9')
 c1038ec:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1038f0:	e353002f 	cmp	r3, #47	; 0x2f
 c1038f4:	9a000009 	bls	c103920 <uart0_gethex+0x70>
 c1038f8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1038fc:	e3530039 	cmp	r3, #57	; 0x39
 c103900:	8a000006 	bhi	c103920 <uart0_gethex+0x70>
    		result = result * 16 + (_Ch - '0');
 c103904:	e51b3010 	ldr	r3, [fp, #-16]
 c103908:	e1a02203 	lsl	r2, r3, #4
 c10390c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103910:	e0823003 	add	r3, r2, r3
 c103914:	e2433030 	sub	r3, r3, #48	; 0x30
 c103918:	e50b3010 	str	r3, [fp, #-16]
 c10391c:	ea000018 	b	c103984 <uart0_gethex+0xd4>
    	else if(_Ch >= 'a' && _Ch <= 'f')
 c103920:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103924:	e3530060 	cmp	r3, #96	; 0x60
 c103928:	9a000009 	bls	c103954 <uart0_gethex+0xa4>
 c10392c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103930:	e3530066 	cmp	r3, #102	; 0x66
 c103934:	8a000006 	bhi	c103954 <uart0_gethex+0xa4>
    		result = result * 16 + (_Ch - 'a' + 10);
 c103938:	e51b3010 	ldr	r3, [fp, #-16]
 c10393c:	e1a02203 	lsl	r2, r3, #4
 c103940:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103944:	e0823003 	add	r3, r2, r3
 c103948:	e2433057 	sub	r3, r3, #87	; 0x57
 c10394c:	e50b3010 	str	r3, [fp, #-16]
 c103950:	ea00000b 	b	c103984 <uart0_gethex+0xd4>
    	else if(_Ch >= 'A' && _Ch <= 'F')
 c103954:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103958:	e3530040 	cmp	r3, #64	; 0x40
 c10395c:	9a00000f 	bls	c1039a0 <uart0_gethex+0xf0>
 c103960:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103964:	e3530046 	cmp	r3, #70	; 0x46
 c103968:	8a00000c 	bhi	c1039a0 <uart0_gethex+0xf0>
    		result = result * 16 + (_Ch - 'A' + 10);
 c10396c:	e51b3010 	ldr	r3, [fp, #-16]
 c103970:	e1a02203 	lsl	r2, r3, #4
 c103974:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103978:	e0823003 	add	r3, r2, r3
 c10397c:	e2433037 	sub	r3, r3, #55	; 0x37
 c103980:	e50b3010 	str	r3, [fp, #-16]
    	else break;

    	++_Idx;
 c103984:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103988:	e2833001 	add	r3, r3, #1
 c10398c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uart0_gets(_Buff);

    uint32 result = 0;
    char* _Idx 	  = _Buff;

    while(*_Idx != '\0') {
 c103990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103994:	e5d33000 	ldrb	r3, [r3]
 c103998:	e3530000 	cmp	r3, #0
 c10399c:	1affffcf 	bne	c1038e0 <uart0_gethex+0x30>
    	else break;

    	++_Idx;
    }

    return result;
 c1039a0:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1039a4:	e1a00003 	mov	r0, r3
 c1039a8:	e24bd00c 	sub	sp, fp, #12
 c1039ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1039b0:	e12fff1e 	bx	lr

0c1039b4 <uda1341ts_init>:

static uint8 volume;
static uint8 state;

void uda1341ts_init( void )
{
 c1039b4:	e1a0c00d 	mov	ip, sp
 c1039b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1039bc:	e24cb004 	sub	fp, ip, #4
    L3_init();     
 c1039c0:	eb0000de 	bl	c103d40 <L3_init>
    
    L3_putByte( (ADDRESS << 2) | STATUS, L3_ADDR_MODE );
 c1039c4:	e3a00016 	mov	r0, #22
 c1039c8:	e3a01000 	mov	r1, #0
 c1039cc:	eb0000e7 	bl	c103d70 <L3_putByte>
    L3_putByte( (1 << 6) | (2 << 4), L3_DATA_MODE );
 c1039d0:	e3a00060 	mov	r0, #96	; 0x60
 c1039d4:	e3a01001 	mov	r1, #1
 c1039d8:	eb0000e4 	bl	c103d70 <L3_putByte>
    L3_putByte( (2 << 4), L3_DATA_MODE );
 c1039dc:	e3a00020 	mov	r0, #32
 c1039e0:	e3a01001 	mov	r1, #1
 c1039e4:	eb0000e1 	bl	c103d70 <L3_putByte>

    L3_putByte( (ADDRESS << 2) | DATA0, L3_ADDR_MODE  ); 
 c1039e8:	e3a00014 	mov	r0, #20
 c1039ec:	e3a01000 	mov	r1, #0
 c1039f0:	eb0000de 	bl	c103d70 <L3_putByte>
    L3_putByte( EA | (2), L3_DATA_MODE ); 
 c1039f4:	e3a000c2 	mov	r0, #194	; 0xc2
 c1039f8:	e3a01001 	mov	r1, #1
 c1039fc:	eb0000db 	bl	c103d70 <L3_putByte>
    L3_putByte( ED | 1, L3_DATA_MODE );
 c103a00:	e3a000e1 	mov	r0, #225	; 0xe1
 c103a04:	e3a01001 	mov	r1, #1
 c103a08:	eb0000d8 	bl	c103d70 <L3_putByte>
  
    uda1341ts_setvol( VOL_MED );
 c103a0c:	e3a00020 	mov	r0, #32
 c103a10:	eb00006a 	bl	c103bc0 <uda1341ts_setvol>

    uda1341ts_on( UDA_DAC );
 c103a14:	e3a00001 	mov	r0, #1
 c103a18:	eb00001b 	bl	c103a8c <uda1341ts_on>
    uda1341ts_on( UDA_ADC );
 c103a1c:	e3a00002 	mov	r0, #2
 c103a20:	eb000019 	bl	c103a8c <uda1341ts_on>
}
 c103a24:	e24bd00c 	sub	sp, fp, #12
 c103a28:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103a2c:	e12fff1e 	bx	lr

0c103a30 <uda1341ts_mute>:

void uda1341ts_mute( uint8 on )
{
 c103a30:	e1a0c00d 	mov	ip, sp
 c103a34:	e92dd800 	push	{fp, ip, lr, pc}
 c103a38:	e24cb004 	sub	fp, ip, #4
 c103a3c:	e24dd008 	sub	sp, sp, #8
 c103a40:	e1a03000 	mov	r3, r0
 c103a44:	e54b300d 	strb	r3, [fp, #-13]
    L3_putByte((ADDRESS << 2) | DATA0, L3_ADDR_MODE);
 c103a48:	e3a00014 	mov	r0, #20
 c103a4c:	e3a01000 	mov	r1, #0
 c103a50:	eb0000c6 	bl	c103d70 <L3_putByte>
    L3_putByte((0x2 << 6) | ((on & 1) << 2), L3_DATA_MODE);
 c103a54:	e55b300d 	ldrb	r3, [fp, #-13]
 c103a58:	e2033001 	and	r3, r3, #1
 c103a5c:	e1a03103 	lsl	r3, r3, #2
 c103a60:	e20330ff 	and	r3, r3, #255	; 0xff
 c103a64:	e1e03c83 	mvn	r3, r3, lsl #25
 c103a68:	e1e03ca3 	mvn	r3, r3, lsr #25
 c103a6c:	e20330ff 	and	r3, r3, #255	; 0xff
 c103a70:	e20330ff 	and	r3, r3, #255	; 0xff
 c103a74:	e1a00003 	mov	r0, r3
 c103a78:	e3a01001 	mov	r1, #1
 c103a7c:	eb0000bb 	bl	c103d70 <L3_putByte>
};
 c103a80:	e24bd00c 	sub	sp, fp, #12
 c103a84:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103a88:	e12fff1e 	bx	lr

0c103a8c <uda1341ts_on>:

void uda1341ts_on( uint8 converter )
{
 c103a8c:	e1a0c00d 	mov	ip, sp
 c103a90:	e92dd800 	push	{fp, ip, lr, pc}
 c103a94:	e24cb004 	sub	fp, ip, #4
 c103a98:	e24dd008 	sub	sp, sp, #8
 c103a9c:	e1a03000 	mov	r3, r0
 c103aa0:	e54b300d 	strb	r3, [fp, #-13]
    state |= (1 << 7) | converter;
 c103aa4:	e59f304c 	ldr	r3, [pc, #76]	; c103af8 <uda1341ts_on+0x6c>
 c103aa8:	e5d32000 	ldrb	r2, [r3]
 c103aac:	e55b300d 	ldrb	r3, [fp, #-13]
 c103ab0:	e1823003 	orr	r3, r2, r3
 c103ab4:	e20330ff 	and	r3, r3, #255	; 0xff
 c103ab8:	e1e03c83 	mvn	r3, r3, lsl #25
 c103abc:	e1e03ca3 	mvn	r3, r3, lsr #25
 c103ac0:	e20320ff 	and	r2, r3, #255	; 0xff
 c103ac4:	e59f302c 	ldr	r3, [pc, #44]	; c103af8 <uda1341ts_on+0x6c>
 c103ac8:	e5c32000 	strb	r2, [r3]
    L3_putByte( (ADDRESS << 2) | STATUS, L3_ADDR_MODE);
 c103acc:	e3a00016 	mov	r0, #22
 c103ad0:	e3a01000 	mov	r1, #0
 c103ad4:	eb0000a5 	bl	c103d70 <L3_putByte>
    L3_putByte(state, L3_DATA_MODE);
 c103ad8:	e59f3018 	ldr	r3, [pc, #24]	; c103af8 <uda1341ts_on+0x6c>
 c103adc:	e5d33000 	ldrb	r3, [r3]
 c103ae0:	e1a00003 	mov	r0, r3
 c103ae4:	e3a01001 	mov	r1, #1
 c103ae8:	eb0000a0 	bl	c103d70 <L3_putByte>
}
 c103aec:	e24bd00c 	sub	sp, fp, #12
 c103af0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103af4:	e12fff1e 	bx	lr
 c103af8:	0c10567d 	.word	0x0c10567d

0c103afc <uda1341ts_off>:

void uda1341ts_off( uint8 converter )
{
 c103afc:	e1a0c00d 	mov	ip, sp
 c103b00:	e92dd800 	push	{fp, ip, lr, pc}
 c103b04:	e24cb004 	sub	fp, ip, #4
 c103b08:	e24dd008 	sub	sp, sp, #8
 c103b0c:	e1a03000 	mov	r3, r0
 c103b10:	e54b300d 	strb	r3, [fp, #-13]
    state &= ~converter;
 c103b14:	e55b300d 	ldrb	r3, [fp, #-13]
 c103b18:	e1e03003 	mvn	r3, r3
 c103b1c:	e20320ff 	and	r2, r3, #255	; 0xff
 c103b20:	e59f3044 	ldr	r3, [pc, #68]	; c103b6c <uda1341ts_off+0x70>
 c103b24:	e5d33000 	ldrb	r3, [r3]
 c103b28:	e20330ff 	and	r3, r3, #255	; 0xff
 c103b2c:	e0023003 	and	r3, r2, r3
 c103b30:	e20330ff 	and	r3, r3, #255	; 0xff
 c103b34:	e20320ff 	and	r2, r3, #255	; 0xff
 c103b38:	e59f302c 	ldr	r3, [pc, #44]	; c103b6c <uda1341ts_off+0x70>
 c103b3c:	e5c32000 	strb	r2, [r3]
    L3_putByte( (ADDRESS << 2) | STATUS, L3_ADDR_MODE);
 c103b40:	e3a00016 	mov	r0, #22
 c103b44:	e3a01000 	mov	r1, #0
 c103b48:	eb000088 	bl	c103d70 <L3_putByte>
    L3_putByte(state, L3_DATA_MODE);
 c103b4c:	e59f3018 	ldr	r3, [pc, #24]	; c103b6c <uda1341ts_off+0x70>
 c103b50:	e5d33000 	ldrb	r3, [r3]
 c103b54:	e1a00003 	mov	r0, r3
 c103b58:	e3a01001 	mov	r1, #1
 c103b5c:	eb000083 	bl	c103d70 <L3_putByte>
}
 c103b60:	e24bd00c 	sub	sp, fp, #12
 c103b64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103b68:	e12fff1e 	bx	lr
 c103b6c:	0c10567d 	.word	0x0c10567d

0c103b70 <uda1341ts_status>:

uint8 uda1341ts_status( uint8 converter )
{
 c103b70:	e1a0c00d 	mov	ip, sp
 c103b74:	e92dd800 	push	{fp, ip, lr, pc}
 c103b78:	e24cb004 	sub	fp, ip, #4
 c103b7c:	e24dd008 	sub	sp, sp, #8
 c103b80:	e1a03000 	mov	r3, r0
 c103b84:	e54b300d 	strb	r3, [fp, #-13]
    return (state >> (converter - 1)) & 1;
 c103b88:	e59f302c 	ldr	r3, [pc, #44]	; c103bbc <uda1341ts_status+0x4c>
 c103b8c:	e5d33000 	ldrb	r3, [r3]
 c103b90:	e1a02003 	mov	r2, r3
 c103b94:	e55b300d 	ldrb	r3, [fp, #-13]
 c103b98:	e2433001 	sub	r3, r3, #1
 c103b9c:	e1a03352 	asr	r3, r2, r3
 c103ba0:	e20330ff 	and	r3, r3, #255	; 0xff
 c103ba4:	e2033001 	and	r3, r3, #1
 c103ba8:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c103bac:	e1a00003 	mov	r0, r3
 c103bb0:	e24bd00c 	sub	sp, fp, #12
 c103bb4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103bb8:	e12fff1e 	bx	lr
 c103bbc:	0c10567d 	.word	0x0c10567d

0c103bc0 <uda1341ts_setvol>:

void uda1341ts_setvol( uint8 vol )
{
 c103bc0:	e1a0c00d 	mov	ip, sp
 c103bc4:	e92dd800 	push	{fp, ip, lr, pc}
 c103bc8:	e24cb004 	sub	fp, ip, #4
 c103bcc:	e24dd008 	sub	sp, sp, #8
 c103bd0:	e1a03000 	mov	r3, r0
 c103bd4:	e54b300d 	strb	r3, [fp, #-13]
    L3_putByte( (ADDRESS << 2) | DATA0, L3_ADDR_MODE);
 c103bd8:	e3a00014 	mov	r0, #20
 c103bdc:	e3a01000 	mov	r1, #0
 c103be0:	eb000062 	bl	c103d70 <L3_putByte>
    L3_putByte(0x3f & (0x3f - vol), L3_DATA_MODE);
 c103be4:	e55b300d 	ldrb	r3, [fp, #-13]
 c103be8:	e263303f 	rsb	r3, r3, #63	; 0x3f
 c103bec:	e20330ff 	and	r3, r3, #255	; 0xff
 c103bf0:	e203303f 	and	r3, r3, #63	; 0x3f
 c103bf4:	e20330ff 	and	r3, r3, #255	; 0xff
 c103bf8:	e1a00003 	mov	r0, r3
 c103bfc:	e3a01001 	mov	r1, #1
 c103c00:	eb00005a 	bl	c103d70 <L3_putByte>
    volume = vol;
 c103c04:	e59f3010 	ldr	r3, [pc, #16]	; c103c1c <uda1341ts_setvol+0x5c>
 c103c08:	e55b200d 	ldrb	r2, [fp, #-13]
 c103c0c:	e5c32000 	strb	r2, [r3]
};
 c103c10:	e24bd00c 	sub	sp, fp, #12
 c103c14:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103c18:	e12fff1e 	bx	lr
 c103c1c:	0c10567c 	.word	0x0c10567c

0c103c20 <uda1341ts_getvol>:

uint8 uda1341ts_getvol( void )
{
 c103c20:	e1a0c00d 	mov	ip, sp
 c103c24:	e92dd800 	push	{fp, ip, lr, pc}
 c103c28:	e24cb004 	sub	fp, ip, #4
    return volume;
 c103c2c:	e59f3010 	ldr	r3, [pc, #16]	; c103c44 <uda1341ts_getvol+0x24>
 c103c30:	e5d33000 	ldrb	r3, [r3]
};
 c103c34:	e1a00003 	mov	r0, r3
 c103c38:	e24bd00c 	sub	sp, fp, #12
 c103c3c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103c40:	e12fff1e 	bx	lr
 c103c44:	0c10567c 	.word	0x0c10567c

0c103c48 <bdma0_init>:
#include <dma.h>

extern void isr_BDMA0_dummy( void ); 

void bdma0_init( void )
{
 c103c48:	e1a0c00d 	mov	ip, sp
 c103c4c:	e92dd800 	push	{fp, ip, lr, pc}
 c103c50:	e24cb004 	sub	fp, ip, #4
    BDCON0  = 0;
 c103c54:	e3a0377e 	mov	r3, #33030144	; 0x1f80000
 c103c58:	e3a02000 	mov	r2, #0
 c103c5c:	e5832000 	str	r2, [r3]
    BDISRC0 = 0;
 c103c60:	e59f3028 	ldr	r3, [pc, #40]	; c103c90 <bdma0_init+0x48>
 c103c64:	e3a02000 	mov	r2, #0
 c103c68:	e5832000 	str	r2, [r3]
    BDIDES0 = 0;
 c103c6c:	e59f3020 	ldr	r3, [pc, #32]	; c103c94 <bdma0_init+0x4c>
 c103c70:	e3a02000 	mov	r2, #0
 c103c74:	e5832000 	str	r2, [r3]
    BDICNT0 = 0;
 c103c78:	e59f3018 	ldr	r3, [pc, #24]	; c103c98 <bdma0_init+0x50>
 c103c7c:	e3a02000 	mov	r2, #0
 c103c80:	e5832000 	str	r2, [r3]
}
 c103c84:	e24bd00c 	sub	sp, fp, #12
 c103c88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103c8c:	e12fff1e 	bx	lr
 c103c90:	01f80004 	.word	0x01f80004
 c103c94:	01f80008 	.word	0x01f80008
 c103c98:	01f8000c 	.word	0x01f8000c

0c103c9c <bdma0_open>:

void bdma0_open( void (*isr)(void) )
{
 c103c9c:	e1a0c00d 	mov	ip, sp
 c103ca0:	e92dd800 	push	{fp, ip, lr, pc}
 c103ca4:	e24cb004 	sub	fp, ip, #4
 c103ca8:	e24dd008 	sub	sp, sp, #8
 c103cac:	e50b0010 	str	r0, [fp, #-16]
    pISR_BDMA0 = isr;
 c103cb0:	e59f3034 	ldr	r3, [pc, #52]	; c103cec <bdma0_open+0x50>
 c103cb4:	e51b2010 	ldr	r2, [fp, #-16]
 c103cb8:	e5832000 	str	r2, [r3]
    I_ISPC     = BIT_BDMA0;
 c103cbc:	e59f302c 	ldr	r3, [pc, #44]	; c103cf0 <bdma0_open+0x54>
 c103cc0:	e3a02802 	mov	r2, #131072	; 0x20000
 c103cc4:	e5832000 	str	r2, [r3]
    INTMSK    &= ~(BIT_GLOBAL | BIT_BDMA0);
 c103cc8:	e59f2024 	ldr	r2, [pc, #36]	; c103cf4 <bdma0_open+0x58>
 c103ccc:	e59f3020 	ldr	r3, [pc, #32]	; c103cf4 <bdma0_open+0x58>
 c103cd0:	e5933000 	ldr	r3, [r3]
 c103cd4:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c103cd8:	e3c33802 	bic	r3, r3, #131072	; 0x20000
 c103cdc:	e5823000 	str	r3, [r2]
}
 c103ce0:	e24bd00c 	sub	sp, fp, #12
 c103ce4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103ce8:	e12fff1e 	bx	lr
 c103cec:	0c7fff64 	.word	0x0c7fff64
 c103cf0:	01e00024 	.word	0x01e00024
 c103cf4:	01e0000c 	.word	0x01e0000c

0c103cf8 <bdma0_close>:

void bdma0_close( void )
{
 c103cf8:	e1a0c00d 	mov	ip, sp
 c103cfc:	e92dd800 	push	{fp, ip, lr, pc}
 c103d00:	e24cb004 	sub	fp, ip, #4
    INTMSK    |= (BIT_GLOBAL | BIT_BDMA0);
 c103d04:	e59f2028 	ldr	r2, [pc, #40]	; c103d34 <bdma0_close+0x3c>
 c103d08:	e59f3024 	ldr	r3, [pc, #36]	; c103d34 <bdma0_close+0x3c>
 c103d0c:	e5933000 	ldr	r3, [r3]
 c103d10:	e3833301 	orr	r3, r3, #67108864	; 0x4000000
 c103d14:	e3833802 	orr	r3, r3, #131072	; 0x20000
 c103d18:	e5823000 	str	r3, [r2]
    pISR_BDMA0 = isr_BDMA0_dummy;
 c103d1c:	e59f3014 	ldr	r3, [pc, #20]	; c103d38 <bdma0_close+0x40>
 c103d20:	e59f2014 	ldr	r2, [pc, #20]	; c103d3c <bdma0_close+0x44>
 c103d24:	e5832000 	str	r2, [r3]
}
 c103d28:	e24bd00c 	sub	sp, fp, #12
 c103d2c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103d30:	e12fff1e 	bx	lr
 c103d34:	01e0000c 	.word	0x01e0000c
 c103d38:	0c7fff64 	.word	0x0c7fff64
 c103d3c:	0c102524 	.word	0x0c102524

0c103d40 <L3_init>:
#include <leds.h>

#define SHORT_DELAY    { int8 j; for( j=0; j<4; j++ ); }

void L3_init( void )
{
 c103d40:	e1a0c00d 	mov	ip, sp
 c103d44:	e92dd800 	push	{fp, ip, lr, pc}
 c103d48:	e24cb004 	sub	fp, ip, #4
    PDATB |= (1 << 5) | (L3_DATA_MODE << 4);
 c103d4c:	e59f3018 	ldr	r3, [pc, #24]	; c103d6c <L3_init+0x2c>
 c103d50:	e59f2014 	ldr	r2, [pc, #20]	; c103d6c <L3_init+0x2c>
 c103d54:	e5922000 	ldr	r2, [r2]
 c103d58:	e3822030 	orr	r2, r2, #48	; 0x30
 c103d5c:	e5832000 	str	r2, [r3]

}
 c103d60:	e24bd00c 	sub	sp, fp, #12
 c103d64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103d68:	e12fff1e 	bx	lr
 c103d6c:	01d2000c 	.word	0x01d2000c

0c103d70 <L3_putByte>:

void L3_putByte( uint8 byte, uint8 mode )
{
 c103d70:	e1a0c00d 	mov	ip, sp
 c103d74:	e92dd800 	push	{fp, ip, lr, pc}
 c103d78:	e24cb004 	sub	fp, ip, #4
 c103d7c:	e24dd010 	sub	sp, sp, #16
 c103d80:	e1a02000 	mov	r2, r0
 c103d84:	e1a03001 	mov	r3, r1
 c103d88:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c103d8c:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
    uint8 i;
    uint8 rled, lled;
    
    rled = !led_status( RIGHT_LED );
 c103d90:	e3a00002 	mov	r0, #2
 c103d94:	eb000098 	bl	c103ffc <led_status>
 c103d98:	e1a03000 	mov	r3, r0
 c103d9c:	e3530000 	cmp	r3, #0
 c103da0:	13a03000 	movne	r3, #0
 c103da4:	03a03001 	moveq	r3, #1
 c103da8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    lled = !led_status( LEFT_LED );    
 c103dac:	e3a00001 	mov	r0, #1
 c103db0:	eb000091 	bl	c103ffc <led_status>
 c103db4:	e1a03000 	mov	r3, r0
 c103db8:	e3530000 	cmp	r3, #0
 c103dbc:	13a03000 	movne	r3, #0
 c103dc0:	03a03001 	moveq	r3, #1
 c103dc4:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
   
    PDATB =  (1 << 5) | (mode << 4);
 c103dc8:	e59f3114 	ldr	r3, [pc, #276]	; c103ee4 <L3_putByte+0x174>
 c103dcc:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c103dd0:	e1a02202 	lsl	r2, r2, #4
 c103dd4:	e3822020 	orr	r2, r2, #32
 c103dd8:	e5832000 	str	r2, [r3]
    SHORT_DELAY;
 c103ddc:	e3a03000 	mov	r3, #0
 c103de0:	e54b300e 	strb	r3, [fp, #-14]
 c103de4:	ea000002 	b	c103df4 <L3_putByte+0x84>
 c103de8:	e55b300e 	ldrb	r3, [fp, #-14]
 c103dec:	e2833001 	add	r3, r3, #1
 c103df0:	e54b300e 	strb	r3, [fp, #-14]
 c103df4:	e15b30de 	ldrsb	r3, [fp, #-14]
 c103df8:	e3530003 	cmp	r3, #3
 c103dfc:	dafffff9 	ble	c103de8 <L3_putByte+0x78>

    for( i=0; i<8; i++ )
 c103e00:	e3a03000 	mov	r3, #0
 c103e04:	e54b300d 	strb	r3, [fp, #-13]
 c103e08:	ea000027 	b	c103eac <L3_putByte+0x13c>
    {
        PDATB = (0 << 5) | (mode << 4);
 c103e0c:	e59f30d0 	ldr	r3, [pc, #208]	; c103ee4 <L3_putByte+0x174>
 c103e10:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c103e14:	e1a02202 	lsl	r2, r2, #4
 c103e18:	e5832000 	str	r2, [r3]
        PDATA = (byte & (1 << i)) << (9 - i);
 c103e1c:	e59f30c4 	ldr	r3, [pc, #196]	; c103ee8 <L3_putByte+0x178>
 c103e20:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
 c103e24:	e55b200d 	ldrb	r2, [fp, #-13]
 c103e28:	e3a00001 	mov	r0, #1
 c103e2c:	e1a02210 	lsl	r2, r0, r2
 c103e30:	e0011002 	and	r1, r1, r2
 c103e34:	e55b200d 	ldrb	r2, [fp, #-13]
 c103e38:	e2622009 	rsb	r2, r2, #9
 c103e3c:	e1a02211 	lsl	r2, r1, r2
 c103e40:	e5832000 	str	r2, [r3]
        SHORT_DELAY;    
 c103e44:	e3a03000 	mov	r3, #0
 c103e48:	e54b300f 	strb	r3, [fp, #-15]
 c103e4c:	ea000002 	b	c103e5c <L3_putByte+0xec>
 c103e50:	e55b300f 	ldrb	r3, [fp, #-15]
 c103e54:	e2833001 	add	r3, r3, #1
 c103e58:	e54b300f 	strb	r3, [fp, #-15]
 c103e5c:	e15b30df 	ldrsb	r3, [fp, #-15]
 c103e60:	e3530003 	cmp	r3, #3
 c103e64:	dafffff9 	ble	c103e50 <L3_putByte+0xe0>
        PDATB = (1 << 5) | (mode << 4);
 c103e68:	e59f3074 	ldr	r3, [pc, #116]	; c103ee4 <L3_putByte+0x174>
 c103e6c:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c103e70:	e1a02202 	lsl	r2, r2, #4
 c103e74:	e3822020 	orr	r2, r2, #32
 c103e78:	e5832000 	str	r2, [r3]
        SHORT_DELAY;
 c103e7c:	e3a03000 	mov	r3, #0
 c103e80:	e54b3010 	strb	r3, [fp, #-16]
 c103e84:	ea000002 	b	c103e94 <L3_putByte+0x124>
 c103e88:	e55b3010 	ldrb	r3, [fp, #-16]
 c103e8c:	e2833001 	add	r3, r3, #1
 c103e90:	e54b3010 	strb	r3, [fp, #-16]
 c103e94:	e15b31d0 	ldrsb	r3, [fp, #-16]
 c103e98:	e3530003 	cmp	r3, #3
 c103e9c:	dafffff9 	ble	c103e88 <L3_putByte+0x118>
    lled = !led_status( LEFT_LED );    
   
    PDATB =  (1 << 5) | (mode << 4);
    SHORT_DELAY;

    for( i=0; i<8; i++ )
 c103ea0:	e55b300d 	ldrb	r3, [fp, #-13]
 c103ea4:	e2833001 	add	r3, r3, #1
 c103ea8:	e54b300d 	strb	r3, [fp, #-13]
 c103eac:	e55b300d 	ldrb	r3, [fp, #-13]
 c103eb0:	e3530007 	cmp	r3, #7
 c103eb4:	9affffd4 	bls	c103e0c <L3_putByte+0x9c>
        PDATA = (byte & (1 << i)) << (9 - i);
        SHORT_DELAY;    
        PDATB = (1 << 5) | (mode << 4);
        SHORT_DELAY;
    }
    PDATB = (rled << 10) | (lled << 9) | (1 << 5) | (1 << 4);   
 c103eb8:	e59f3024 	ldr	r3, [pc, #36]	; c103ee4 <L3_putByte+0x174>
 c103ebc:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c103ec0:	e1a01502 	lsl	r1, r2, #10
 c103ec4:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
 c103ec8:	e1a02482 	lsl	r2, r2, #9
 c103ecc:	e1812002 	orr	r2, r1, r2
 c103ed0:	e3822030 	orr	r2, r2, #48	; 0x30
 c103ed4:	e5832000 	str	r2, [r3]
}
 c103ed8:	e24bd00c 	sub	sp, fp, #12
 c103edc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103ee0:	e12fff1e 	bx	lr
 c103ee4:	01d2000c 	.word	0x01d2000c
 c103ee8:	01d20004 	.word	0x01d20004

0c103eec <leds_init>:
#include <s3c44b0x.h>
#include <leds.h>

void leds_init( void ) {
 c103eec:	e1a0c00d 	mov	ip, sp
 c103ef0:	e92dd800 	push	{fp, ip, lr, pc}
 c103ef4:	e24cb004 	sub	fp, ip, #4
	PCONB &= ~( (1<<10) | (1 << 9));
 c103ef8:	e59f3028 	ldr	r3, [pc, #40]	; c103f28 <leds_init+0x3c>
 c103efc:	e59f2024 	ldr	r2, [pc, #36]	; c103f28 <leds_init+0x3c>
 c103f00:	e5922000 	ldr	r2, [r2]
 c103f04:	e3c22c06 	bic	r2, r2, #1536	; 0x600
 c103f08:	e5832000 	str	r2, [r3]
    led_off(LEFT_LED);
 c103f0c:	e3a00001 	mov	r0, #1
 c103f10:	eb000017 	bl	c103f74 <led_off>
    led_off(RIGHT_LED);
 c103f14:	e3a00002 	mov	r0, #2
 c103f18:	eb000015 	bl	c103f74 <led_off>
}
 c103f1c:	e24bd00c 	sub	sp, fp, #12
 c103f20:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103f24:	e12fff1e 	bx	lr
 c103f28:	01d20008 	.word	0x01d20008

0c103f2c <led_on>:

void led_on( uint8 led ) {
 c103f2c:	e1a0c00d 	mov	ip, sp
 c103f30:	e92dd800 	push	{fp, ip, lr, pc}
 c103f34:	e24cb004 	sub	fp, ip, #4
 c103f38:	e24dd008 	sub	sp, sp, #8
 c103f3c:	e1a03000 	mov	r3, r0
 c103f40:	e54b300d 	strb	r3, [fp, #-13]
    PDATB &= ~(led << 9);
 c103f44:	e59f3024 	ldr	r3, [pc, #36]	; c103f70 <led_on+0x44>
 c103f48:	e59f2020 	ldr	r2, [pc, #32]	; c103f70 <led_on+0x44>
 c103f4c:	e5921000 	ldr	r1, [r2]
 c103f50:	e55b200d 	ldrb	r2, [fp, #-13]
 c103f54:	e1a02482 	lsl	r2, r2, #9
 c103f58:	e1e02002 	mvn	r2, r2
 c103f5c:	e0012002 	and	r2, r1, r2
 c103f60:	e5832000 	str	r2, [r3]
}
 c103f64:	e24bd00c 	sub	sp, fp, #12
 c103f68:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103f6c:	e12fff1e 	bx	lr
 c103f70:	01d2000c 	.word	0x01d2000c

0c103f74 <led_off>:

void led_off( uint8 led ) {
 c103f74:	e1a0c00d 	mov	ip, sp
 c103f78:	e92dd800 	push	{fp, ip, lr, pc}
 c103f7c:	e24cb004 	sub	fp, ip, #4
 c103f80:	e24dd008 	sub	sp, sp, #8
 c103f84:	e1a03000 	mov	r3, r0
 c103f88:	e54b300d 	strb	r3, [fp, #-13]
	PDATB |= (led <<9);
 c103f8c:	e59f3020 	ldr	r3, [pc, #32]	; c103fb4 <led_off+0x40>
 c103f90:	e59f201c 	ldr	r2, [pc, #28]	; c103fb4 <led_off+0x40>
 c103f94:	e5921000 	ldr	r1, [r2]
 c103f98:	e55b200d 	ldrb	r2, [fp, #-13]
 c103f9c:	e1a02482 	lsl	r2, r2, #9
 c103fa0:	e1812002 	orr	r2, r1, r2
 c103fa4:	e5832000 	str	r2, [r3]
}
 c103fa8:	e24bd00c 	sub	sp, fp, #12
 c103fac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103fb0:	e12fff1e 	bx	lr
 c103fb4:	01d2000c 	.word	0x01d2000c

0c103fb8 <led_toggle>:

void led_toggle( uint8 led ) {
 c103fb8:	e1a0c00d 	mov	ip, sp
 c103fbc:	e92dd800 	push	{fp, ip, lr, pc}
 c103fc0:	e24cb004 	sub	fp, ip, #4
 c103fc4:	e24dd008 	sub	sp, sp, #8
 c103fc8:	e1a03000 	mov	r3, r0
 c103fcc:	e54b300d 	strb	r3, [fp, #-13]
    PDATB ^= (led << 9);
 c103fd0:	e59f3020 	ldr	r3, [pc, #32]	; c103ff8 <led_toggle+0x40>
 c103fd4:	e59f201c 	ldr	r2, [pc, #28]	; c103ff8 <led_toggle+0x40>
 c103fd8:	e5921000 	ldr	r1, [r2]
 c103fdc:	e55b200d 	ldrb	r2, [fp, #-13]
 c103fe0:	e1a02482 	lsl	r2, r2, #9
 c103fe4:	e0212002 	eor	r2, r1, r2
 c103fe8:	e5832000 	str	r2, [r3]
}
 c103fec:	e24bd00c 	sub	sp, fp, #12
 c103ff0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103ff4:	e12fff1e 	bx	lr
 c103ff8:	01d2000c 	.word	0x01d2000c

0c103ffc <led_status>:

uint8 led_status( uint8 led ) {
 c103ffc:	e1a0c00d 	mov	ip, sp
 c104000:	e92dd800 	push	{fp, ip, lr, pc}
 c104004:	e24cb004 	sub	fp, ip, #4
 c104008:	e24dd008 	sub	sp, sp, #8
 c10400c:	e1a03000 	mov	r3, r0
 c104010:	e54b300d 	strb	r3, [fp, #-13]
	if(PDATB & (led << 9))
 c104014:	e59f3030 	ldr	r3, [pc, #48]	; c10404c <led_status+0x50>
 c104018:	e5932000 	ldr	r2, [r3]
 c10401c:	e55b300d 	ldrb	r3, [fp, #-13]
 c104020:	e1a03483 	lsl	r3, r3, #9
 c104024:	e0023003 	and	r3, r2, r3
 c104028:	e3530000 	cmp	r3, #0
 c10402c:	0a000001 	beq	c104038 <led_status+0x3c>
		return FALSE;
 c104030:	e3a03000 	mov	r3, #0
 c104034:	ea000000 	b	c10403c <led_status+0x40>
	else
		return TRUE;
 c104038:	e3a03001 	mov	r3, #1
}
 c10403c:	e1a00003 	mov	r0, r3
 c104040:	e24bd00c 	sub	sp, fp, #12
 c104044:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104048:	e12fff1e 	bx	lr
 c10404c:	01d2000c 	.word	0x01d2000c

0c104050 <__aeabi_uidiv>:
 c104050:	e2512001 	subs	r2, r1, #1
 c104054:	012fff1e 	bxeq	lr
 c104058:	3a000036 	bcc	c104138 <__aeabi_uidiv+0xe8>
 c10405c:	e1500001 	cmp	r0, r1
 c104060:	9a000022 	bls	c1040f0 <__aeabi_uidiv+0xa0>
 c104064:	e1110002 	tst	r1, r2
 c104068:	0a000023 	beq	c1040fc <__aeabi_uidiv+0xac>
 c10406c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c104070:	01a01181 	lsleq	r1, r1, #3
 c104074:	03a03008 	moveq	r3, #8
 c104078:	13a03001 	movne	r3, #1
 c10407c:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c104080:	31510000 	cmpcc	r1, r0
 c104084:	31a01201 	lslcc	r1, r1, #4
 c104088:	31a03203 	lslcc	r3, r3, #4
 c10408c:	3afffffa 	bcc	c10407c <__aeabi_uidiv+0x2c>
 c104090:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c104094:	31510000 	cmpcc	r1, r0
 c104098:	31a01081 	lslcc	r1, r1, #1
 c10409c:	31a03083 	lslcc	r3, r3, #1
 c1040a0:	3afffffa 	bcc	c104090 <__aeabi_uidiv+0x40>
 c1040a4:	e3a02000 	mov	r2, #0
 c1040a8:	e1500001 	cmp	r0, r1
 c1040ac:	20400001 	subcs	r0, r0, r1
 c1040b0:	21822003 	orrcs	r2, r2, r3
 c1040b4:	e15000a1 	cmp	r0, r1, lsr #1
 c1040b8:	204000a1 	subcs	r0, r0, r1, lsr #1
 c1040bc:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c1040c0:	e1500121 	cmp	r0, r1, lsr #2
 c1040c4:	20400121 	subcs	r0, r0, r1, lsr #2
 c1040c8:	21822123 	orrcs	r2, r2, r3, lsr #2
 c1040cc:	e15001a1 	cmp	r0, r1, lsr #3
 c1040d0:	204001a1 	subcs	r0, r0, r1, lsr #3
 c1040d4:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c1040d8:	e3500000 	cmp	r0, #0
 c1040dc:	11b03223 	lsrsne	r3, r3, #4
 c1040e0:	11a01221 	lsrne	r1, r1, #4
 c1040e4:	1affffef 	bne	c1040a8 <__aeabi_uidiv+0x58>
 c1040e8:	e1a00002 	mov	r0, r2
 c1040ec:	e12fff1e 	bx	lr
 c1040f0:	03a00001 	moveq	r0, #1
 c1040f4:	13a00000 	movne	r0, #0
 c1040f8:	e12fff1e 	bx	lr
 c1040fc:	e3510801 	cmp	r1, #65536	; 0x10000
 c104100:	21a01821 	lsrcs	r1, r1, #16
 c104104:	23a02010 	movcs	r2, #16
 c104108:	33a02000 	movcc	r2, #0
 c10410c:	e3510c01 	cmp	r1, #256	; 0x100
 c104110:	21a01421 	lsrcs	r1, r1, #8
 c104114:	22822008 	addcs	r2, r2, #8
 c104118:	e3510010 	cmp	r1, #16
 c10411c:	21a01221 	lsrcs	r1, r1, #4
 c104120:	22822004 	addcs	r2, r2, #4
 c104124:	e3510004 	cmp	r1, #4
 c104128:	82822003 	addhi	r2, r2, #3
 c10412c:	908220a1 	addls	r2, r2, r1, lsr #1
 c104130:	e1a00230 	lsr	r0, r0, r2
 c104134:	e12fff1e 	bx	lr
 c104138:	e3500000 	cmp	r0, #0
 c10413c:	13e00000 	mvnne	r0, #0
 c104140:	ea000007 	b	c104164 <__aeabi_idiv0>

0c104144 <__aeabi_uidivmod>:
 c104144:	e3510000 	cmp	r1, #0
 c104148:	0afffffa 	beq	c104138 <__aeabi_uidiv+0xe8>
 c10414c:	e92d4003 	push	{r0, r1, lr}
 c104150:	ebffffbe 	bl	c104050 <__aeabi_uidiv>
 c104154:	e8bd4006 	pop	{r1, r2, lr}
 c104158:	e0030092 	mul	r3, r2, r0
 c10415c:	e0411003 	sub	r1, r1, r3
 c104160:	e12fff1e 	bx	lr

0c104164 <__aeabi_idiv0>:
 c104164:	e12fff1e 	bx	lr

0c104168 <__aeabi_uldivmod>:
 c104168:	e3530000 	cmp	r3, #0
 c10416c:	03520000 	cmpeq	r2, #0
 c104170:	1a000004 	bne	c104188 <__aeabi_uldivmod+0x20>
 c104174:	e3510000 	cmp	r1, #0
 c104178:	03500000 	cmpeq	r0, #0
 c10417c:	13e01000 	mvnne	r1, #0
 c104180:	13e00000 	mvnne	r0, #0
 c104184:	eafffff6 	b	c104164 <__aeabi_idiv0>
 c104188:	e24dd008 	sub	sp, sp, #8
 c10418c:	e92d6000 	push	{sp, lr}
 c104190:	eb000013 	bl	c1041e4 <__gnu_uldivmod_helper>
 c104194:	e59de004 	ldr	lr, [sp, #4]
 c104198:	e28dd008 	add	sp, sp, #8
 c10419c:	e8bd000c 	pop	{r2, r3}
 c1041a0:	e12fff1e 	bx	lr

0c1041a4 <__gnu_ldivmod_helper>:
 c1041a4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c1041a8:	e1a04002 	mov	r4, r2
 c1041ac:	e1a07003 	mov	r7, r3
 c1041b0:	e1a05000 	mov	r5, r0
 c1041b4:	e1a06001 	mov	r6, r1
 c1041b8:	eb000019 	bl	c104224 <__divdi3>
 c1041bc:	e0070790 	mul	r7, r0, r7
 c1041c0:	e0832490 	umull	r2, r3, r0, r4
 c1041c4:	e0247491 	mla	r4, r1, r4, r7
 c1041c8:	e0843003 	add	r3, r4, r3
 c1041cc:	e0555002 	subs	r5, r5, r2
 c1041d0:	e0c66003 	sbc	r6, r6, r3
 c1041d4:	e59d3018 	ldr	r3, [sp, #24]
 c1041d8:	e8830060 	stm	r3, {r5, r6}
 c1041dc:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c1041e0:	e12fff1e 	bx	lr

0c1041e4 <__gnu_uldivmod_helper>:
 c1041e4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c1041e8:	e1a04002 	mov	r4, r2
 c1041ec:	e1a07003 	mov	r7, r3
 c1041f0:	e1a05000 	mov	r5, r0
 c1041f4:	e1a06001 	mov	r6, r1
 c1041f8:	eb000133 	bl	c1046cc <__udivdi3>
 c1041fc:	e0070790 	mul	r7, r0, r7
 c104200:	e0832490 	umull	r2, r3, r0, r4
 c104204:	e0247491 	mla	r4, r1, r4, r7
 c104208:	e0843003 	add	r3, r4, r3
 c10420c:	e0555002 	subs	r5, r5, r2
 c104210:	e0c66003 	sbc	r6, r6, r3
 c104214:	e59d3018 	ldr	r3, [sp, #24]
 c104218:	e8830060 	stm	r3, {r5, r6}
 c10421c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c104220:	e12fff1e 	bx	lr

0c104224 <__divdi3>:
 c104224:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c104228:	e3510000 	cmp	r1, #0
 c10422c:	e24dd014 	sub	sp, sp, #20
 c104230:	e1a0c003 	mov	ip, r3
 c104234:	a3a07000 	movge	r7, #0
 c104238:	ba000094 	blt	c104490 <__divdi3+0x26c>
 c10423c:	e35c0000 	cmp	ip, #0
 c104240:	ba00008e 	blt	c104480 <__divdi3+0x25c>
 c104244:	e253a000 	subs	sl, r3, #0
 c104248:	e1a0b000 	mov	fp, r0
 c10424c:	e1a08001 	mov	r8, r1
 c104250:	e1a09002 	mov	r9, r2
 c104254:	e1a04002 	mov	r4, r2
 c104258:	e1a05000 	mov	r5, r0
 c10425c:	e1a06001 	mov	r6, r1
 c104260:	1a00003e 	bne	c104360 <__divdi3+0x13c>
 c104264:	e1520001 	cmp	r2, r1
 c104268:	9a00004c 	bls	c1043a0 <__divdi3+0x17c>
 c10426c:	e1a00002 	mov	r0, r2
 c104270:	eb000222 	bl	c104b00 <__clzsi2>
 c104274:	e3500000 	cmp	r0, #0
 c104278:	12603020 	rsbne	r3, r0, #32
 c10427c:	11a0333b 	lsrne	r3, fp, r3
 c104280:	11a04019 	lslne	r4, r9, r0
 c104284:	11836018 	orrne	r6, r3, r8, lsl r0
 c104288:	e1a09824 	lsr	r9, r4, #16
 c10428c:	11a0501b 	lslne	r5, fp, r0
 c104290:	e1a01009 	mov	r1, r9
 c104294:	e1a00006 	mov	r0, r6
 c104298:	ebffff6c 	bl	c104050 <__aeabi_uidiv>
 c10429c:	e1a01009 	mov	r1, r9
 c1042a0:	e1a0a000 	mov	sl, r0
 c1042a4:	e1a00006 	mov	r0, r6
 c1042a8:	ebffffa5 	bl	c104144 <__aeabi_uidivmod>
 c1042ac:	e1a08804 	lsl	r8, r4, #16
 c1042b0:	e1a08828 	lsr	r8, r8, #16
 c1042b4:	e0030a98 	mul	r3, r8, sl
 c1042b8:	e1a0b825 	lsr	fp, r5, #16
 c1042bc:	e18bb801 	orr	fp, fp, r1, lsl #16
 c1042c0:	e153000b 	cmp	r3, fp
 c1042c4:	9a000005 	bls	c1042e0 <__divdi3+0xbc>
 c1042c8:	e09bb004 	adds	fp, fp, r4
 c1042cc:	e24aa001 	sub	sl, sl, #1
 c1042d0:	2a000002 	bcs	c1042e0 <__divdi3+0xbc>
 c1042d4:	e153000b 	cmp	r3, fp
 c1042d8:	824aa001 	subhi	sl, sl, #1
 c1042dc:	808bb004 	addhi	fp, fp, r4
 c1042e0:	e063b00b 	rsb	fp, r3, fp
 c1042e4:	e1a01009 	mov	r1, r9
 c1042e8:	e1a0000b 	mov	r0, fp
 c1042ec:	ebffff57 	bl	c104050 <__aeabi_uidiv>
 c1042f0:	e1a01009 	mov	r1, r9
 c1042f4:	e1a06000 	mov	r6, r0
 c1042f8:	e1a0000b 	mov	r0, fp
 c1042fc:	ebffff90 	bl	c104144 <__aeabi_uidivmod>
 c104300:	e0080896 	mul	r8, r6, r8
 c104304:	e1a00805 	lsl	r0, r5, #16
 c104308:	e1a05820 	lsr	r5, r0, #16
 c10430c:	e1855801 	orr	r5, r5, r1, lsl #16
 c104310:	e1580005 	cmp	r8, r5
 c104314:	9a000004 	bls	c10432c <__divdi3+0x108>
 c104318:	e0955004 	adds	r5, r5, r4
 c10431c:	e2466001 	sub	r6, r6, #1
 c104320:	2a000001 	bcs	c10432c <__divdi3+0x108>
 c104324:	e1580005 	cmp	r8, r5
 c104328:	82466001 	subhi	r6, r6, #1
 c10432c:	e186680a 	orr	r6, r6, sl, lsl #16
 c104330:	e3a09000 	mov	r9, #0
 c104334:	e3570000 	cmp	r7, #0
 c104338:	e1a03006 	mov	r3, r6
 c10433c:	e1a04009 	mov	r4, r9
 c104340:	0a000001 	beq	c10434c <__divdi3+0x128>
 c104344:	e2733000 	rsbs	r3, r3, #0
 c104348:	e2e44000 	rsc	r4, r4, #0
 c10434c:	e1a00003 	mov	r0, r3
 c104350:	e1a01004 	mov	r1, r4
 c104354:	e28dd014 	add	sp, sp, #20
 c104358:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10435c:	e12fff1e 	bx	lr
 c104360:	e15a0001 	cmp	sl, r1
 c104364:	83a09000 	movhi	r9, #0
 c104368:	81a06009 	movhi	r6, r9
 c10436c:	8afffff0 	bhi	c104334 <__divdi3+0x110>
 c104370:	e1a00003 	mov	r0, r3
 c104374:	eb0001e1 	bl	c104b00 <__clzsi2>
 c104378:	e2504000 	subs	r4, r0, #0
 c10437c:	1a00007a 	bne	c10456c <__divdi3+0x348>
 c104380:	e15a0008 	cmp	sl, r8
 c104384:	2159000b 	cmpcs	r9, fp
 c104388:	83a09000 	movhi	r9, #0
 c10438c:	93a09001 	movls	r9, #1
 c104390:	93a06001 	movls	r6, #1
 c104394:	91a09004 	movls	r9, r4
 c104398:	81a06009 	movhi	r6, r9
 c10439c:	eaffffe4 	b	c104334 <__divdi3+0x110>
 c1043a0:	e3520000 	cmp	r2, #0
 c1043a4:	1a000003 	bne	c1043b8 <__divdi3+0x194>
 c1043a8:	e3a00001 	mov	r0, #1
 c1043ac:	e1a01002 	mov	r1, r2
 c1043b0:	ebffff26 	bl	c104050 <__aeabi_uidiv>
 c1043b4:	e1a04000 	mov	r4, r0
 c1043b8:	e1a00004 	mov	r0, r4
 c1043bc:	eb0001cf 	bl	c104b00 <__clzsi2>
 c1043c0:	e2503000 	subs	r3, r0, #0
 c1043c4:	1a000035 	bne	c1044a0 <__divdi3+0x27c>
 c1043c8:	e3a01001 	mov	r1, #1
 c1043cc:	e1a09804 	lsl	r9, r4, #16
 c1043d0:	e58d1008 	str	r1, [sp, #8]
 c1043d4:	e0646006 	rsb	r6, r4, r6
 c1043d8:	e1a08824 	lsr	r8, r4, #16
 c1043dc:	e1a09829 	lsr	r9, r9, #16
 c1043e0:	e1a01008 	mov	r1, r8
 c1043e4:	e1a00006 	mov	r0, r6
 c1043e8:	ebffff18 	bl	c104050 <__aeabi_uidiv>
 c1043ec:	e1a01008 	mov	r1, r8
 c1043f0:	e1a0a000 	mov	sl, r0
 c1043f4:	e1a00006 	mov	r0, r6
 c1043f8:	ebffff51 	bl	c104144 <__aeabi_uidivmod>
 c1043fc:	e0030a99 	mul	r3, r9, sl
 c104400:	e1a0c825 	lsr	ip, r5, #16
 c104404:	e18cb801 	orr	fp, ip, r1, lsl #16
 c104408:	e153000b 	cmp	r3, fp
 c10440c:	9a000005 	bls	c104428 <__divdi3+0x204>
 c104410:	e09bb004 	adds	fp, fp, r4
 c104414:	e24aa001 	sub	sl, sl, #1
 c104418:	2a000002 	bcs	c104428 <__divdi3+0x204>
 c10441c:	e153000b 	cmp	r3, fp
 c104420:	824aa001 	subhi	sl, sl, #1
 c104424:	808bb004 	addhi	fp, fp, r4
 c104428:	e063b00b 	rsb	fp, r3, fp
 c10442c:	e1a01008 	mov	r1, r8
 c104430:	e1a0000b 	mov	r0, fp
 c104434:	ebffff05 	bl	c104050 <__aeabi_uidiv>
 c104438:	e1a01008 	mov	r1, r8
 c10443c:	e1a06000 	mov	r6, r0
 c104440:	e1a0000b 	mov	r0, fp
 c104444:	ebffff3e 	bl	c104144 <__aeabi_uidivmod>
 c104448:	e0090996 	mul	r9, r6, r9
 c10444c:	e1a00805 	lsl	r0, r5, #16
 c104450:	e1a05820 	lsr	r5, r0, #16
 c104454:	e1855801 	orr	r5, r5, r1, lsl #16
 c104458:	e1590005 	cmp	r9, r5
 c10445c:	9a000004 	bls	c104474 <__divdi3+0x250>
 c104460:	e0955004 	adds	r5, r5, r4
 c104464:	e2466001 	sub	r6, r6, #1
 c104468:	2a000001 	bcs	c104474 <__divdi3+0x250>
 c10446c:	e1590005 	cmp	r9, r5
 c104470:	82466001 	subhi	r6, r6, #1
 c104474:	e186680a 	orr	r6, r6, sl, lsl #16
 c104478:	e59d9008 	ldr	r9, [sp, #8]
 c10447c:	eaffffac 	b	c104334 <__divdi3+0x110>
 c104480:	e1e07007 	mvn	r7, r7
 c104484:	e2722000 	rsbs	r2, r2, #0
 c104488:	e2e33000 	rsc	r3, r3, #0
 c10448c:	eaffff6c 	b	c104244 <__divdi3+0x20>
 c104490:	e2700000 	rsbs	r0, r0, #0
 c104494:	e2e11000 	rsc	r1, r1, #0
 c104498:	e3e07000 	mvn	r7, #0
 c10449c:	eaffff66 	b	c10423c <__divdi3+0x18>
 c1044a0:	e2638020 	rsb	r8, r3, #32
 c1044a4:	e1a0b835 	lsr	fp, r5, r8
 c1044a8:	e1a04314 	lsl	r4, r4, r3
 c1044ac:	e1a0a836 	lsr	sl, r6, r8
 c1044b0:	e18be316 	orr	lr, fp, r6, lsl r3
 c1044b4:	e1a08824 	lsr	r8, r4, #16
 c1044b8:	e1a0c804 	lsl	ip, r4, #16
 c1044bc:	e1a01008 	mov	r1, r8
 c1044c0:	e1a0000a 	mov	r0, sl
 c1044c4:	e1a0982c 	lsr	r9, ip, #16
 c1044c8:	e1a05315 	lsl	r5, r5, r3
 c1044cc:	e58de008 	str	lr, [sp, #8]
 c1044d0:	ebfffede 	bl	c104050 <__aeabi_uidiv>
 c1044d4:	e1a01008 	mov	r1, r8
 c1044d8:	e1a0b000 	mov	fp, r0
 c1044dc:	e1a0000a 	mov	r0, sl
 c1044e0:	ebffff17 	bl	c104144 <__aeabi_uidivmod>
 c1044e4:	e0030b99 	mul	r3, r9, fp
 c1044e8:	e59d2008 	ldr	r2, [sp, #8]
 c1044ec:	e1a06822 	lsr	r6, r2, #16
 c1044f0:	e1866801 	orr	r6, r6, r1, lsl #16
 c1044f4:	e1530006 	cmp	r3, r6
 c1044f8:	9a000002 	bls	c104508 <__divdi3+0x2e4>
 c1044fc:	e0966004 	adds	r6, r6, r4
 c104500:	e24bb001 	sub	fp, fp, #1
 c104504:	3a00006c 	bcc	c1046bc <__divdi3+0x498>
 c104508:	e0636006 	rsb	r6, r3, r6
 c10450c:	e1a01008 	mov	r1, r8
 c104510:	e1a00006 	mov	r0, r6
 c104514:	ebfffecd 	bl	c104050 <__aeabi_uidiv>
 c104518:	e1a01008 	mov	r1, r8
 c10451c:	e1a0a000 	mov	sl, r0
 c104520:	e1a00006 	mov	r0, r6
 c104524:	ebffff06 	bl	c104144 <__aeabi_uidivmod>
 c104528:	e0030a99 	mul	r3, r9, sl
 c10452c:	e59d2008 	ldr	r2, [sp, #8]
 c104530:	e1a06802 	lsl	r6, r2, #16
 c104534:	e1a00826 	lsr	r0, r6, #16
 c104538:	e1806801 	orr	r6, r0, r1, lsl #16
 c10453c:	e1530006 	cmp	r3, r6
 c104540:	9a000005 	bls	c10455c <__divdi3+0x338>
 c104544:	e0966004 	adds	r6, r6, r4
 c104548:	e24aa001 	sub	sl, sl, #1
 c10454c:	2a000002 	bcs	c10455c <__divdi3+0x338>
 c104550:	e1530006 	cmp	r3, r6
 c104554:	824aa001 	subhi	sl, sl, #1
 c104558:	80866004 	addhi	r6, r6, r4
 c10455c:	e0636006 	rsb	r6, r3, r6
 c104560:	e18a380b 	orr	r3, sl, fp, lsl #16
 c104564:	e58d3008 	str	r3, [sp, #8]
 c104568:	eaffff9c 	b	c1043e0 <__divdi3+0x1bc>
 c10456c:	e2641020 	rsb	r1, r4, #32
 c104570:	e1a00139 	lsr	r0, r9, r1
 c104574:	e1a0213b 	lsr	r2, fp, r1
 c104578:	e180a41a 	orr	sl, r0, sl, lsl r4
 c10457c:	e1a06138 	lsr	r6, r8, r1
 c104580:	e1828418 	orr	r8, r2, r8, lsl r4
 c104584:	e1a0380a 	lsl	r3, sl, #16
 c104588:	e1a0b82a 	lsr	fp, sl, #16
 c10458c:	e1a0e823 	lsr	lr, r3, #16
 c104590:	e1a0100b 	mov	r1, fp
 c104594:	e1a00006 	mov	r0, r6
 c104598:	e58d8008 	str	r8, [sp, #8]
 c10459c:	e58de00c 	str	lr, [sp, #12]
 c1045a0:	ebfffeaa 	bl	c104050 <__aeabi_uidiv>
 c1045a4:	e1a0100b 	mov	r1, fp
 c1045a8:	e1a08000 	mov	r8, r0
 c1045ac:	e1a00006 	mov	r0, r6
 c1045b0:	ebfffee3 	bl	c104144 <__aeabi_uidivmod>
 c1045b4:	e59dc00c 	ldr	ip, [sp, #12]
 c1045b8:	e002089c 	mul	r2, ip, r8
 c1045bc:	e59d3008 	ldr	r3, [sp, #8]
 c1045c0:	e1a06823 	lsr	r6, r3, #16
 c1045c4:	e1861801 	orr	r1, r6, r1, lsl #16
 c1045c8:	e1520001 	cmp	r2, r1
 c1045cc:	e1a03419 	lsl	r3, r9, r4
 c1045d0:	9a000002 	bls	c1045e0 <__divdi3+0x3bc>
 c1045d4:	e091100a 	adds	r1, r1, sl
 c1045d8:	e2488001 	sub	r8, r8, #1
 c1045dc:	3a000032 	bcc	c1046ac <__divdi3+0x488>
 c1045e0:	e0629001 	rsb	r9, r2, r1
 c1045e4:	e1a00009 	mov	r0, r9
 c1045e8:	e1a0100b 	mov	r1, fp
 c1045ec:	e58d3004 	str	r3, [sp, #4]
 c1045f0:	ebfffe96 	bl	c104050 <__aeabi_uidiv>
 c1045f4:	e1a0100b 	mov	r1, fp
 c1045f8:	e1a06000 	mov	r6, r0
 c1045fc:	e1a00009 	mov	r0, r9
 c104600:	ebfffecf 	bl	c104144 <__aeabi_uidivmod>
 c104604:	e59d000c 	ldr	r0, [sp, #12]
 c104608:	e0020690 	mul	r2, r0, r6
 c10460c:	e59d3008 	ldr	r3, [sp, #8]
 c104610:	e1a0c803 	lsl	ip, r3, #16
 c104614:	e1a0982c 	lsr	r9, ip, #16
 c104618:	e1890801 	orr	r0, r9, r1, lsl #16
 c10461c:	e1520000 	cmp	r2, r0
 c104620:	e59d3004 	ldr	r3, [sp, #4]
 c104624:	9a000002 	bls	c104634 <__divdi3+0x410>
 c104628:	e090000a 	adds	r0, r0, sl
 c10462c:	e2466001 	sub	r6, r6, #1
 c104630:	3a000019 	bcc	c10469c <__divdi3+0x478>
 c104634:	e062e000 	rsb	lr, r2, r0
 c104638:	e1866808 	orr	r6, r6, r8, lsl #16
 c10463c:	e1a02826 	lsr	r2, r6, #16
 c104640:	e1a01823 	lsr	r1, r3, #16
 c104644:	e1c6c802 	bic	ip, r6, r2, lsl #16
 c104648:	e1c39801 	bic	r9, r3, r1, lsl #16
 c10464c:	e003099c 	mul	r3, ip, r9
 c104650:	e0090992 	mul	r9, r2, r9
 c104654:	e00c0c91 	mul	ip, r1, ip
 c104658:	e0010192 	mul	r1, r2, r1
 c10465c:	e099c00c 	adds	ip, r9, ip
 c104660:	22811801 	addcs	r1, r1, #65536	; 0x10000
 c104664:	e093380c 	adds	r3, r3, ip, lsl #16
 c104668:	e0a1182c 	adc	r1, r1, ip, lsr #16
 c10466c:	e15e0001 	cmp	lr, r1
 c104670:	3a000006 	bcc	c104690 <__divdi3+0x46c>
 c104674:	13a02000 	movne	r2, #0
 c104678:	03a02001 	moveq	r2, #1
 c10467c:	e1530415 	cmp	r3, r5, lsl r4
 c104680:	93a09000 	movls	r9, #0
 c104684:	82029001 	andhi	r9, r2, #1
 c104688:	e3590000 	cmp	r9, #0
 c10468c:	0affff28 	beq	c104334 <__divdi3+0x110>
 c104690:	e2466001 	sub	r6, r6, #1
 c104694:	e3a09000 	mov	r9, #0
 c104698:	eaffff25 	b	c104334 <__divdi3+0x110>
 c10469c:	e1520000 	cmp	r2, r0
 c1046a0:	82466001 	subhi	r6, r6, #1
 c1046a4:	8080000a 	addhi	r0, r0, sl
 c1046a8:	eaffffe1 	b	c104634 <__divdi3+0x410>
 c1046ac:	e1520001 	cmp	r2, r1
 c1046b0:	82488001 	subhi	r8, r8, #1
 c1046b4:	8081100a 	addhi	r1, r1, sl
 c1046b8:	eaffffc8 	b	c1045e0 <__divdi3+0x3bc>
 c1046bc:	e1530006 	cmp	r3, r6
 c1046c0:	824bb001 	subhi	fp, fp, #1
 c1046c4:	80866004 	addhi	r6, r6, r4
 c1046c8:	eaffff8e 	b	c104508 <__divdi3+0x2e4>

0c1046cc <__udivdi3>:
 c1046cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c1046d0:	e2538000 	subs	r8, r3, #0
 c1046d4:	e24dd00c 	sub	sp, sp, #12
 c1046d8:	e1a05000 	mov	r5, r0
 c1046dc:	e1a04001 	mov	r4, r1
 c1046e0:	e1a06002 	mov	r6, r2
 c1046e4:	e1a0a002 	mov	sl, r2
 c1046e8:	e1a0b000 	mov	fp, r0
 c1046ec:	e1a07001 	mov	r7, r1
 c1046f0:	1a000037 	bne	c1047d4 <__udivdi3+0x108>
 c1046f4:	e1520001 	cmp	r2, r1
 c1046f8:	9a000045 	bls	c104814 <__udivdi3+0x148>
 c1046fc:	e1a00002 	mov	r0, r2
 c104700:	eb0000fe 	bl	c104b00 <__clzsi2>
 c104704:	e3500000 	cmp	r0, #0
 c104708:	12603020 	rsbne	r3, r0, #32
 c10470c:	11a03335 	lsrne	r3, r5, r3
 c104710:	11a0a016 	lslne	sl, r6, r0
 c104714:	11837014 	orrne	r7, r3, r4, lsl r0
 c104718:	e1a0482a 	lsr	r4, sl, #16
 c10471c:	11a0b015 	lslne	fp, r5, r0
 c104720:	e1a01004 	mov	r1, r4
 c104724:	e1a00007 	mov	r0, r7
 c104728:	ebfffe48 	bl	c104050 <__aeabi_uidiv>
 c10472c:	e1a01004 	mov	r1, r4
 c104730:	e1a08000 	mov	r8, r0
 c104734:	e1a00007 	mov	r0, r7
 c104738:	ebfffe81 	bl	c104144 <__aeabi_uidivmod>
 c10473c:	e1a0680a 	lsl	r6, sl, #16
 c104740:	e1a06826 	lsr	r6, r6, #16
 c104744:	e0030896 	mul	r3, r6, r8
 c104748:	e1a0782b 	lsr	r7, fp, #16
 c10474c:	e1877801 	orr	r7, r7, r1, lsl #16
 c104750:	e1530007 	cmp	r3, r7
 c104754:	9a000005 	bls	c104770 <__udivdi3+0xa4>
 c104758:	e097700a 	adds	r7, r7, sl
 c10475c:	e2488001 	sub	r8, r8, #1
 c104760:	2a000002 	bcs	c104770 <__udivdi3+0xa4>
 c104764:	e1530007 	cmp	r3, r7
 c104768:	82488001 	subhi	r8, r8, #1
 c10476c:	8087700a 	addhi	r7, r7, sl
 c104770:	e0637007 	rsb	r7, r3, r7
 c104774:	e1a01004 	mov	r1, r4
 c104778:	e1a00007 	mov	r0, r7
 c10477c:	ebfffe33 	bl	c104050 <__aeabi_uidiv>
 c104780:	e1a01004 	mov	r1, r4
 c104784:	e1a05000 	mov	r5, r0
 c104788:	e1a00007 	mov	r0, r7
 c10478c:	ebfffe6c 	bl	c104144 <__aeabi_uidivmod>
 c104790:	e0060695 	mul	r6, r5, r6
 c104794:	e1a0080b 	lsl	r0, fp, #16
 c104798:	e1a0b820 	lsr	fp, r0, #16
 c10479c:	e18bb801 	orr	fp, fp, r1, lsl #16
 c1047a0:	e156000b 	cmp	r6, fp
 c1047a4:	9a000004 	bls	c1047bc <__udivdi3+0xf0>
 c1047a8:	e09bb00a 	adds	fp, fp, sl
 c1047ac:	e2455001 	sub	r5, r5, #1
 c1047b0:	2a000001 	bcs	c1047bc <__udivdi3+0xf0>
 c1047b4:	e156000b 	cmp	r6, fp
 c1047b8:	82455001 	subhi	r5, r5, #1
 c1047bc:	e1858808 	orr	r8, r5, r8, lsl #16
 c1047c0:	e3a01000 	mov	r1, #0
 c1047c4:	e1a00008 	mov	r0, r8
 c1047c8:	e28dd00c 	add	sp, sp, #12
 c1047cc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c1047d0:	e12fff1e 	bx	lr
 c1047d4:	e1580001 	cmp	r8, r1
 c1047d8:	83a01000 	movhi	r1, #0
 c1047dc:	81a08001 	movhi	r8, r1
 c1047e0:	8afffff7 	bhi	c1047c4 <__udivdi3+0xf8>
 c1047e4:	e1a00008 	mov	r0, r8
 c1047e8:	eb0000c4 	bl	c104b00 <__clzsi2>
 c1047ec:	e2507000 	subs	r7, r0, #0
 c1047f0:	1a00003e 	bne	c1048f0 <__udivdi3+0x224>
 c1047f4:	e1580004 	cmp	r8, r4
 c1047f8:	21560005 	cmpcs	r6, r5
 c1047fc:	83a01000 	movhi	r1, #0
 c104800:	93a01001 	movls	r1, #1
 c104804:	93a08001 	movls	r8, #1
 c104808:	91a01007 	movls	r1, r7
 c10480c:	81a08001 	movhi	r8, r1
 c104810:	eaffffeb 	b	c1047c4 <__udivdi3+0xf8>
 c104814:	e3520000 	cmp	r2, #0
 c104818:	1a000003 	bne	c10482c <__udivdi3+0x160>
 c10481c:	e3a00001 	mov	r0, #1
 c104820:	e1a01002 	mov	r1, r2
 c104824:	ebfffe09 	bl	c104050 <__aeabi_uidiv>
 c104828:	e1a0a000 	mov	sl, r0
 c10482c:	e1a0000a 	mov	r0, sl
 c104830:	eb0000b2 	bl	c104b00 <__clzsi2>
 c104834:	e2503000 	subs	r3, r0, #0
 c104838:	1a000075 	bne	c104a14 <__udivdi3+0x348>
 c10483c:	e1a0180a 	lsl	r1, sl, #16
 c104840:	e06a4004 	rsb	r4, sl, r4
 c104844:	e1a0982a 	lsr	r9, sl, #16
 c104848:	e1a06821 	lsr	r6, r1, #16
 c10484c:	e3a07001 	mov	r7, #1
 c104850:	e1a01009 	mov	r1, r9
 c104854:	e1a00004 	mov	r0, r4
 c104858:	ebfffdfc 	bl	c104050 <__aeabi_uidiv>
 c10485c:	e1a01009 	mov	r1, r9
 c104860:	e1a05000 	mov	r5, r0
 c104864:	e1a00004 	mov	r0, r4
 c104868:	ebfffe35 	bl	c104144 <__aeabi_uidivmod>
 c10486c:	e0030596 	mul	r3, r6, r5
 c104870:	e1a0282b 	lsr	r2, fp, #16
 c104874:	e1824801 	orr	r4, r2, r1, lsl #16
 c104878:	e1530004 	cmp	r3, r4
 c10487c:	9a000005 	bls	c104898 <__udivdi3+0x1cc>
 c104880:	e094400a 	adds	r4, r4, sl
 c104884:	e2455001 	sub	r5, r5, #1
 c104888:	2a000002 	bcs	c104898 <__udivdi3+0x1cc>
 c10488c:	e1530004 	cmp	r3, r4
 c104890:	82455001 	subhi	r5, r5, #1
 c104894:	8084400a 	addhi	r4, r4, sl
 c104898:	e0634004 	rsb	r4, r3, r4
 c10489c:	e1a01009 	mov	r1, r9
 c1048a0:	e1a00004 	mov	r0, r4
 c1048a4:	ebfffde9 	bl	c104050 <__aeabi_uidiv>
 c1048a8:	e1a01009 	mov	r1, r9
 c1048ac:	e1a08000 	mov	r8, r0
 c1048b0:	e1a00004 	mov	r0, r4
 c1048b4:	ebfffe22 	bl	c104144 <__aeabi_uidivmod>
 c1048b8:	e0060698 	mul	r6, r8, r6
 c1048bc:	e1a0b80b 	lsl	fp, fp, #16
 c1048c0:	e1a0382b 	lsr	r3, fp, #16
 c1048c4:	e183b801 	orr	fp, r3, r1, lsl #16
 c1048c8:	e156000b 	cmp	r6, fp
 c1048cc:	9a000004 	bls	c1048e4 <__udivdi3+0x218>
 c1048d0:	e09bb00a 	adds	fp, fp, sl
 c1048d4:	e2488001 	sub	r8, r8, #1
 c1048d8:	2a000001 	bcs	c1048e4 <__udivdi3+0x218>
 c1048dc:	e156000b 	cmp	r6, fp
 c1048e0:	82488001 	subhi	r8, r8, #1
 c1048e4:	e1888805 	orr	r8, r8, r5, lsl #16
 c1048e8:	e1a01007 	mov	r1, r7
 c1048ec:	eaffffb4 	b	c1047c4 <__udivdi3+0xf8>
 c1048f0:	e267a020 	rsb	sl, r7, #32
 c1048f4:	e1a01a36 	lsr	r1, r6, sl
 c1048f8:	e1a02a35 	lsr	r2, r5, sl
 c1048fc:	e1818718 	orr	r8, r1, r8, lsl r7
 c104900:	e1a0ba34 	lsr	fp, r4, sl
 c104904:	e1829714 	orr	r9, r2, r4, lsl r7
 c104908:	e1a0a828 	lsr	sl, r8, #16
 c10490c:	e1a0e808 	lsl	lr, r8, #16
 c104910:	e1a0100a 	mov	r1, sl
 c104914:	e1a0000b 	mov	r0, fp
 c104918:	e1a0482e 	lsr	r4, lr, #16
 c10491c:	e58d9004 	str	r9, [sp, #4]
 c104920:	ebfffdca 	bl	c104050 <__aeabi_uidiv>
 c104924:	e1a0100a 	mov	r1, sl
 c104928:	e1a09000 	mov	r9, r0
 c10492c:	e1a0000b 	mov	r0, fp
 c104930:	ebfffe03 	bl	c104144 <__aeabi_uidivmod>
 c104934:	e0020994 	mul	r2, r4, r9
 c104938:	e59d0004 	ldr	r0, [sp, #4]
 c10493c:	e1a0c820 	lsr	ip, r0, #16
 c104940:	e18cb801 	orr	fp, ip, r1, lsl #16
 c104944:	e152000b 	cmp	r2, fp
 c104948:	e1a03716 	lsl	r3, r6, r7
 c10494c:	9a000002 	bls	c10495c <__udivdi3+0x290>
 c104950:	e09bb008 	adds	fp, fp, r8
 c104954:	e2499001 	sub	r9, r9, #1
 c104958:	3a000060 	bcc	c104ae0 <__udivdi3+0x414>
 c10495c:	e062b00b 	rsb	fp, r2, fp
 c104960:	e1a0100a 	mov	r1, sl
 c104964:	e1a0000b 	mov	r0, fp
 c104968:	e58d3000 	str	r3, [sp]
 c10496c:	ebfffdb7 	bl	c104050 <__aeabi_uidiv>
 c104970:	e1a0100a 	mov	r1, sl
 c104974:	e1a06000 	mov	r6, r0
 c104978:	e1a0000b 	mov	r0, fp
 c10497c:	ebfffdf0 	bl	c104144 <__aeabi_uidivmod>
 c104980:	e0040496 	mul	r4, r6, r4
 c104984:	e59d0004 	ldr	r0, [sp, #4]
 c104988:	e1a0c800 	lsl	ip, r0, #16
 c10498c:	e1a0382c 	lsr	r3, ip, #16
 c104990:	e1832801 	orr	r2, r3, r1, lsl #16
 c104994:	e1540002 	cmp	r4, r2
 c104998:	e59d3000 	ldr	r3, [sp]
 c10499c:	9a000002 	bls	c1049ac <__udivdi3+0x2e0>
 c1049a0:	e0922008 	adds	r2, r2, r8
 c1049a4:	e2466001 	sub	r6, r6, #1
 c1049a8:	3a000048 	bcc	c104ad0 <__udivdi3+0x404>
 c1049ac:	e0644002 	rsb	r4, r4, r2
 c1049b0:	e1868809 	orr	r8, r6, r9, lsl #16
 c1049b4:	e1a02828 	lsr	r2, r8, #16
 c1049b8:	e1a0e823 	lsr	lr, r3, #16
 c1049bc:	e1c80802 	bic	r0, r8, r2, lsl #16
 c1049c0:	e1c3680e 	bic	r6, r3, lr, lsl #16
 c1049c4:	e0030690 	mul	r3, r0, r6
 c1049c8:	e0060692 	mul	r6, r2, r6
 c1049cc:	e000009e 	mul	r0, lr, r0
 c1049d0:	e00e0e92 	mul	lr, r2, lr
 c1049d4:	e0960000 	adds	r0, r6, r0
 c1049d8:	228ee801 	addcs	lr, lr, #65536	; 0x10000
 c1049dc:	e0933800 	adds	r3, r3, r0, lsl #16
 c1049e0:	e0aee820 	adc	lr, lr, r0, lsr #16
 c1049e4:	e154000e 	cmp	r4, lr
 c1049e8:	3a000006 	bcc	c104a08 <__udivdi3+0x33c>
 c1049ec:	13a02000 	movne	r2, #0
 c1049f0:	03a02001 	moveq	r2, #1
 c1049f4:	e1530715 	cmp	r3, r5, lsl r7
 c1049f8:	93a01000 	movls	r1, #0
 c1049fc:	82021001 	andhi	r1, r2, #1
 c104a00:	e3510000 	cmp	r1, #0
 c104a04:	0affff6e 	beq	c1047c4 <__udivdi3+0xf8>
 c104a08:	e2488001 	sub	r8, r8, #1
 c104a0c:	e3a01000 	mov	r1, #0
 c104a10:	eaffff6b 	b	c1047c4 <__udivdi3+0xf8>
 c104a14:	e2639020 	rsb	r9, r3, #32
 c104a18:	e1a0a31a 	lsl	sl, sl, r3
 c104a1c:	e1a07934 	lsr	r7, r4, r9
 c104a20:	e1a08935 	lsr	r8, r5, r9
 c104a24:	e1a0982a 	lsr	r9, sl, #16
 c104a28:	e1a0280a 	lsl	r2, sl, #16
 c104a2c:	e1a01009 	mov	r1, r9
 c104a30:	e1a00007 	mov	r0, r7
 c104a34:	e1888314 	orr	r8, r8, r4, lsl r3
 c104a38:	e1a0b315 	lsl	fp, r5, r3
 c104a3c:	e1a06822 	lsr	r6, r2, #16
 c104a40:	ebfffd82 	bl	c104050 <__aeabi_uidiv>
 c104a44:	e1a01009 	mov	r1, r9
 c104a48:	e1a05000 	mov	r5, r0
 c104a4c:	e1a00007 	mov	r0, r7
 c104a50:	ebfffdbb 	bl	c104144 <__aeabi_uidivmod>
 c104a54:	e0030596 	mul	r3, r6, r5
 c104a58:	e1a04828 	lsr	r4, r8, #16
 c104a5c:	e1844801 	orr	r4, r4, r1, lsl #16
 c104a60:	e1530004 	cmp	r3, r4
 c104a64:	9a000002 	bls	c104a74 <__udivdi3+0x3a8>
 c104a68:	e094400a 	adds	r4, r4, sl
 c104a6c:	e2455001 	sub	r5, r5, #1
 c104a70:	3a00001e 	bcc	c104af0 <__udivdi3+0x424>
 c104a74:	e0634004 	rsb	r4, r3, r4
 c104a78:	e1a01009 	mov	r1, r9
 c104a7c:	e1a00004 	mov	r0, r4
 c104a80:	ebfffd72 	bl	c104050 <__aeabi_uidiv>
 c104a84:	e1a01009 	mov	r1, r9
 c104a88:	e1a07000 	mov	r7, r0
 c104a8c:	e1a00004 	mov	r0, r4
 c104a90:	ebfffdab 	bl	c104144 <__aeabi_uidivmod>
 c104a94:	e0030796 	mul	r3, r6, r7
 c104a98:	e1a00808 	lsl	r0, r8, #16
 c104a9c:	e1a0c820 	lsr	ip, r0, #16
 c104aa0:	e18c4801 	orr	r4, ip, r1, lsl #16
 c104aa4:	e1530004 	cmp	r3, r4
 c104aa8:	9a000005 	bls	c104ac4 <__udivdi3+0x3f8>
 c104aac:	e094400a 	adds	r4, r4, sl
 c104ab0:	e2477001 	sub	r7, r7, #1
 c104ab4:	2a000002 	bcs	c104ac4 <__udivdi3+0x3f8>
 c104ab8:	e1530004 	cmp	r3, r4
 c104abc:	82477001 	subhi	r7, r7, #1
 c104ac0:	8084400a 	addhi	r4, r4, sl
 c104ac4:	e0634004 	rsb	r4, r3, r4
 c104ac8:	e1877805 	orr	r7, r7, r5, lsl #16
 c104acc:	eaffff5f 	b	c104850 <__udivdi3+0x184>
 c104ad0:	e1540002 	cmp	r4, r2
 c104ad4:	82466001 	subhi	r6, r6, #1
 c104ad8:	80822008 	addhi	r2, r2, r8
 c104adc:	eaffffb2 	b	c1049ac <__udivdi3+0x2e0>
 c104ae0:	e152000b 	cmp	r2, fp
 c104ae4:	82499001 	subhi	r9, r9, #1
 c104ae8:	808bb008 	addhi	fp, fp, r8
 c104aec:	eaffff9a 	b	c10495c <__udivdi3+0x290>
 c104af0:	e1530004 	cmp	r3, r4
 c104af4:	82455001 	subhi	r5, r5, #1
 c104af8:	8084400a 	addhi	r4, r4, sl
 c104afc:	eaffffdc 	b	c104a74 <__udivdi3+0x3a8>

0c104b00 <__clzsi2>:
 c104b00:	e3a0101c 	mov	r1, #28
 c104b04:	e3500801 	cmp	r0, #65536	; 0x10000
 c104b08:	21a00820 	lsrcs	r0, r0, #16
 c104b0c:	22411010 	subcs	r1, r1, #16
 c104b10:	e3500c01 	cmp	r0, #256	; 0x100
 c104b14:	21a00420 	lsrcs	r0, r0, #8
 c104b18:	22411008 	subcs	r1, r1, #8
 c104b1c:	e3500010 	cmp	r0, #16
 c104b20:	21a00220 	lsrcs	r0, r0, #4
 c104b24:	22411004 	subcs	r1, r1, #4
 c104b28:	e28f2008 	add	r2, pc, #8
 c104b2c:	e7d20000 	ldrb	r0, [r2, r0]
 c104b30:	e0800001 	add	r0, r0, r1
 c104b34:	e12fff1e 	bx	lr
 c104b38:	02020304 	.word	0x02020304
 c104b3c:	01010101 	.word	0x01010101
	...
