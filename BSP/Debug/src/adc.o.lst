   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"adc.c"
  21              	.Ltext0:
  22              		.file 1 "../src/adc.c"
 1941              	state:
 1942 0000 00       		.space	1
 1943              		.text
 1944              		.align	2
 1945              		.global	adc_init
 1947              	adc_init:
 1948              	.LFB0:
   1:../src/adc.c  **** #include <s3c44b0x.h>
   2:../src/adc.c  **** #include <s3cev40.h>
   3:../src/adc.c  **** #include <timers.h>
   4:../src/adc.c  **** #include <adc.h>
   5:../src/adc.c  **** 
   6:../src/adc.c  **** static uint8 state;
   7:../src/adc.c  **** 
   8:../src/adc.c  **** extern void isr_ADC_dummy( void );
   9:../src/adc.c  **** 
  10:../src/adc.c  **** void adc_init( void )
  11:../src/adc.c  **** {
 1949              		.loc 1 11 0
 1950              		.cfi_startproc
 1951              		@ Function supports interworking.
 1952              		@ args = 0, pretend = 0, frame = 0
 1953              		@ frame_needed = 1, uses_anonymous_args = 0
 1954 0000 0DC0A0E1 		mov	ip, sp
 1955              	.LCFI0:
 1956              		.cfi_def_cfa_register 12
 1957 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1958 0008 04B04CE2 		sub	fp, ip, #4
 1959              		.cfi_offset 14, -8
 1960              		.cfi_offset 13, -12
 1961              		.cfi_offset 11, -16
 1962              	.LCFI1:
 1963              		.cfi_def_cfa 11, 4
  12:../src/adc.c  ****     ADCPSR = 0x40;
 1964              		.loc 1 12 0
 1965 000c 14309FE5 		ldr	r3, .L2
 1966 0010 4020A0E3 		mov	r2, #64
 1967 0014 002083E5 		str	r2, [r3, #0]
  13:../src/adc.c  ****     adc_off();
 1968              		.loc 1 13 0
 1969 0018 FEFFFFEB 		bl	adc_off
  14:../src/adc.c  **** }
 1970              		.loc 1 14 0
 1971 001c 0CD04BE2 		sub	sp, fp, #12
 1972 0020 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1973 0024 1EFF2FE1 		bx	lr
 1974              	.L3:
 1975              		.align	2
 1976              	.L2:
 1977 0028 0400D401 		.word	30670852
 1978              		.cfi_endproc
 1979              	.LFE0:
 1981              		.align	2
 1982              		.global	adc_on
 1984              	adc_on:
 1985              	.LFB1:
  15:../src/adc.c  **** 
  16:../src/adc.c  **** void adc_on( void ) {
 1986              		.loc 1 16 0
 1987              		.cfi_startproc
 1988              		@ Function supports interworking.
 1989              		@ args = 0, pretend = 0, frame = 0
 1990              		@ frame_needed = 1, uses_anonymous_args = 0
 1991 002c 0DC0A0E1 		mov	ip, sp
 1992              	.LCFI2:
 1993              		.cfi_def_cfa_register 12
 1994 0030 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1995 0034 04B04CE2 		sub	fp, ip, #4
 1996              		.cfi_offset 14, -8
 1997              		.cfi_offset 13, -12
 1998              		.cfi_offset 11, -16
 1999              	.LCFI3:
 2000              		.cfi_def_cfa 11, 4
  17:../src/adc.c  ****     ADCCON &= ~(1 << 5);
 2001              		.loc 1 17 0
 2002 0038 7537A0E3 		mov	r3, #30670848
 2003 003c 7527A0E3 		mov	r2, #30670848
 2004 0040 002092E5 		ldr	r2, [r2, #0]
 2005 0044 2020C2E3 		bic	r2, r2, #32
 2006 0048 002083E5 		str	r2, [r3, #0]
  18:../src/adc.c  ****     sw_delay_ms( 10 );
 2007              		.loc 1 18 0
 2008 004c 0A00A0E3 		mov	r0, #10
 2009 0050 FEFFFFEB 		bl	sw_delay_ms
  19:../src/adc.c  ****     state = ON;
 2010              		.loc 1 19 0
 2011 0054 10309FE5 		ldr	r3, .L5
 2012 0058 0120A0E3 		mov	r2, #1
 2013 005c 0020C3E5 		strb	r2, [r3, #0]
  20:../src/adc.c  **** }
 2014              		.loc 1 20 0
 2015 0060 0CD04BE2 		sub	sp, fp, #12
 2016 0064 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2017 0068 1EFF2FE1 		bx	lr
 2018              	.L6:
 2019              		.align	2
 2020              	.L5:
 2021 006c 00000000 		.word	state
 2022              		.cfi_endproc
 2023              	.LFE1:
 2025              		.align	2
 2026              		.global	adc_off
 2028              	adc_off:
 2029              	.LFB2:
  21:../src/adc.c  **** 
  22:../src/adc.c  **** void adc_off( void ) {
 2030              		.loc 1 22 0
 2031              		.cfi_startproc
 2032              		@ Function supports interworking.
 2033              		@ args = 0, pretend = 0, frame = 0
 2034              		@ frame_needed = 1, uses_anonymous_args = 0
 2035 0070 0DC0A0E1 		mov	ip, sp
 2036              	.LCFI4:
 2037              		.cfi_def_cfa_register 12
 2038 0074 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2039 0078 04B04CE2 		sub	fp, ip, #4
 2040              		.cfi_offset 14, -8
 2041              		.cfi_offset 13, -12
 2042              		.cfi_offset 11, -16
 2043              	.LCFI5:
 2044              		.cfi_def_cfa 11, 4
  23:../src/adc.c  ****     ADCCON |= (1 << 5);
 2045              		.loc 1 23 0
 2046 007c 7537A0E3 		mov	r3, #30670848
 2047 0080 7527A0E3 		mov	r2, #30670848
 2048 0084 002092E5 		ldr	r2, [r2, #0]
 2049 0088 202082E3 		orr	r2, r2, #32
 2050 008c 002083E5 		str	r2, [r3, #0]
  24:../src/adc.c  ****     state = OFF;
 2051              		.loc 1 24 0
 2052 0090 10309FE5 		ldr	r3, .L8
 2053 0094 0020A0E3 		mov	r2, #0
 2054 0098 0020C3E5 		strb	r2, [r3, #0]
  25:../src/adc.c  **** }
 2055              		.loc 1 25 0
 2056 009c 0CD04BE2 		sub	sp, fp, #12
 2057 00a0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2058 00a4 1EFF2FE1 		bx	lr
 2059              	.L9:
 2060              		.align	2
 2061              	.L8:
 2062 00a8 00000000 		.word	state
 2063              		.cfi_endproc
 2064              	.LFE2:
 2066              		.align	2
 2067              		.global	adc_status
 2069              	adc_status:
 2070              	.LFB3:
  26:../src/adc.c  **** 
  27:../src/adc.c  **** uint8 adc_status( void ) {
 2071              		.loc 1 27 0
 2072              		.cfi_startproc
 2073              		@ Function supports interworking.
 2074              		@ args = 0, pretend = 0, frame = 0
 2075              		@ frame_needed = 1, uses_anonymous_args = 0
 2076 00ac 0DC0A0E1 		mov	ip, sp
 2077              	.LCFI6:
 2078              		.cfi_def_cfa_register 12
 2079 00b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2080 00b4 04B04CE2 		sub	fp, ip, #4
 2081              		.cfi_offset 14, -8
 2082              		.cfi_offset 13, -12
 2083              		.cfi_offset 11, -16
 2084              	.LCFI7:
 2085              		.cfi_def_cfa 11, 4
  28:../src/adc.c  ****     return state;
 2086              		.loc 1 28 0
 2087 00b8 10309FE5 		ldr	r3, .L11
 2088 00bc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  29:../src/adc.c  **** }
 2089              		.loc 1 29 0
 2090 00c0 0300A0E1 		mov	r0, r3
 2091 00c4 0CD04BE2 		sub	sp, fp, #12
 2092 00c8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2093 00cc 1EFF2FE1 		bx	lr
 2094              	.L12:
 2095              		.align	2
 2096              	.L11:
 2097 00d0 00000000 		.word	state
 2098              		.cfi_endproc
 2099              	.LFE3:
 2101              		.align	2
 2102              		.global	adc_getSample
 2104              	adc_getSample:
 2105              	.LFB4:
  30:../src/adc.c  **** 
  31:../src/adc.c  **** uint16 adc_getSample( uint8 ch )
  32:../src/adc.c  **** {
 2106              		.loc 1 32 0
 2107              		.cfi_startproc
 2108              		@ Function supports interworking.
 2109              		@ args = 0, pretend = 0, frame = 16
 2110              		@ frame_needed = 1, uses_anonymous_args = 0
 2111 00d4 0DC0A0E1 		mov	ip, sp
 2112              	.LCFI8:
 2113              		.cfi_def_cfa_register 12
 2114 00d8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2115 00dc 04B04CE2 		sub	fp, ip, #4
 2116              		.cfi_offset 14, -8
 2117              		.cfi_offset 13, -12
 2118              		.cfi_offset 11, -16
 2119              	.LCFI9:
 2120              		.cfi_def_cfa 11, 4
 2121 00e0 10D04DE2 		sub	sp, sp, #16
 2122 00e4 0030A0E1 		mov	r3, r0
 2123 00e8 15304BE5 		strb	r3, [fp, #-21]
  33:../src/adc.c  ****     uint32 sample;
  34:../src/adc.c  ****     uint8 i;
  35:../src/adc.c  ****     
  36:../src/adc.c  ****     ADCCON = (1 << 0) | (0 << 1) | ((ch & 0x3) << 2);
 2124              		.loc 1 36 0
 2125 00ec 7537A0E3 		mov	r3, #30670848
 2126 00f0 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 2127 00f4 032002E2 		and	r2, r2, #3
 2128 00f8 0221A0E1 		mov	r2, r2, asl #2
 2129 00fc 012082E3 		orr	r2, r2, #1
 2130 0100 002083E5 		str	r2, [r3, #0]
  37:../src/adc.c  ****     sw_delay_ms( 10 );
 2131              		.loc 1 37 0
 2132 0104 0A00A0E3 		mov	r0, #10
 2133 0108 FEFFFFEB 		bl	sw_delay_ms
  38:../src/adc.c  ****     for( i=0, sample=0; i<5; i++ )
 2134              		.loc 1 38 0
 2135 010c 0030A0E3 		mov	r3, #0
 2136 0110 11304BE5 		strb	r3, [fp, #-17]
 2137 0114 0030A0E3 		mov	r3, #0
 2138 0118 10300BE5 		str	r3, [fp, #-16]
 2139 011c 1B0000EA 		b	.L14
 2140              	.L17:
  39:../src/adc.c  ****     {
  40:../src/adc.c  ****         ADCCON |= (1 << 0);
 2141              		.loc 1 40 0
 2142 0120 7537A0E3 		mov	r3, #30670848
 2143 0124 7527A0E3 		mov	r2, #30670848
 2144 0128 002092E5 		ldr	r2, [r2, #0]
 2145 012c 012082E3 		orr	r2, r2, #1
 2146 0130 002083E5 		str	r2, [r3, #0]
  41:../src/adc.c  ****         while( ADCCON & (1 << 0) );
 2147              		.loc 1 41 0
 2148 0134 0000A0E1 		mov	r0, r0	@ nop
 2149              	.L15:
 2150              		.loc 1 41 0 is_stmt 0 discriminator 1
 2151 0138 7537A0E3 		mov	r3, #30670848
 2152 013c 003093E5 		ldr	r3, [r3, #0]
 2153 0140 013003E2 		and	r3, r3, #1
 2154 0144 FF3003E2 		and	r3, r3, #255
 2155 0148 000053E3 		cmp	r3, #0
 2156 014c F9FFFF1A 		bne	.L15
  42:../src/adc.c  ****         while( !(ADCCON & (1 << 6)) );
 2157              		.loc 1 42 0 is_stmt 1
 2158 0150 0000A0E1 		mov	r0, r0	@ nop
 2159              	.L16:
 2160              		.loc 1 42 0 is_stmt 0 discriminator 1
 2161 0154 7537A0E3 		mov	r3, #30670848
 2162 0158 003093E5 		ldr	r3, [r3, #0]
 2163 015c 403003E2 		and	r3, r3, #64
 2164 0160 000053E3 		cmp	r3, #0
 2165 0164 FAFFFF0A 		beq	.L16
  43:../src/adc.c  ****         sample += ADCDAT & 0x3ff;
 2166              		.loc 1 43 0 is_stmt 1
 2167 0168 54309FE5 		ldr	r3, .L18
 2168 016c 003093E5 		ldr	r3, [r3, #0]
 2169 0170 033BA0E1 		mov	r3, r3, asl #22
 2170 0174 233BA0E1 		mov	r3, r3, lsr #22
 2171 0178 10201BE5 		ldr	r2, [fp, #-16]
 2172 017c 033082E0 		add	r3, r2, r3
 2173 0180 10300BE5 		str	r3, [fp, #-16]
  38:../src/adc.c  ****     for( i=0, sample=0; i<5; i++ )
 2174              		.loc 1 38 0
 2175 0184 11305BE5 		ldrb	r3, [fp, #-17]
 2176 0188 013083E2 		add	r3, r3, #1
 2177 018c 11304BE5 		strb	r3, [fp, #-17]
 2178              	.L14:
  38:../src/adc.c  ****     for( i=0, sample=0; i<5; i++ )
 2179              		.loc 1 38 0 is_stmt 0 discriminator 1
 2180 0190 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2181 0194 040053E3 		cmp	r3, #4
 2182 0198 E0FFFF9A 		bls	.L17
  44:../src/adc.c  ****     }
  45:../src/adc.c  ****     return sample / 5;
 2183              		.loc 1 45 0 is_stmt 1
 2184 019c 10201BE5 		ldr	r2, [fp, #-16]
 2185 01a0 20309FE5 		ldr	r3, .L18+4
 2186 01a4 921383E0 		umull	r1, r3, r2, r3
 2187 01a8 2331A0E1 		mov	r3, r3, lsr #2
 2188 01ac 0338A0E1 		mov	r3, r3, asl #16
 2189 01b0 2338A0E1 		mov	r3, r3, lsr #16
  46:../src/adc.c  **** }
 2190              		.loc 1 46 0
 2191 01b4 0300A0E1 		mov	r0, r3
 2192 01b8 0CD04BE2 		sub	sp, fp, #12
 2193 01bc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2194 01c0 1EFF2FE1 		bx	lr
 2195              	.L19:
 2196              		.align	2
 2197              	.L18:
 2198 01c4 0800D401 		.word	30670856
 2199 01c8 CDCCCCCC 		.word	-858993459
 2200              		.cfi_endproc
 2201              	.LFE4:
 2203              		.align	2
 2204              		.global	adc_open
 2206              	adc_open:
 2207              	.LFB5:
  47:../src/adc.c  **** 
  48:../src/adc.c  **** void adc_open( void (*isr)(void) ) {
 2208              		.loc 1 48 0
 2209              		.cfi_startproc
 2210              		@ Function supports interworking.
 2211              		@ args = 0, pretend = 0, frame = 8
 2212              		@ frame_needed = 1, uses_anonymous_args = 0
 2213 01cc 0DC0A0E1 		mov	ip, sp
 2214              	.LCFI10:
 2215              		.cfi_def_cfa_register 12
 2216 01d0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2217 01d4 04B04CE2 		sub	fp, ip, #4
 2218              		.cfi_offset 14, -8
 2219              		.cfi_offset 13, -12
 2220              		.cfi_offset 11, -16
 2221              	.LCFI11:
 2222              		.cfi_def_cfa 11, 4
 2223 01d8 08D04DE2 		sub	sp, sp, #8
 2224 01dc 10000BE5 		str	r0, [fp, #-16]
  49:../src/adc.c  ****     pISR_ADC = isr;
 2225              		.loc 1 49 0
 2226 01e0 30309FE5 		ldr	r3, .L21
 2227 01e4 10201BE5 		ldr	r2, [fp, #-16]
 2228 01e8 002083E5 		str	r2, [r3, #0]
  50:../src/adc.c  ****     I_ISPC   = BIT_ADC;
 2229              		.loc 1 50 0
 2230 01ec 28309FE5 		ldr	r3, .L21+4
 2231 01f0 0120A0E3 		mov	r2, #1
 2232 01f4 002083E5 		str	r2, [r3, #0]
  51:../src/adc.c  ****     INTMSK  &= ~(BIT_GLOBAL | BIT_ADC);
 2233              		.loc 1 51 0
 2234 01f8 20309FE5 		ldr	r3, .L21+8
 2235 01fc 1C209FE5 		ldr	r2, .L21+8
 2236 0200 002092E5 		ldr	r2, [r2, #0]
 2237 0204 4123C2E3 		bic	r2, r2, #67108865
 2238 0208 002083E5 		str	r2, [r3, #0]
  52:../src/adc.c  **** }
 2239              		.loc 1 52 0
 2240 020c 0CD04BE2 		sub	sp, fp, #12
 2241 0210 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2242 0214 1EFF2FE1 		bx	lr
 2243              	.L22:
 2244              		.align	2
 2245              	.L21:
 2246 0218 20FF7F0C 		.word	209714976
 2247 021c 2400E001 		.word	31457316
 2248 0220 0C00E001 		.word	31457292
 2249              		.cfi_endproc
 2250              	.LFE5:
 2252              		.align	2
 2253              		.global	adc_close
 2255              	adc_close:
 2256              	.LFB6:
  53:../src/adc.c  **** 
  54:../src/adc.c  **** void adc_close( void ) {
 2257              		.loc 1 54 0
 2258              		.cfi_startproc
 2259              		@ Function supports interworking.
 2260              		@ args = 0, pretend = 0, frame = 0
 2261              		@ frame_needed = 1, uses_anonymous_args = 0
 2262 0224 0DC0A0E1 		mov	ip, sp
 2263              	.LCFI12:
 2264              		.cfi_def_cfa_register 12
 2265 0228 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2266 022c 04B04CE2 		sub	fp, ip, #4
 2267              		.cfi_offset 14, -8
 2268              		.cfi_offset 13, -12
 2269              		.cfi_offset 11, -16
 2270              	.LCFI13:
 2271              		.cfi_def_cfa 11, 4
  55:../src/adc.c  ****     INTMSK  |= (BIT_GLOBAL | BIT_ADC);
 2272              		.loc 1 55 0
 2273 0230 24309FE5 		ldr	r3, .L24
 2274 0234 20209FE5 		ldr	r2, .L24
 2275 0238 002092E5 		ldr	r2, [r2, #0]
 2276 023c 412382E3 		orr	r2, r2, #67108865
 2277 0240 002083E5 		str	r2, [r3, #0]
  56:../src/adc.c  ****     pISR_ADC = isr_ADC_dummy;
 2278              		.loc 1 56 0
 2279 0244 14309FE5 		ldr	r3, .L24+4
 2280 0248 14209FE5 		ldr	r2, .L24+8
 2281 024c 002083E5 		str	r2, [r3, #0]
  57:../src/adc.c  **** }
 2282              		.loc 1 57 0
 2283 0250 0CD04BE2 		sub	sp, fp, #12
 2284 0254 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2285 0258 1EFF2FE1 		bx	lr
 2286              	.L25:
 2287              		.align	2
 2288              	.L24:
 2289 025c 0C00E001 		.word	31457292
 2290 0260 20FF7F0C 		.word	209714976
 2291 0264 00000000 		.word	isr_ADC_dummy
 2292              		.cfi_endproc
 2293              	.LFE6:
 2295              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:1941   .bss:00000000 state
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:1942   .bss:00000000 $d
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:1944   .text:00000000 $a
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:1947   .text:00000000 adc_init
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2028   .text:00000070 adc_off
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:1977   .text:00000028 $d
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:1981   .text:0000002c $a
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:1984   .text:0000002c adc_on
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2021   .text:0000006c $d
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2025   .text:00000070 $a
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2062   .text:000000a8 $d
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2066   .text:000000ac $a
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2069   .text:000000ac adc_status
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2097   .text:000000d0 $d
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2101   .text:000000d4 $a
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2104   .text:000000d4 adc_getSample
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2198   .text:000001c4 $d
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2203   .text:000001cc $a
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2206   .text:000001cc adc_open
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2246   .text:00000218 $d
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2252   .text:00000224 $a
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2255   .text:00000224 adc_close
C:\Users\USUARI~2\AppData\Local\Temp\ccuZC94R.s:2289   .text:0000025c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sw_delay_ms
isr_ADC_dummy
