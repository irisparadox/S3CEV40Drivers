
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b10  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000002e0  0c100b10  0c100b10  00008b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_abbrev 000001cf  00000000  00000000  00008df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003f9  00000000  00000000  00008fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_line   00000286  00000000  00000000  000093b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_macinfo 0000a97b  00000000  00000000  0000963e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00000210  00000000  00000000  00013fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000000e1  00000000  00000000  000141c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubtypes 0000006c  00000000  00000000  000142aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000060  00000000  00000000  00014316  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000173  00000000  00000000  00014376  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000002a  00000000  00000000  000144e9  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000032  00000000  00000000  00014513  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000001b0  00000000  00000000  00014548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:
#include <common_types.h>
#include "systemLab4.h"
#include <uart.h>

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24ddc01 	sub	sp, sp, #256	; 0x100
	char   s[256];
	
	sys_init();
 c100010:	eb000127 	bl	c1004b4 <sys_init>
	uart0_init();
 c100014:	eb00014d 	bl	c100550 <uart0_init>

    /************************************/

	uart0_puts( "\n\nEste programa fue compilado el dia " );
 c100018:	e59f0294 	ldr	r0, [pc, #660]	; c1002b4 <main+0x2b4>
 c10001c:	eb00018a 	bl	c10064c <uart0_puts>
	uart0_puts( __DATE__ );
 c100020:	e59f0290 	ldr	r0, [pc, #656]	; c1002b8 <main+0x2b8>
 c100024:	eb000188 	bl	c10064c <uart0_puts>
	uart0_puts( " a las " );
 c100028:	e59f028c 	ldr	r0, [pc, #652]	; c1002bc <main+0x2bc>
 c10002c:	eb000186 	bl	c10064c <uart0_puts>
	uart0_puts( __TIME__ );
 c100030:	e59f0288 	ldr	r0, [pc, #648]	; c1002c0 <main+0x2c0>
 c100034:	eb000184 	bl	c10064c <uart0_puts>
	uart0_puts( "\n\n" );
 c100038:	e59f0284 	ldr	r0, [pc, #644]	; c1002c4 <main+0x2c4>
 c10003c:	eb000182 	bl	c10064c <uart0_puts>
    /************************************/

	while( 1 )
    {

        uart0_puts( "Esto es una cadena\n" );
 c100040:	e59f0280 	ldr	r0, [pc, #640]	; c1002c8 <main+0x2c8>
 c100044:	eb000180 	bl	c10064c <uart0_puts>
        uart0_putchar( '\n' );
 c100048:	e3a0000a 	mov	r0, #10
 c10004c:	eb000158 	bl	c1005b4 <uart0_putchar>
        
        uart0_puts( "Esto es el entero 0:                           " );
 c100050:	e59f0274 	ldr	r0, [pc, #628]	; c1002cc <main+0x2cc>
 c100054:	eb00017c 	bl	c10064c <uart0_puts>
        uart0_putint( 0 );
 c100058:	e3a00000 	mov	r0, #0
 c10005c:	eb00018e 	bl	c10069c <uart0_putint>
        uart0_putchar( '\n' );
 c100060:	e3a0000a 	mov	r0, #10
 c100064:	eb000152 	bl	c1005b4 <uart0_putchar>
        uart0_puts( "Esto es el entero positivo pequeño 25:         " );
 c100068:	e59f0260 	ldr	r0, [pc, #608]	; c1002d0 <main+0x2d0>
 c10006c:	eb000176 	bl	c10064c <uart0_puts>
        uart0_putint( 25 );
 c100070:	e3a00019 	mov	r0, #25
 c100074:	eb000188 	bl	c10069c <uart0_putint>
        uart0_putchar( '\n' );
 c100078:	e3a0000a 	mov	r0, #10
 c10007c:	eb00014c 	bl	c1005b4 <uart0_putchar>
        uart0_puts( "Esto es el entero positivo grande 987654321:   " );
 c100080:	e59f024c 	ldr	r0, [pc, #588]	; c1002d4 <main+0x2d4>
 c100084:	eb000170 	bl	c10064c <uart0_puts>
        uart0_putint( 987654321 );
 c100088:	e59f0248 	ldr	r0, [pc, #584]	; c1002d8 <main+0x2d8>
 c10008c:	eb000182 	bl	c10069c <uart0_putint>
        uart0_putchar( '\n' );
 c100090:	e3a0000a 	mov	r0, #10
 c100094:	eb000146 	bl	c1005b4 <uart0_putchar>
        uart0_puts( "Esto es el entero negativo pequeño -25:       " );
 c100098:	e59f023c 	ldr	r0, [pc, #572]	; c1002dc <main+0x2dc>
 c10009c:	eb00016a 	bl	c10064c <uart0_puts>
        uart0_putint( -25 );
 c1000a0:	e3e00018 	mvn	r0, #24
 c1000a4:	eb00017c 	bl	c10069c <uart0_putint>
        uart0_putchar( '\n' );
 c1000a8:	e3a0000a 	mov	r0, #10
 c1000ac:	eb000140 	bl	c1005b4 <uart0_putchar>
        uart0_puts( "Esto es el entero negativo grande -987654321: " );
 c1000b0:	e59f0228 	ldr	r0, [pc, #552]	; c1002e0 <main+0x2e0>
 c1000b4:	eb000164 	bl	c10064c <uart0_puts>
        uart0_putint( -987654321 );
 c1000b8:	e59f0224 	ldr	r0, [pc, #548]	; c1002e4 <main+0x2e4>
 c1000bc:	eb000176 	bl	c10069c <uart0_putint>
        uart0_putchar( '\n' );    
 c1000c0:	e3a0000a 	mov	r0, #10
 c1000c4:	eb00013a 	bl	c1005b4 <uart0_putchar>
     
        uart0_puts( "Esto es el hexadecimal 0:                      " );
 c1000c8:	e59f0218 	ldr	r0, [pc, #536]	; c1002e8 <main+0x2e8>
 c1000cc:	eb00015e 	bl	c10064c <uart0_puts>
        uart0_puthex( 0 );
 c1000d0:	e3a00000 	mov	r0, #0
 c1000d4:	eb0001be 	bl	c1007d4 <uart0_puthex>
        uart0_putchar( '\n' );    
 c1000d8:	e3a0000a 	mov	r0, #10
 c1000dc:	eb000134 	bl	c1005b4 <uart0_putchar>
        uart0_puts( "Esto es el hexadecimal pequeño AB:             " );
 c1000e0:	e59f0204 	ldr	r0, [pc, #516]	; c1002ec <main+0x2ec>
 c1000e4:	eb000158 	bl	c10064c <uart0_puts>
        uart0_puthex( 0xAB );
 c1000e8:	e3a000ab 	mov	r0, #171	; 0xab
 c1000ec:	eb0001b8 	bl	c1007d4 <uart0_puthex>
        uart0_putchar( '\n' );
 c1000f0:	e3a0000a 	mov	r0, #10
 c1000f4:	eb00012e 	bl	c1005b4 <uart0_putchar>
        uart0_puts( "Esto es el entero positivo grande FEDCBA98:    " );
 c1000f8:	e59f01f0 	ldr	r0, [pc, #496]	; c1002f0 <main+0x2f0>
 c1000fc:	eb000152 	bl	c10064c <uart0_puts>
        uart0_puthex( 0xFEDCBA98 );
 c100100:	e59f01ec 	ldr	r0, [pc, #492]	; c1002f4 <main+0x2f4>
 c100104:	eb0001b2 	bl	c1007d4 <uart0_puthex>
        uart0_putchar( '\n' );
 c100108:	e3a0000a 	mov	r0, #10
 c10010c:	eb000128 	bl	c1005b4 <uart0_putchar>
        uart0_putchar( '\n' );
 c100110:	e3a0000a 	mov	r0, #10
 c100114:	eb000126 	bl	c1005b4 <uart0_putchar>

        uart0_puts( "Escriba su nombre: " );
 c100118:	e59f01d8 	ldr	r0, [pc, #472]	; c1002f8 <main+0x2f8>
 c10011c:	eb00014a 	bl	c10064c <uart0_puts>
        uart0_gets( s );
 c100120:	e24b3f43 	sub	r3, fp, #268	; 0x10c
 c100124:	e1a00003 	mov	r0, r3
 c100128:	eb0001d7 	bl	c10088c <uart0_gets>
        uart0_puts( "Este es su nombre: " );
 c10012c:	e59f01c8 	ldr	r0, [pc, #456]	; c1002fc <main+0x2fc>
 c100130:	eb000145 	bl	c10064c <uart0_puts>
        uart0_puts( s );
 c100134:	e24b3f43 	sub	r3, fp, #268	; 0x10c
 c100138:	e1a00003 	mov	r0, r3
 c10013c:	eb000142 	bl	c10064c <uart0_puts>
        uart0_putchar( '\n' );
 c100140:	e3a0000a 	mov	r0, #10
 c100144:	eb00011a 	bl	c1005b4 <uart0_putchar>
        uart0_putchar( '\n' );
 c100148:	e3a0000a 	mov	r0, #10
 c10014c:	eb000118 	bl	c1005b4 <uart0_putchar>

        uart0_puts( "Escriba 0: " );
 c100150:	e59f01a8 	ldr	r0, [pc, #424]	; c100300 <main+0x300>
 c100154:	eb00013c 	bl	c10064c <uart0_puts>
        if( uart0_getint() != 0 )
 c100158:	eb0001e6 	bl	c1008f8 <uart0_getint>
 c10015c:	e1a03000 	mov	r3, r0
 c100160:	e3530000 	cmp	r3, #0
 c100164:	0a000001 	beq	c100170 <main+0x170>
           uart0_puts( "ERROR en uart0_getint()\n" );
 c100168:	e59f0194 	ldr	r0, [pc, #404]	; c100304 <main+0x304>
 c10016c:	eb000136 	bl	c10064c <uart0_puts>
        uart0_puts( "Escriba 25: " );
 c100170:	e59f0190 	ldr	r0, [pc, #400]	; c100308 <main+0x308>
 c100174:	eb000134 	bl	c10064c <uart0_puts>
        if( uart0_getint() != 25 )
 c100178:	eb0001de 	bl	c1008f8 <uart0_getint>
 c10017c:	e1a03000 	mov	r3, r0
 c100180:	e3530019 	cmp	r3, #25
 c100184:	0a000001 	beq	c100190 <main+0x190>
           uart0_puts( "ERROR en uart0_getint()\n" );    
 c100188:	e59f0174 	ldr	r0, [pc, #372]	; c100304 <main+0x304>
 c10018c:	eb00012e 	bl	c10064c <uart0_puts>
        uart0_puts( "Escriba 987654321: " );
 c100190:	e59f0174 	ldr	r0, [pc, #372]	; c10030c <main+0x30c>
 c100194:	eb00012c 	bl	c10064c <uart0_puts>
        if( uart0_getint() != 987654321 )
 c100198:	eb0001d6 	bl	c1008f8 <uart0_getint>
 c10019c:	e1a02000 	mov	r2, r0
 c1001a0:	e59f3130 	ldr	r3, [pc, #304]	; c1002d8 <main+0x2d8>
 c1001a4:	e1520003 	cmp	r2, r3
 c1001a8:	0a000001 	beq	c1001b4 <main+0x1b4>
           uart0_puts( "ERROR en uart0_getint()\n" );  
 c1001ac:	e59f0150 	ldr	r0, [pc, #336]	; c100304 <main+0x304>
 c1001b0:	eb000125 	bl	c10064c <uart0_puts>
        uart0_puts( "Escriba -25: " );
 c1001b4:	e59f0154 	ldr	r0, [pc, #340]	; c100310 <main+0x310>
 c1001b8:	eb000123 	bl	c10064c <uart0_puts>
        if( uart0_getint() != -25 )
 c1001bc:	eb0001cd 	bl	c1008f8 <uart0_getint>
 c1001c0:	e1a03000 	mov	r3, r0
 c1001c4:	e3730019 	cmn	r3, #25
 c1001c8:	0a000001 	beq	c1001d4 <main+0x1d4>
           uart0_puts( "ERROR en uart0_getint()\n" );    
 c1001cc:	e59f0130 	ldr	r0, [pc, #304]	; c100304 <main+0x304>
 c1001d0:	eb00011d 	bl	c10064c <uart0_puts>
        uart0_puts( "Escriba -987654321: " );
 c1001d4:	e59f0138 	ldr	r0, [pc, #312]	; c100314 <main+0x314>
 c1001d8:	eb00011b 	bl	c10064c <uart0_puts>
        if( uart0_getint() != -987654321 )
 c1001dc:	eb0001c5 	bl	c1008f8 <uart0_getint>
 c1001e0:	e1a02000 	mov	r2, r0
 c1001e4:	e59f30f8 	ldr	r3, [pc, #248]	; c1002e4 <main+0x2e4>
 c1001e8:	e1520003 	cmp	r2, r3
 c1001ec:	0a000001 	beq	c1001f8 <main+0x1f8>
           uart0_puts( "ERROR en uart0_getint()\n" );  
 c1001f0:	e59f010c 	ldr	r0, [pc, #268]	; c100304 <main+0x304>
 c1001f4:	eb000114 	bl	c10064c <uart0_puts>
        uart0_putchar( '\n' );
 c1001f8:	e3a0000a 	mov	r0, #10
 c1001fc:	eb0000ec 	bl	c1005b4 <uart0_putchar>

        uart0_puts( "Escriba 0: " );
 c100200:	e59f00f8 	ldr	r0, [pc, #248]	; c100300 <main+0x300>
 c100204:	eb000110 	bl	c10064c <uart0_puts>
        if( uart0_gethex() != 0 )
 c100208:	eb0001ff 	bl	c100a0c <uart0_gethex>
 c10020c:	e1a03000 	mov	r3, r0
 c100210:	e3530000 	cmp	r3, #0
 c100214:	0a000001 	beq	c100220 <main+0x220>
           uart0_puts( "ERROR en uart0_gethex()\n" );
 c100218:	e59f00f8 	ldr	r0, [pc, #248]	; c100318 <main+0x318>
 c10021c:	eb00010a 	bl	c10064c <uart0_puts>
        uart0_puts( "Escriba AB: " );
 c100220:	e59f00f4 	ldr	r0, [pc, #244]	; c10031c <main+0x31c>
 c100224:	eb000108 	bl	c10064c <uart0_puts>
        if( uart0_gethex() != 0xAB )
 c100228:	eb0001f7 	bl	c100a0c <uart0_gethex>
 c10022c:	e1a03000 	mov	r3, r0
 c100230:	e35300ab 	cmp	r3, #171	; 0xab
 c100234:	0a000001 	beq	c100240 <main+0x240>
           uart0_puts( "ERROR en uart0_gethex()\n" );    
 c100238:	e59f00d8 	ldr	r0, [pc, #216]	; c100318 <main+0x318>
 c10023c:	eb000102 	bl	c10064c <uart0_puts>
        uart0_puts( "Escriba ab: " );
 c100240:	e59f00d8 	ldr	r0, [pc, #216]	; c100320 <main+0x320>
 c100244:	eb000100 	bl	c10064c <uart0_puts>
        if( uart0_gethex() != 0xAB )
 c100248:	eb0001ef 	bl	c100a0c <uart0_gethex>
 c10024c:	e1a03000 	mov	r3, r0
 c100250:	e35300ab 	cmp	r3, #171	; 0xab
 c100254:	0a000001 	beq	c100260 <main+0x260>
           uart0_puts( "ERROR en uart0_gethex()\n" );   
 c100258:	e59f00b8 	ldr	r0, [pc, #184]	; c100318 <main+0x318>
 c10025c:	eb0000fa 	bl	c10064c <uart0_puts>
        uart0_puts( "Escriba FEDCBA98: " );
 c100260:	e59f00bc 	ldr	r0, [pc, #188]	; c100324 <main+0x324>
 c100264:	eb0000f8 	bl	c10064c <uart0_puts>
        if( uart0_gethex() != 0xFEDCBA98 )
 c100268:	eb0001e7 	bl	c100a0c <uart0_gethex>
 c10026c:	e1a02000 	mov	r2, r0
 c100270:	e59f307c 	ldr	r3, [pc, #124]	; c1002f4 <main+0x2f4>
 c100274:	e1520003 	cmp	r2, r3
 c100278:	0a000001 	beq	c100284 <main+0x284>
           uart0_puts( "ERROR en uart0_gethex()\n" );  
 c10027c:	e59f0094 	ldr	r0, [pc, #148]	; c100318 <main+0x318>
 c100280:	eb0000f1 	bl	c10064c <uart0_puts>
        uart0_puts( "Escriba fedcba98: " );
 c100284:	e59f009c 	ldr	r0, [pc, #156]	; c100328 <main+0x328>
 c100288:	eb0000ef 	bl	c10064c <uart0_puts>
        if( uart0_gethex() != 0xFEDCBA98 )
 c10028c:	eb0001de 	bl	c100a0c <uart0_gethex>
 c100290:	e1a02000 	mov	r2, r0
 c100294:	e59f3058 	ldr	r3, [pc, #88]	; c1002f4 <main+0x2f4>
 c100298:	e1520003 	cmp	r2, r3
 c10029c:	0a000001 	beq	c1002a8 <main+0x2a8>
           uart0_puts( "ERROR en uart0_gethex()\n" );  
 c1002a0:	e59f0070 	ldr	r0, [pc, #112]	; c100318 <main+0x318>
 c1002a4:	eb0000e8 	bl	c10064c <uart0_puts>
        uart0_putchar( '\n' );
 c1002a8:	e3a0000a 	mov	r0, #10
 c1002ac:	eb0000c0 	bl	c1005b4 <uart0_putchar>

    }
 c1002b0:	eaffff62 	b	c100040 <main+0x40>
 c1002b4:	0c100b10 	.word	0x0c100b10
 c1002b8:	0c100b38 	.word	0x0c100b38
 c1002bc:	0c100b44 	.word	0x0c100b44
 c1002c0:	0c100b4c 	.word	0x0c100b4c
 c1002c4:	0c100b58 	.word	0x0c100b58
 c1002c8:	0c100b5c 	.word	0x0c100b5c
 c1002cc:	0c100b70 	.word	0x0c100b70
 c1002d0:	0c100ba0 	.word	0x0c100ba0
 c1002d4:	0c100bd0 	.word	0x0c100bd0
 c1002d8:	3ade68b1 	.word	0x3ade68b1
 c1002dc:	0c100c00 	.word	0x0c100c00
 c1002e0:	0c100c30 	.word	0x0c100c30
 c1002e4:	c521974f 	.word	0xc521974f
 c1002e8:	0c100c60 	.word	0x0c100c60
 c1002ec:	0c100c90 	.word	0x0c100c90
 c1002f0:	0c100cc0 	.word	0x0c100cc0
 c1002f4:	fedcba98 	.word	0xfedcba98
 c1002f8:	0c100cf0 	.word	0x0c100cf0
 c1002fc:	0c100d04 	.word	0x0c100d04
 c100300:	0c100d18 	.word	0x0c100d18
 c100304:	0c100d24 	.word	0x0c100d24
 c100308:	0c100d40 	.word	0x0c100d40
 c10030c:	0c100d50 	.word	0x0c100d50
 c100310:	0c100d64 	.word	0x0c100d64
 c100314:	0c100d74 	.word	0x0c100d74
 c100318:	0c100d8c 	.word	0x0c100d8c
 c10031c:	0c100da8 	.word	0x0c100da8
 c100320:	0c100db8 	.word	0x0c100db8
 c100324:	0c100dc8 	.word	0x0c100dc8
 c100328:	0c100ddc 	.word	0x0c100ddc

0c10032c <port_init>:
#include <s3c44b0x.h>
#include "systemLab4.h"    

static void port_init( void ) {
 c10032c:	e1a0c00d 	mov	ip, sp
 c100330:	e92dd800 	push	{fp, ip, lr, pc}
 c100334:	e24cb004 	sub	fp, ip, #4
    PDATA = ~0;
 c100338:	e59f3100 	ldr	r3, [pc, #256]	; c100440 <port_init+0x114>
 c10033c:	e3e02000 	mvn	r2, #0
 c100340:	e5832000 	str	r2, [r3]
    PCONA = 0xFE;
 c100344:	e59f30f8 	ldr	r3, [pc, #248]	; c100444 <port_init+0x118>
 c100348:	e3a020fe 	mov	r2, #254	; 0xfe
 c10034c:	e5832000 	str	r2, [r3]

    PDATB = ~0;
 c100350:	e59f30f0 	ldr	r3, [pc, #240]	; c100448 <port_init+0x11c>
 c100354:	e3e02000 	mvn	r2, #0
 c100358:	e5832000 	str	r2, [r3]
    PCONB = 0x14f;
 c10035c:	e59f30e8 	ldr	r3, [pc, #232]	; c10044c <port_init+0x120>
 c100360:	e59f20e8 	ldr	r2, [pc, #232]	; c100450 <port_init+0x124>
 c100364:	e5832000 	str	r2, [r3]

    PDATC = ~0;
 c100368:	e59f30e4 	ldr	r3, [pc, #228]	; c100454 <port_init+0x128>
 c10036c:	e3e02000 	mvn	r2, #0
 c100370:	e5832000 	str	r2, [r3]
    PCONC = 0x5ff555ff;
 c100374:	e59f30dc 	ldr	r3, [pc, #220]	; c100458 <port_init+0x12c>
 c100378:	e59f20dc 	ldr	r2, [pc, #220]	; c10045c <port_init+0x130>
 c10037c:	e5832000 	str	r2, [r3]
    PUPC  = 0x94fb;
 c100380:	e59f30d8 	ldr	r3, [pc, #216]	; c100460 <port_init+0x134>
 c100384:	e59f20d8 	ldr	r2, [pc, #216]	; c100464 <port_init+0x138>
 c100388:	e5832000 	str	r2, [r3]

    PDATD = ~0;
 c10038c:	e59f30d4 	ldr	r3, [pc, #212]	; c100468 <port_init+0x13c>
 c100390:	e3e02000 	mvn	r2, #0
 c100394:	e5832000 	str	r2, [r3]
    PCOND = 0xAAAA;
 c100398:	e59f30cc 	ldr	r3, [pc, #204]	; c10046c <port_init+0x140>
 c10039c:	e59f20cc 	ldr	r2, [pc, #204]	; c100470 <port_init+0x144>
 c1003a0:	e5832000 	str	r2, [r3]
    PUPD  = 0xff;
 c1003a4:	e59f30c8 	ldr	r3, [pc, #200]	; c100474 <port_init+0x148>
 c1003a8:	e3a020ff 	mov	r2, #255	; 0xff
 c1003ac:	e5832000 	str	r2, [r3]
    
    PDATE = ~0;
 c1003b0:	e59f30c0 	ldr	r3, [pc, #192]	; c100478 <port_init+0x14c>
 c1003b4:	e3e02000 	mvn	r2, #0
 c1003b8:	e5832000 	str	r2, [r3]
    PCONE = 0x255a9;
 c1003bc:	e59f30b8 	ldr	r3, [pc, #184]	; c10047c <port_init+0x150>
 c1003c0:	e59f20b8 	ldr	r2, [pc, #184]	; c100480 <port_init+0x154>
 c1003c4:	e5832000 	str	r2, [r3]
    PUPE  = 0xfb;
 c1003c8:	e59f30b4 	ldr	r3, [pc, #180]	; c100484 <port_init+0x158>
 c1003cc:	e3a020fb 	mov	r2, #251	; 0xfb
 c1003d0:	e5832000 	str	r2, [r3]

    PDATF = ~0;
 c1003d4:	e59f30ac 	ldr	r3, [pc, #172]	; c100488 <port_init+0x15c>
 c1003d8:	e3e02000 	mvn	r2, #0
 c1003dc:	e5832000 	str	r2, [r3]
    PCONF = 0x251a;
 c1003e0:	e59f30a4 	ldr	r3, [pc, #164]	; c10048c <port_init+0x160>
 c1003e4:	e59f20a4 	ldr	r2, [pc, #164]	; c100490 <port_init+0x164>
 c1003e8:	e5832000 	str	r2, [r3]
    PUPF  = 0x74;
 c1003ec:	e59f30a0 	ldr	r3, [pc, #160]	; c100494 <port_init+0x168>
 c1003f0:	e3a02074 	mov	r2, #116	; 0x74
 c1003f4:	e5832000 	str	r2, [r3]
    
    PDATG = ~0;
 c1003f8:	e59f3098 	ldr	r3, [pc, #152]	; c100498 <port_init+0x16c>
 c1003fc:	e3e02000 	mvn	r2, #0
 c100400:	e5832000 	str	r2, [r3]
    PCONG = 0xf5ff;
 c100404:	e59f3090 	ldr	r3, [pc, #144]	; c10049c <port_init+0x170>
 c100408:	e59f2090 	ldr	r2, [pc, #144]	; c1004a0 <port_init+0x174>
 c10040c:	e5832000 	str	r2, [r3]
    PUPG  = 0x30;
 c100410:	e59f308c 	ldr	r3, [pc, #140]	; c1004a4 <port_init+0x178>
 c100414:	e3a02030 	mov	r2, #48	; 0x30
 c100418:	e5832000 	str	r2, [r3]

    SPUCR = 0x7;
 c10041c:	e59f3084 	ldr	r3, [pc, #132]	; c1004a8 <port_init+0x17c>
 c100420:	e3a02007 	mov	r2, #7
 c100424:	e5832000 	str	r2, [r3]
    
    EXTINT = 0x22000220;
 c100428:	e59f307c 	ldr	r3, [pc, #124]	; c1004ac <port_init+0x180>
 c10042c:	e59f207c 	ldr	r2, [pc, #124]	; c1004b0 <port_init+0x184>
 c100430:	e5832000 	str	r2, [r3]
}
 c100434:	e24bd00c 	sub	sp, fp, #12
 c100438:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10043c:	e12fff1e 	bx	lr
 c100440:	01d20004 	.word	0x01d20004
 c100444:	01d20000 	.word	0x01d20000
 c100448:	01d2000c 	.word	0x01d2000c
 c10044c:	01d20008 	.word	0x01d20008
 c100450:	0000014f 	.word	0x0000014f
 c100454:	01d20014 	.word	0x01d20014
 c100458:	01d20010 	.word	0x01d20010
 c10045c:	5ff555ff 	.word	0x5ff555ff
 c100460:	01d20018 	.word	0x01d20018
 c100464:	000094fb 	.word	0x000094fb
 c100468:	01d20020 	.word	0x01d20020
 c10046c:	01d2001c 	.word	0x01d2001c
 c100470:	0000aaaa 	.word	0x0000aaaa
 c100474:	01d20024 	.word	0x01d20024
 c100478:	01d2002c 	.word	0x01d2002c
 c10047c:	01d20028 	.word	0x01d20028
 c100480:	000255a9 	.word	0x000255a9
 c100484:	01d20030 	.word	0x01d20030
 c100488:	01d20038 	.word	0x01d20038
 c10048c:	01d20034 	.word	0x01d20034
 c100490:	0000251a 	.word	0x0000251a
 c100494:	01d2003c 	.word	0x01d2003c
 c100498:	01d20044 	.word	0x01d20044
 c10049c:	01d20040 	.word	0x01d20040
 c1004a0:	0000f5ff 	.word	0x0000f5ff
 c1004a4:	01d20048 	.word	0x01d20048
 c1004a8:	01d2004c 	.word	0x01d2004c
 c1004ac:	01d20050 	.word	0x01d20050
 c1004b0:	22000220 	.word	0x22000220

0c1004b4 <sys_init>:

void sys_init( void )
{
 c1004b4:	e1a0c00d 	mov	ip, sp
 c1004b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1004bc:	e24cb004 	sub	fp, ip, #4
    WTCON  = 0;    
 c1004c0:	e59f3068 	ldr	r3, [pc, #104]	; c100530 <sys_init+0x7c>
 c1004c4:	e3a02000 	mov	r2, #0
 c1004c8:	e5832000 	str	r2, [r3]
    INTMSK = ~0;
 c1004cc:	e59f3060 	ldr	r3, [pc, #96]	; c100534 <sys_init+0x80>
 c1004d0:	e3e02000 	mvn	r2, #0
 c1004d4:	e5832000 	str	r2, [r3]

    LOCKTIME = 0xfff;
 c1004d8:	e59f3058 	ldr	r3, [pc, #88]	; c100538 <sys_init+0x84>
 c1004dc:	e59f2058 	ldr	r2, [pc, #88]	; c10053c <sys_init+0x88>
 c1004e0:	e5832000 	str	r2, [r3]
    PLLCON   = 0x38021;
 c1004e4:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c1004e8:	e59f2050 	ldr	r2, [pc, #80]	; c100540 <sys_init+0x8c>
 c1004ec:	e5832000 	str	r2, [r3]
    CLKSLOW  = 0x8;
 c1004f0:	e59f304c 	ldr	r3, [pc, #76]	; c100544 <sys_init+0x90>
 c1004f4:	e3a02008 	mov	r2, #8
 c1004f8:	e5832000 	str	r2, [r3]
    CLKCON   = 0x7ff8;
 c1004fc:	e59f3044 	ldr	r3, [pc, #68]	; c100548 <sys_init+0x94>
 c100500:	e59f2044 	ldr	r2, [pc, #68]	; c10054c <sys_init+0x98>
 c100504:	e5832000 	str	r2, [r3]
    
    SBUSCON = 0x8000001b;
 c100508:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c10050c:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c100510:	e5832000 	str	r2, [r3]
    
    SYSCFG = 0x0;
 c100514:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c100518:	e3a02000 	mov	r2, #0
 c10051c:	e5832000 	str	r2, [r3]
       
    port_init();
 c100520:	ebffff81 	bl	c10032c <port_init>
}
 c100524:	e24bd00c 	sub	sp, fp, #12
 c100528:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10052c:	e12fff1e 	bx	lr
 c100530:	01d30000 	.word	0x01d30000
 c100534:	01e0000c 	.word	0x01e0000c
 c100538:	01d8000c 	.word	0x01d8000c
 c10053c:	00000fff 	.word	0x00000fff
 c100540:	00038021 	.word	0x00038021
 c100544:	01d80008 	.word	0x01d80008
 c100548:	01d80004 	.word	0x01d80004
 c10054c:	00007ff8 	.word	0x00007ff8

0c100550 <uart0_init>:
#include <s3c44b0x.h>
#include <uart.h>

void uart0_init(void)
{
 c100550:	e1a0c00d 	mov	ip, sp
 c100554:	e92dd800 	push	{fp, ip, lr, pc}
 c100558:	e24cb004 	sub	fp, ip, #4
    UFCON0 = 0x1;
 c10055c:	e59f3040 	ldr	r3, [pc, #64]	; c1005a4 <uart0_init+0x54>
 c100560:	e3a02001 	mov	r2, #1
 c100564:	e5832000 	str	r2, [r3]
    UMCON0 = 0x0;
 c100568:	e59f3038 	ldr	r3, [pc, #56]	; c1005a8 <uart0_init+0x58>
 c10056c:	e3a02000 	mov	r2, #0
 c100570:	e5832000 	str	r2, [r3]
    ULCON0 = 0x3;
 c100574:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c100578:	e3a02003 	mov	r2, #3
 c10057c:	e5832000 	str	r2, [r3]
    UBRDIV0 = 0x22;
 c100580:	e59f3024 	ldr	r3, [pc, #36]	; c1005ac <uart0_init+0x5c>
 c100584:	e3a02022 	mov	r2, #34	; 0x22
 c100588:	e5832000 	str	r2, [r3]
    UCON0 = 0x5;
 c10058c:	e59f301c 	ldr	r3, [pc, #28]	; c1005b0 <uart0_init+0x60>
 c100590:	e3a02005 	mov	r2, #5
 c100594:	e5832000 	str	r2, [r3]
}
 c100598:	e24bd00c 	sub	sp, fp, #12
 c10059c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1005a0:	e12fff1e 	bx	lr
 c1005a4:	01d00008 	.word	0x01d00008
 c1005a8:	01d0000c 	.word	0x01d0000c
 c1005ac:	01d00028 	.word	0x01d00028
 c1005b0:	01d00004 	.word	0x01d00004

0c1005b4 <uart0_putchar>:

void uart0_putchar(char ch)
{
 c1005b4:	e1a0c00d 	mov	ip, sp
 c1005b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1005bc:	e24cb004 	sub	fp, ip, #4
 c1005c0:	e24dd008 	sub	sp, sp, #8
 c1005c4:	e1a03000 	mov	r3, r0
 c1005c8:	e54b300d 	strb	r3, [fp, #-13]
    while(UFSTAT0 & (1 << 9));
 c1005cc:	e1a00000 	nop			; (mov r0, r0)
 c1005d0:	e59f3024 	ldr	r3, [pc, #36]	; c1005fc <uart0_putchar+0x48>
 c1005d4:	e5933000 	ldr	r3, [r3]
 c1005d8:	e2033c02 	and	r3, r3, #512	; 0x200
 c1005dc:	e3530000 	cmp	r3, #0
 c1005e0:	1afffffa 	bne	c1005d0 <uart0_putchar+0x1c>
    UTXH0 = ch;
 c1005e4:	e59f3014 	ldr	r3, [pc, #20]	; c100600 <uart0_putchar+0x4c>
 c1005e8:	e55b200d 	ldrb	r2, [fp, #-13]
 c1005ec:	e5832000 	str	r2, [r3]
}        
 c1005f0:	e24bd00c 	sub	sp, fp, #12
 c1005f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1005f8:	e12fff1e 	bx	lr
 c1005fc:	01d00018 	.word	0x01d00018
 c100600:	01d00020 	.word	0x01d00020

0c100604 <uart0_getchar>:

char uart0_getchar(void)
{
 c100604:	e1a0c00d 	mov	ip, sp
 c100608:	e92dd800 	push	{fp, ip, lr, pc}
 c10060c:	e24cb004 	sub	fp, ip, #4
    while(!(UFSTAT0 & 0xf));
 c100610:	e1a00000 	nop			; (mov r0, r0)
 c100614:	e59f3028 	ldr	r3, [pc, #40]	; c100644 <uart0_getchar+0x40>
 c100618:	e5933000 	ldr	r3, [r3]
 c10061c:	e203300f 	and	r3, r3, #15
 c100620:	e3530000 	cmp	r3, #0
 c100624:	0afffffa 	beq	c100614 <uart0_getchar+0x10>
    return URXH0;
 c100628:	e59f3018 	ldr	r3, [pc, #24]	; c100648 <uart0_getchar+0x44>
 c10062c:	e5933000 	ldr	r3, [r3]
 c100630:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c100634:	e1a00003 	mov	r0, r3
 c100638:	e24bd00c 	sub	sp, fp, #12
 c10063c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100640:	e12fff1e 	bx	lr
 c100644:	01d00018 	.word	0x01d00018
 c100648:	01d00024 	.word	0x01d00024

0c10064c <uart0_puts>:

void uart0_puts(char *s) {
 c10064c:	e1a0c00d 	mov	ip, sp
 c100650:	e92dd800 	push	{fp, ip, lr, pc}
 c100654:	e24cb004 	sub	fp, ip, #4
 c100658:	e24dd008 	sub	sp, sp, #8
 c10065c:	e50b0010 	str	r0, [fp, #-16]
    while(*s) {
 c100660:	ea000006 	b	c100680 <uart0_puts+0x34>
    	uart0_putchar(*s);
 c100664:	e51b3010 	ldr	r3, [fp, #-16]
 c100668:	e5d33000 	ldrb	r3, [r3]
 c10066c:	e1a00003 	mov	r0, r3
 c100670:	ebffffcf 	bl	c1005b4 <uart0_putchar>
    	++s;
 c100674:	e51b3010 	ldr	r3, [fp, #-16]
 c100678:	e2833001 	add	r3, r3, #1
 c10067c:	e50b3010 	str	r3, [fp, #-16]
    while(!(UFSTAT0 & 0xf));
    return URXH0;
}

void uart0_puts(char *s) {
    while(*s) {
 c100680:	e51b3010 	ldr	r3, [fp, #-16]
 c100684:	e5d33000 	ldrb	r3, [r3]
 c100688:	e3530000 	cmp	r3, #0
 c10068c:	1afffff4 	bne	c100664 <uart0_puts+0x18>
    	uart0_putchar(*s);
    	++s;
    }
}
 c100690:	e24bd00c 	sub	sp, fp, #12
 c100694:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100698:	e12fff1e 	bx	lr

0c10069c <uart0_putint>:

void uart0_putint(int32 i) {
 c10069c:	e1a0c00d 	mov	ip, sp
 c1006a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1006a4:	e24cb004 	sub	fp, ip, #4
 c1006a8:	e24dd020 	sub	sp, sp, #32
 c1006ac:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    char buff[11 + 1];
    char* _Idx = buff + 11;
 c1006b0:	e24b3020 	sub	r3, fp, #32
 c1006b4:	e283300b 	add	r3, r3, #11
 c1006b8:	e50b3010 	str	r3, [fp, #-16]
    uint8 _Char;
    boolean _Neg = 0;
 c1006bc:	e3a03000 	mov	r3, #0
 c1006c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

    *_Idx = '\0';
 c1006c4:	e51b3010 	ldr	r3, [fp, #-16]
 c1006c8:	e3a02000 	mov	r2, #0
 c1006cc:	e5c32000 	strb	r2, [r3]

    if(i == 0) {
 c1006d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1006d4:	e3530000 	cmp	r3, #0
 c1006d8:	1a000008 	bne	c100700 <uart0_putint+0x64>
    	*--_Idx = '0';
 c1006dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1006e0:	e2433001 	sub	r3, r3, #1
 c1006e4:	e50b3010 	str	r3, [fp, #-16]
 c1006e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1006ec:	e3a02030 	mov	r2, #48	; 0x30
 c1006f0:	e5c32000 	strb	r2, [r3]
    	uart0_puts(_Idx);
 c1006f4:	e51b0010 	ldr	r0, [fp, #-16]
 c1006f8:	ebffffd3 	bl	c10064c <uart0_puts>
    	return;
 c1006fc:	ea000030 	b	c1007c4 <uart0_putint+0x128>
    }

    if(i < 0) {
 c100700:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c100704:	e3530000 	cmp	r3, #0
 c100708:	aa00001f 	bge	c10078c <uart0_putint+0xf0>
    	_Neg = 1;
 c10070c:	e3a03001 	mov	r3, #1
 c100710:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    	i = -i;
 c100714:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c100718:	e2633000 	rsb	r3, r3, #0
 c10071c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }

    while(i) {
 c100720:	ea000019 	b	c10078c <uart0_putint+0xf0>
    	*--_Idx = (i % 10) + '0';
 c100724:	e51b3010 	ldr	r3, [fp, #-16]
 c100728:	e2433001 	sub	r3, r3, #1
 c10072c:	e50b3010 	str	r3, [fp, #-16]
 c100730:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c100734:	e59f3094 	ldr	r3, [pc, #148]	; c1007d0 <uart0_putint+0x134>
 c100738:	e0c32391 	smull	r2, r3, r1, r3
 c10073c:	e1a02143 	asr	r2, r3, #2
 c100740:	e1a03fc1 	asr	r3, r1, #31
 c100744:	e0632002 	rsb	r2, r3, r2
 c100748:	e1a03002 	mov	r3, r2
 c10074c:	e1a03103 	lsl	r3, r3, #2
 c100750:	e0833002 	add	r3, r3, r2
 c100754:	e1a03083 	lsl	r3, r3, #1
 c100758:	e0632001 	rsb	r2, r3, r1
 c10075c:	e20230ff 	and	r3, r2, #255	; 0xff
 c100760:	e2833030 	add	r3, r3, #48	; 0x30
 c100764:	e20320ff 	and	r2, r3, #255	; 0xff
 c100768:	e51b3010 	ldr	r3, [fp, #-16]
 c10076c:	e5c32000 	strb	r2, [r3]
    	i /= 10;
 c100770:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c100774:	e59f2054 	ldr	r2, [pc, #84]	; c1007d0 <uart0_putint+0x134>
 c100778:	e0c21293 	smull	r1, r2, r3, r2
 c10077c:	e1a02142 	asr	r2, r2, #2
 c100780:	e1a03fc3 	asr	r3, r3, #31
 c100784:	e0633002 	rsb	r3, r3, r2
 c100788:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    if(i < 0) {
    	_Neg = 1;
    	i = -i;
    }

    while(i) {
 c10078c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c100790:	e3530000 	cmp	r3, #0
 c100794:	1affffe2 	bne	c100724 <uart0_putint+0x88>
    	*--_Idx = (i % 10) + '0';
    	i /= 10;
    }

    if(_Neg) {
 c100798:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10079c:	e3530000 	cmp	r3, #0
 c1007a0:	0a000005 	beq	c1007bc <uart0_putint+0x120>
    	*--_Idx = '-';
 c1007a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1007a8:	e2433001 	sub	r3, r3, #1
 c1007ac:	e50b3010 	str	r3, [fp, #-16]
 c1007b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1007b4:	e3a0202d 	mov	r2, #45	; 0x2d
 c1007b8:	e5c32000 	strb	r2, [r3]
    }

    uart0_puts(_Idx);
 c1007bc:	e51b0010 	ldr	r0, [fp, #-16]
 c1007c0:	ebffffa1 	bl	c10064c <uart0_puts>

}
 c1007c4:	e24bd00c 	sub	sp, fp, #12
 c1007c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1007cc:	e12fff1e 	bx	lr
 c1007d0:	66666667 	.word	0x66666667

0c1007d4 <uart0_puthex>:

void uart0_puthex(uint32 i)
{
 c1007d4:	e1a0c00d 	mov	ip, sp
 c1007d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1007dc:	e24cb004 	sub	fp, ip, #4
 c1007e0:	e24dd018 	sub	sp, sp, #24
 c1007e4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c1007e8:	e24b301c 	sub	r3, fp, #28
 c1007ec:	e2833008 	add	r3, r3, #8
 c1007f0:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c1007f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1007f8:	e3a02000 	mov	r2, #0
 c1007fc:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c100800:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100804:	e20330ff 	and	r3, r3, #255	; 0xff
 c100808:	e203300f 	and	r3, r3, #15
 c10080c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c100810:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100814:	e3530009 	cmp	r3, #9
 c100818:	8a000008 	bhi	c100840 <uart0_puthex+0x6c>
            *--p = '0' + c;
 c10081c:	e51b3010 	ldr	r3, [fp, #-16]
 c100820:	e2433001 	sub	r3, r3, #1
 c100824:	e50b3010 	str	r3, [fp, #-16]
 c100828:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10082c:	e2833030 	add	r3, r3, #48	; 0x30
 c100830:	e20320ff 	and	r2, r3, #255	; 0xff
 c100834:	e51b3010 	ldr	r3, [fp, #-16]
 c100838:	e5c32000 	strb	r2, [r3]
 c10083c:	ea000007 	b	c100860 <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c100840:	e51b3010 	ldr	r3, [fp, #-16]
 c100844:	e2433001 	sub	r3, r3, #1
 c100848:	e50b3010 	str	r3, [fp, #-16]
 c10084c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100850:	e2833057 	add	r3, r3, #87	; 0x57
 c100854:	e20320ff 	and	r2, r3, #255	; 0xff
 c100858:	e51b3010 	ldr	r3, [fp, #-16]
 c10085c:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c100860:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100864:	e1a03223 	lsr	r3, r3, #4
 c100868:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c10086c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100870:	e3530000 	cmp	r3, #0
 c100874:	1affffe1 	bne	c100800 <uart0_puthex+0x2c>

    uart0_puts( p );
 c100878:	e51b0010 	ldr	r0, [fp, #-16]
 c10087c:	ebffff72 	bl	c10064c <uart0_puts>
}
 c100880:	e24bd00c 	sub	sp, fp, #12
 c100884:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100888:	e12fff1e 	bx	lr

0c10088c <uart0_gets>:

void uart0_gets(char *s) {
 c10088c:	e1a0c00d 	mov	ip, sp
 c100890:	e92dd800 	push	{fp, ip, lr, pc}
 c100894:	e24cb004 	sub	fp, ip, #4
 c100898:	e24dd010 	sub	sp, sp, #16
 c10089c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char _Ch;

    do {
    	_Ch = uart0_getchar();
 c1008a0:	ebffff57 	bl	c100604 <uart0_getchar>
 c1008a4:	e1a03000 	mov	r3, r0
 c1008a8:	e54b300d 	strb	r3, [fp, #-13]
    	*s++ = _Ch;
 c1008ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1008b0:	e55b200d 	ldrb	r2, [fp, #-13]
 c1008b4:	e5c32000 	strb	r2, [r3]
 c1008b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1008bc:	e2833001 	add	r3, r3, #1
 c1008c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    } while(_Ch != '\n' && _Ch != '\r');
 c1008c4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1008c8:	e353000a 	cmp	r3, #10
 c1008cc:	0a000002 	beq	c1008dc <uart0_gets+0x50>
 c1008d0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1008d4:	e353000d 	cmp	r3, #13
 c1008d8:	1afffff0 	bne	c1008a0 <uart0_gets+0x14>

    *(s - 1) = '\0';
 c1008dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1008e0:	e2433001 	sub	r3, r3, #1
 c1008e4:	e3a02000 	mov	r2, #0
 c1008e8:	e5c32000 	strb	r2, [r3]
}
 c1008ec:	e24bd00c 	sub	sp, fp, #12
 c1008f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1008f4:	e12fff1e 	bx	lr

0c1008f8 <uart0_getint>:

int32 uart0_getint(void) {
 c1008f8:	e1a0c00d 	mov	ip, sp
 c1008fc:	e92dd800 	push	{fp, ip, lr, pc}
 c100900:	e24cb004 	sub	fp, ip, #4
 c100904:	e24dd018 	sub	sp, sp, #24
	char _Buff[11 + 1];
	uart0_gets(_Buff);
 c100908:	e24b3024 	sub	r3, fp, #36	; 0x24
 c10090c:	e1a00003 	mov	r0, r3
 c100910:	ebffffdd 	bl	c10088c <uart0_gets>

	int32 result = 0;
 c100914:	e3a03000 	mov	r3, #0
 c100918:	e50b3010 	str	r3, [fp, #-16]
	boolean _Neg = 0;
 c10091c:	e3a03000 	mov	r3, #0
 c100920:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	uint32 _Idx	 = 0;
 c100924:	e3a03000 	mov	r3, #0
 c100928:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	if(_Buff[0] == '-') {
 c10092c:	e55b3024 	ldrb	r3, [fp, #-36]	; 0xffffffdc
 c100930:	e353002d 	cmp	r3, #45	; 0x2d
 c100934:	1a000018 	bne	c10099c <uart0_getint+0xa4>
		_Neg = 1;
 c100938:	e3a03001 	mov	r3, #1
 c10093c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		++_Idx;
 c100940:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100944:	e2833001 	add	r3, r3, #1
 c100948:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}

	while(_Buff[_Idx] >= '0' && _Buff[_Idx] <= '9') {
 c10094c:	ea000013 	b	c1009a0 <uart0_getint+0xa8>
		result = result * 10 + (_Buff[_Idx] - '0');
 c100950:	e51b2010 	ldr	r2, [fp, #-16]
 c100954:	e1a03002 	mov	r3, r2
 c100958:	e1a03103 	lsl	r3, r3, #2
 c10095c:	e0833002 	add	r3, r3, r2
 c100960:	e1a03083 	lsl	r3, r3, #1
 c100964:	e1a02003 	mov	r2, r3
 c100968:	e3e03017 	mvn	r3, #23
 c10096c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c100970:	e24b000c 	sub	r0, fp, #12
 c100974:	e0801001 	add	r1, r0, r1
 c100978:	e0813003 	add	r3, r1, r3
 c10097c:	e5d33000 	ldrb	r3, [r3]
 c100980:	e2433030 	sub	r3, r3, #48	; 0x30
 c100984:	e0823003 	add	r3, r2, r3
 c100988:	e50b3010 	str	r3, [fp, #-16]
		++_Idx;
 c10098c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100990:	e2833001 	add	r3, r3, #1
 c100994:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100998:	ea000000 	b	c1009a0 <uart0_getint+0xa8>
	if(_Buff[0] == '-') {
		_Neg = 1;
		++_Idx;
	}

	while(_Buff[_Idx] >= '0' && _Buff[_Idx] <= '9') {
 c10099c:	e1a00000 	nop			; (mov r0, r0)
 c1009a0:	e3e03017 	mvn	r3, #23
 c1009a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1009a8:	e24b100c 	sub	r1, fp, #12
 c1009ac:	e0812002 	add	r2, r1, r2
 c1009b0:	e0823003 	add	r3, r2, r3
 c1009b4:	e5d33000 	ldrb	r3, [r3]
 c1009b8:	e353002f 	cmp	r3, #47	; 0x2f
 c1009bc:	9a000007 	bls	c1009e0 <uart0_getint+0xe8>
 c1009c0:	e3e03017 	mvn	r3, #23
 c1009c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1009c8:	e24b000c 	sub	r0, fp, #12
 c1009cc:	e0802002 	add	r2, r0, r2
 c1009d0:	e0823003 	add	r3, r2, r3
 c1009d4:	e5d33000 	ldrb	r3, [r3]
 c1009d8:	e3530039 	cmp	r3, #57	; 0x39
 c1009dc:	9affffdb 	bls	c100950 <uart0_getint+0x58>
		result = result * 10 + (_Buff[_Idx] - '0');
		++_Idx;
	}

	if(_Neg) {
 c1009e0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1009e4:	e3530000 	cmp	r3, #0
 c1009e8:	0a000002 	beq	c1009f8 <uart0_getint+0x100>
		result = -result;
 c1009ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1009f0:	e2633000 	rsb	r3, r3, #0
 c1009f4:	e50b3010 	str	r3, [fp, #-16]
	}

	return result;
 c1009f8:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1009fc:	e1a00003 	mov	r0, r3
 c100a00:	e24bd00c 	sub	sp, fp, #12
 c100a04:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a08:	e12fff1e 	bx	lr

0c100a0c <uart0_gethex>:

uint32 uart0_gethex(void) {
 c100a0c:	e1a0c00d 	mov	ip, sp
 c100a10:	e92dd800 	push	{fp, ip, lr, pc}
 c100a14:	e24cb004 	sub	fp, ip, #4
 c100a18:	e24dd018 	sub	sp, sp, #24
    char _Buff[8 + 1];
    uart0_gets(_Buff);
 c100a1c:	e24b3020 	sub	r3, fp, #32
 c100a20:	e1a00003 	mov	r0, r3
 c100a24:	ebffff98 	bl	c10088c <uart0_gets>

    uint32 result = 0;
 c100a28:	e3a03000 	mov	r3, #0
 c100a2c:	e50b3010 	str	r3, [fp, #-16]
    char* _Idx 	  = _Buff;
 c100a30:	e24b3020 	sub	r3, fp, #32
 c100a34:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    while(*_Idx != '\0') {
 c100a38:	ea00002b 	b	c100aec <uart0_gethex+0xe0>
    	char _Ch = *_Idx;
 c100a3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100a40:	e5d33000 	ldrb	r3, [r3]
 c100a44:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    	if	   (_Ch >= '0' && _Ch <= '9')
 c100a48:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100a4c:	e353002f 	cmp	r3, #47	; 0x2f
 c100a50:	9a000009 	bls	c100a7c <uart0_gethex+0x70>
 c100a54:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100a58:	e3530039 	cmp	r3, #57	; 0x39
 c100a5c:	8a000006 	bhi	c100a7c <uart0_gethex+0x70>
    		result = result * 16 + (_Ch - '0');
 c100a60:	e51b3010 	ldr	r3, [fp, #-16]
 c100a64:	e1a02203 	lsl	r2, r3, #4
 c100a68:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100a6c:	e0823003 	add	r3, r2, r3
 c100a70:	e2433030 	sub	r3, r3, #48	; 0x30
 c100a74:	e50b3010 	str	r3, [fp, #-16]
 c100a78:	ea000018 	b	c100ae0 <uart0_gethex+0xd4>
    	else if(_Ch >= 'a' && _Ch <= 'f')
 c100a7c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100a80:	e3530060 	cmp	r3, #96	; 0x60
 c100a84:	9a000009 	bls	c100ab0 <uart0_gethex+0xa4>
 c100a88:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100a8c:	e3530066 	cmp	r3, #102	; 0x66
 c100a90:	8a000006 	bhi	c100ab0 <uart0_gethex+0xa4>
    		result = result * 16 + (_Ch - 'a' + 10);
 c100a94:	e51b3010 	ldr	r3, [fp, #-16]
 c100a98:	e1a02203 	lsl	r2, r3, #4
 c100a9c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100aa0:	e0823003 	add	r3, r2, r3
 c100aa4:	e2433057 	sub	r3, r3, #87	; 0x57
 c100aa8:	e50b3010 	str	r3, [fp, #-16]
 c100aac:	ea00000b 	b	c100ae0 <uart0_gethex+0xd4>
    	else if(_Ch >= 'A' && _Ch <= 'F')
 c100ab0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100ab4:	e3530040 	cmp	r3, #64	; 0x40
 c100ab8:	9a00000f 	bls	c100afc <uart0_gethex+0xf0>
 c100abc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100ac0:	e3530046 	cmp	r3, #70	; 0x46
 c100ac4:	8a00000c 	bhi	c100afc <uart0_gethex+0xf0>
    		result = result * 16 + (_Ch - 'A' + 10);
 c100ac8:	e51b3010 	ldr	r3, [fp, #-16]
 c100acc:	e1a02203 	lsl	r2, r3, #4
 c100ad0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100ad4:	e0823003 	add	r3, r2, r3
 c100ad8:	e2433037 	sub	r3, r3, #55	; 0x37
 c100adc:	e50b3010 	str	r3, [fp, #-16]
    	else break;

    	++_Idx;
 c100ae0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100ae4:	e2833001 	add	r3, r3, #1
 c100ae8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uart0_gets(_Buff);

    uint32 result = 0;
    char* _Idx 	  = _Buff;

    while(*_Idx != '\0') {
 c100aec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100af0:	e5d33000 	ldrb	r3, [r3]
 c100af4:	e3530000 	cmp	r3, #0
 c100af8:	1affffcf 	bne	c100a3c <uart0_gethex+0x30>
    	else break;

    	++_Idx;
    }

    return result;
 c100afc:	e51b3010 	ldr	r3, [fp, #-16]
}
 c100b00:	e1a00003 	mov	r0, r3
 c100b04:	e24bd00c 	sub	sp, fp, #12
 c100b08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100b0c:	e12fff1e 	bx	lr
